{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [0, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar iconv = require(\"iconv-lite\");\n\nvar jschardet = require(\"jschardet\");\n\nfunction read(path) {\n  return __awaiter(this, void 0, void 0, function () {\n    var stat, fd, result, buffer;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fileStat(path)];\n\n        case 1:\n          stat = _a.sent();\n          fd = null;\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2,, 5, 8]);\n\n          return [4\n          /*yield*/\n          , openFile(path, \"r\")];\n\n        case 3:\n          fd = _a.sent();\n          buffer = new Buffer(stat.size);\n          return [4\n          /*yield*/\n          , readFile(fd, buffer, 0, stat.size, 0)];\n\n        case 4:\n          _a.sent();\n\n          result = decode(buffer);\n          return [3\n          /*break*/\n          , 8];\n\n        case 5:\n          if (!(fd !== null && fd !== undefined)) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , closeFile(fd)];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          return [7\n          /*endfinally*/\n          ];\n\n        case 8:\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n\nexports.read = read;\n\nfunction readSync(path) {\n  var stat = fs.statSync(path);\n  var fd = null;\n  var result;\n\n  try {\n    fd = fs.openSync(path, \"r\");\n    var buffer = new Buffer(stat.size);\n    fs.readSync(fd, buffer, 0, stat.size, 0);\n    result = decode(buffer);\n  } finally {\n    if (fd !== null && fd !== undefined) {\n      fs.closeSync(fd);\n    }\n  }\n\n  return result;\n}\n\nexports.readSync = readSync;\n\nfunction decode(buffer) {\n  // TODO: fallback for when confidence is too low? (pass it as \"defaultEncoding\" below)\n  // TODO: this is decoding the whole file twice (once to get encoding name, then again to really decode... should just take a portion of it to get the encoding name)\n  var encodingName = getEncodingName(buffer);\n  return iconv.decode(buffer, encodingName, {\n    stripBOM: true,\n    addBOM: false,\n    defaultEncoding: \"utf-8\"\n  });\n}\n\nfunction getEncodingName(buffer) {\n  // TODO: set min confidence?\n  var result = jschardet.detect(buffer);\n  return result.encoding;\n} // TODO: share these, or try fs-promise (or similar)\n\n\nfunction fileStat(path) {\n  return new Promise(function (resolve, reject) {\n    fs.stat(path, function (err, stats) {\n      if (null !== err && undefined !== err) {\n        reject(err);\n      } else {\n        resolve(stats);\n      }\n    });\n  });\n}\n\nfunction openFile(path, flags) {\n  return new Promise(function (resolve, reject) {\n    fs.open(path, flags, function (err, fd) {\n      if (null !== err && undefined !== err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readFile(fd, buffer, offset, length, position) {\n  return new Promise(function (resolve, reject) {\n    fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer) {\n      if (null !== err && undefined !== err) {\n        reject(err);\n      } else {\n        resolve({\n          bytesRead: bytesRead,\n          buffer: buffer\n        });\n      }\n    });\n  });\n}\n\nfunction closeFile(fd) {\n  return new Promise(function (resolve, reject) {\n    fs.close(fd, function (err) {\n      if (null !== err && undefined !== err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}