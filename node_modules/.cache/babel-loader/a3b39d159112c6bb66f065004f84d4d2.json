{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   AntÃ³nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.CharDistributionAnalysis = function () {\n    var ENOUGH_DATA_THRESHOLD = 1024;\n    var SURE_YES = 0.99;\n    var SURE_NO = 0.01;\n    var MINIMUM_DATA_THRESHOLD = 3;\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = null; // Mapping table to get frequency order from char order (get from GetOrder())\n\n      self._mTableSize = null; // Size of above table\n\n      self._mTypicalDistributionRatio = null; // This is a constant value which varies from language to language, used in calculating confidence.  See http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html for further detail.\n\n      self.reset();\n    }\n    /**\n     * reset analyser, clear any state\n     */\n\n\n    this.reset = function () {\n      this._mDone = false; // If this flag is set to constants.True, detection is done and conclusion has been made\n\n      this._mTotalChars = 0; // Total characters encountered\n\n      this._mFreqChars = 0; // The number of characters whose frequency order is less than 512\n    };\n    /**\n     * feed a character with known length\n     */\n\n\n    this.feed = function (aStr, aCharLen) {\n      if (aCharLen == 2) {\n        // we only care about 2-bytes character in our distribution analysis\n        var order = this.getOrder(aStr);\n      } else {\n        order = -1;\n      }\n\n      if (order >= 0) {\n        this._mTotalChars++; // order is valid\n\n        if (order < this._mTableSize) {\n          if (512 > this._mCharToFreqOrder[order]) {\n            this._mFreqChars++;\n          }\n        }\n      }\n    };\n    /**\n     * return confidence based on existing data\n     */\n\n\n    this.getConfidence = function () {\n      // if we didn't receive any character in our consideration range, return negative answer\n      if (this._mTotalChars <= 0 || this._mFreqChars <= MINIMUM_DATA_THRESHOLD) {\n        return SURE_NO;\n      }\n\n      if (this._mTotalChars != this._mFreqChars) {\n        var r = this._mFreqChars / ((this._mTotalChars - this._mFreqChars) * this._mTypicalDistributionRatio);\n\n        if (r < SURE_YES) {\n          return r;\n        }\n      } // normalize confidence (we don't want to be 100% sure)\n\n\n      return SURE_YES;\n    };\n\n    this.gotEnoughData = function () {\n      // It is not necessary to receive all data to draw conclusion. For charset detection,\n      // certain amount of data is enough\n      return this._mTotalChars > ENOUGH_DATA_THRESHOLD;\n    };\n\n    this.getOrder = function (aStr) {\n      // We do not handle characters based on the original encoding string, but\n      // convert this encoding string to a number, here called order.\n      // This allows multiple encodings of a language to share one frequency table.\n      return -1;\n    };\n\n    init();\n  };\n\n  jschardet.EUCTWDistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.EUCTWCharToFreqOrder;\n      self._mTableSize = jschardet.EUCTW_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.EUCTW_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for euc-TW encoding, we are interested\n      //   first  byte range: 0xc4 -- 0xfe\n      //   second byte range: 0xa1 -- 0xfe\n      // no validation needed here. State machine has done that\n      if (aStr.charCodeAt(0) >= 0xC4) {\n        return 94 * (aStr.charCodeAt(0) - 0xC4) + aStr.charCodeAt(1) - 0xA1;\n      } else {\n        return -1;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.EUCTWDistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n\n  jschardet.EUCKRDistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.EUCKRCharToFreqOrder;\n      self._mTableSize = jschardet.EUCKR_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.EUCKR_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for euc-KR encoding, we are interested\n      //   first  byte range: 0xb0 -- 0xfe\n      //   second byte range: 0xa1 -- 0xfe\n      // no validation needed here. State machine has done that\n      if (aStr.charCodeAt(0) >= 0xB0) {\n        return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n      } else {\n        return -1;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.EUCKRDistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n\n  jschardet.GB2312DistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.GB2312CharToFreqOrder;\n      self._mTableSize = jschardet.GB2312_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.GB2312_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for GB2312 encoding, we are interested\n      //  first  byte range: 0xb0 -- 0xfe\n      //  second byte range: 0xa1 -- 0xfe\n      // no validation needed here. State machine has done that\n      if (aStr.charCodeAt(0) >= 0xB0 && aStr.charCodeAt(1) >= 0xA1) {\n        return 94 * (aStr.charCodeAt(0) - 0xB0) + aStr.charCodeAt(1) - 0xA1;\n      } else {\n        return -1;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.GB2312DistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n\n  jschardet.Big5DistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.Big5CharToFreqOrder;\n      self._mTableSize = jschardet.BIG5_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.BIG5_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for big5 encoding, we are interested\n      //   first  byte range: 0xa4 -- 0xfe\n      //   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe\n      // no validation needed here. State machine has done that\n      if (aStr.charCodeAt(0) >= 0xA4) {\n        if (aStr.charCodeAt(1) >= 0xA1) {\n          return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0xA1 + 63;\n        } else {\n          return 157 * (aStr.charCodeAt(0) - 0xA4) + aStr.charCodeAt(1) - 0x40;\n        }\n      } else {\n        return -1;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.Big5DistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n\n  jschardet.SJISDistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.JISCharToFreqOrder;\n      self._mTableSize = jschardet.JIS_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.JIS_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for sjis encoding, we are interested\n      //   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xef\n      //   second byte range: 0x40 -- 0x7e,  0x80 -- 0xfc\n      // no validation needed here. State machine has done that\n      if (aStr.charCodeAt(0) >= 0x81 && aStr.charCodeAt(0) <= 0x9F) {\n        var order = 188 * (aStr.charCodeAt(0) - 0x81);\n      } else if (aStr.charCodeAt(0) >= 0xE0 && aStr.charCodeAt(0) <= 0xEF) {\n        order = 188 * (aStr.charCodeAt(0) - 0xE0 + 31);\n      } else {\n        return -1;\n      }\n\n      order += aStr.charCodeAt(1) - 0x40;\n\n      if (aStr.charCodeAt(1) < 0x40 || aStr.charCodeAt(1) === 0x7F || aStr.charCodeAt(1) > 0xFC) {\n        order = -1;\n      }\n\n      return order;\n    };\n\n    init();\n  };\n\n  jschardet.SJISDistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n\n  jschardet.EUCJPDistributionAnalysis = function () {\n    jschardet.CharDistributionAnalysis.apply(this);\n    var self = this;\n\n    function init() {\n      self._mCharToFreqOrder = jschardet.JISCharToFreqOrder;\n      self._mTableSize = jschardet.JIS_TABLE_SIZE;\n      self._mTypicalDistributionRatio = jschardet.JIS_TYPICAL_DISTRIBUTION_RATIO;\n    }\n\n    this.getOrder = function (aStr) {\n      // for euc-JP encoding, we are interested\n      //   first  byte range: 0xa0 -- 0xfe\n      //   second byte range: 0xa1 -- 0xfe\n      // no validation needed here. State machine has done that\n      if (aStr[0] >= \"\\xA0\") {\n        return 94 * (aStr.charCodeAt(0) - 0xA1) + aStr.charCodeAt(1) - 0xA1;\n      } else {\n        return -1;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.EUCJPDistributionAnalysis.prototype = new jschardet.CharDistributionAnalysis();\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}