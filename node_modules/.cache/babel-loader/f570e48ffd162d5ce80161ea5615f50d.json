{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport Attachment from './Attachment';\nimport { SelectableItemsContainer } from './base/SelectableItemsContainer';\n/**\n * @hidden\n */\n\nvar AttachmentGroup =\n/** @class */\nfunction (_super) {\n  __extends(AttachmentGroup, _super);\n\n  function AttachmentGroup() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AttachmentGroup.prototype.render = function () {\n    var _this = this;\n\n    var isCardDeckLayout = this.isCardDeckLayout(this.props);\n    var viewWithoutScrollButtons = React.createElement(\"div\", {\n      className: this.getClassNames(),\n      onKeyDown: isCardDeckLayout ? undefined : this.onKeyDown\n    }, this.props.group.attachments.map(function (item, index) {\n      return React.createElement(Attachment, {\n        item: item,\n        template: _this.props.itemTemplate,\n        selected: index === _this.state.selectedItemIndex,\n        tabbable: _this.props.isLastGroup && index === _this.state.selectedItemIndex,\n        isFirstItemInGroup: index === 0,\n        isLastItemInGroup: index === _this.getLastItemIndex(),\n        onClick: function () {\n          return _this.onAttachmentClick(index);\n        },\n        key: index\n      });\n    }));\n\n    if (isCardDeckLayout) {\n      return React.createElement(\"div\", {\n        className: \"k-card-deck-scrollwrap\",\n        onKeyDown: this.onKeyDown\n      }, this.getLeftScrollBtn(), viewWithoutScrollButtons, this.getRightScrollBtn());\n    } else {\n      return viewWithoutScrollButtons;\n    }\n  };\n\n  Object.defineProperty(AttachmentGroup.prototype, \"isKeyboardNavigationLeftRight\", {\n    // Overriding the default navigation.\n    get: function () {\n      return this.isCardDeckLayout(this.props);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AttachmentGroup.prototype.getLastItemIndex = function () {\n    return this.props.group.attachments.length - 1;\n  };\n\n  AttachmentGroup.prototype.getLeftScrollBtn = function () {\n    var _this = this;\n\n    var result = null;\n\n    if (this.isCardDeckLayout(this.props) && this.state.selectedItemIndex) {\n      result = React.createElement(\"button\", {\n        className: \"k-button k-button-icon\",\n        onClick: function () {\n          return _this.onNavigateBtnClick(false);\n        }\n      }, React.createElement(\"span\", {\n        className: \"k-icon k-i-arrow-chevron-left\"\n      }));\n    }\n\n    return result;\n  };\n\n  AttachmentGroup.prototype.getRightScrollBtn = function () {\n    var _this = this;\n\n    var result = null;\n\n    if (this.isCardDeckLayout(this.props) && this.state.selectedItemIndex !== this.getLastItemIndex()) {\n      result = React.createElement(\"button\", {\n        className: \"k-button k-button-icon\",\n        onClick: function () {\n          return _this.onNavigateBtnClick(true);\n        }\n      }, React.createElement(\"span\", {\n        className: \"k-icon k-i-arrow-chevron-right\"\n      }));\n    }\n\n    return result;\n  };\n\n  AttachmentGroup.prototype.onAttachmentClick = function (attachmentIndex) {\n    this.onRequestContainerSelection();\n    this.setState({\n      selectedItemIndex: attachmentIndex\n    });\n  };\n\n  AttachmentGroup.prototype.onNavigateBtnClick = function (incrementSelection) {\n    this.onRequestContainerSelection();\n    this.navigate(incrementSelection, 1);\n  };\n\n  AttachmentGroup.prototype.isCardDeckLayout = function (props) {\n    return props.group.attachmentLayout !== 'list';\n  };\n\n  AttachmentGroup.prototype.getClassNames = function () {\n    return classNames({\n      'k-card-deck': this.isCardDeckLayout(this.props)\n    });\n  };\n\n  return AttachmentGroup;\n}(SelectableItemsContainer);\n\nexport default AttachmentGroup;","map":null,"metadata":{},"sourceType":"module"}