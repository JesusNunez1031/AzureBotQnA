{"ast":null,"code":"var _jsxFileName = \"/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js\";\nimport React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css'; //import * as AdaptiveCards from \"AdaptiveCards\";\n\nimport IntroCard from './IntroCard';\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onAction = event => {\n      if (event.action.type === 'alert') {\n        this.setState(prevState => {\n          return {\n            IntroCard\n          };\n        });\n      }\n    };\n\n    this.parseActions = actions => {\n      if (actions !== undefined) {\n        actions.actions.map(action => {\n          if (action.type === 'imBack') {\n            action.type = 'reply';\n          }\n        });\n        return actions.actions;\n      }\n\n      return [];\n    };\n\n    this.parseText = event => {\n      if (event.actions !== undefined) {\n        return event.action.value;\n      } else if (event.value) {\n        return event.value;\n      } else {\n        return event.message.text;\n      }\n    };\n\n    this.onResponse = activity => {\n      let newMsg;\n\n      if (activity.from.id === this.bot.id) {\n        newMsg = {\n          text: activity.text,\n          author: this.bot,\n          typing: activity.type === \"typing\",\n          timestamp: new Date(activity.timestamp),\n          suggestedActions: this.parseActions(activity.suggestedActions),\n          attachments: activity.attachment ? activity.attachment : []\n        };\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, newMsg]\n          };\n        });\n      }\n    };\n\n    this.addNewMessage = event => {\n      let value = this.parseText(event);\n      this.client.postActivity({\n        from: {\n          id: this.user.id,\n          name: this.user.name\n        },\n        type: 'message',\n        text: value\n      }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n\n      if (!event.value) {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: value,\n              timestamp: new Date()\n            }]\n          };\n        });\n      }\n    };\n\n    this.client = new DirectLine({\n      secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n    });\n    this.client.activity$.subscribe(activity => this.onResponse(activity));\n    this.user = {\n      id: 'User',\n      name: \"Jesus\",\n      avatarUrl: user_avatar\n    };\n    this.bot = {\n      id: 'friendanv-bot',\n      name: 'Friend Bot',\n      avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg'\n    };\n    this.attachments = [{\n      content: 'Name of TV Episode 1',\n      contentType: 'Episode'\n    }, {\n      content: 'Name of the TV Episode 2',\n      contentType: 'Episode'\n    }, {\n      content: 'Name of the TV Episode 3',\n      contentType: 'Episode'\n    }];\n    this.state = {\n      messages: [{\n        author: this.bot,\n        suggestedActions: [{\n          type: 'reply',\n          value: 'Hello!'\n        }, {\n          type: 'reply',\n          value: 'What can you do?'\n        }, {\n          title: 'Shop Friends',\n          value: 'https://www.wbshop.com/collections/friends',\n          type: 'openUrl'\n        }, {\n          title: 'Intro',\n          type: 'alert'\n        }],\n        timestamp: new Date(),\n        text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\"\n      }]\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  }\n\n  render() {\n    return React.createElement(Chat, {\n      messages: this.state.messages,\n      user: this.user,\n      onMessageSend: this.addNewMessage,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Bot;","map":{"version":3,"sources":["/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js"],"names":["React","Component","Chat","HeroCard","DirectLine","IntroCard","user_avatar","Bot","constructor","props","onAction","event","action","type","setState","prevState","parseActions","actions","undefined","map","parseText","value","message","text","onResponse","activity","newMsg","from","id","bot","author","typing","timestamp","Date","suggestedActions","attachments","attachment","messages","addNewMessage","client","postActivity","user","name","subscribe","console","log","error","secret","activity$","avatarUrl","content","contentType","state","title","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css';\n//import * as AdaptiveCards from \"AdaptiveCards\";\nimport IntroCard from './IntroCard';\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n\n    constructor(props) {\n        super(props);\n        this.client = new DirectLine({\n            secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n\n        });\n        this.client.activity$.subscribe(\n            activity => this.onResponse(activity)\n        );\n        this.user = {\n            id: 'User',\n            name: \"Jesus\",\n            avatarUrl: user_avatar\n        };\n\n        this.bot = {\n            id: 'friendanv-bot',\n            name: 'Friend Bot',\n            avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg',\n        };\n        this.attachments = [{\n            content: 'Name of TV Episode 1',\n            contentType: 'Episode'\n        }, {\n            content: 'Name of the TV Episode 2',\n            contentType: 'Episode'\n        }, {\n            content: 'Name of the TV Episode 3',\n            contentType: 'Episode'\n        }];\n        this.state = {\n            messages: [\n                {\n                    author: this.bot,\n                    suggestedActions: [\n                        {\n                            type: 'reply',\n                            value: 'Hello!'\n                        }, {\n                            type: 'reply',\n                            value: 'What can you do?'\n                        }, {\n                            title: 'Shop Friends',\n                            value: 'https://www.wbshop.com/collections/friends',\n                            type: 'openUrl'\n                        }, {\n                            title: 'Intro',\n                            type: 'alert'\n                        },\n                    ],\n                    timestamp: new Date(),\n                    text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\",\n                }\n            ]\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    onAction = (event) => {\n        if (event.action.type === 'alert') {\n            this.setState((prevState) => {\n                return {\n                    IntroCard\n                };\n            });\n        }\n    }\n\n    //[[[[[[[[[[[[[[[[[[[This code is for when the bot triggers the event for the use of a adaptive card]]]]]]]]]]]]]]]]\n    // attachmentTemplate = (props) => {\n    //     let attachment = props.item;\n    //     if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n    //         return <HeroCard\n    //             title={attachment.content.title || attachment.content.text}\n    //             subtitle={attachment.content.subtitle}\n    //             imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n    //             imageMaxWidth=\"300px\"\n    //             actions={attachment.content.buttons}\n    //             onActionExecute={this.addNewMessage} />;\n    //     }\n    //     else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n    //         //let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    //         //adaptiveCard.parse(attachment.content);\n    //         //let renderedCard = adaptiveCard.render();\n    //         //let htmlToinsert = {__html: renderedCard.innerHTML};\n    //         //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n    //     } else {\n    //         return (\n    //             <div className=\"k-card\">\n    //                 {attachment.content}\n    //             </div>\n    //         );\n    //     }\n    // }\n\n    parseActions = (actions) => {\n        if (actions !== undefined) {\n            actions.actions.map(action => {\n                if (action.type === 'imBack') {\n                    action.type = 'reply';\n                }\n            });\n            return actions.actions;\n        }\n        return [];\n    }\n\n    parseText = (event) => {\n        if (event.actions !== undefined) {\n            return event.action.value;\n        } else if (event.value) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let newMsg;\n        if (activity.from.id === this.bot.id) {\n            newMsg = {\n                text: activity.text,\n                author: this.bot,\n                typing: activity.type === \"typing\",\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: this.parseActions(activity.suggestedActions),\n                attachments: activity.attachment ? activity.attachment : []\n            };\n\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, newMsg] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.postActivity({\n            from: { id: this.user.id, name: this.user.name },\n            type: 'message',\n            text: value\n        }).subscribe(\n            id => console.log(\"Posted activity, assigned ID \", id),\n            error => console.log(\"Error posting activity\", error)\n        );\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n            });\n        }\n    };\n\n    render() {\n        return (\n            <Chat\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                placeholder={\"Type a message...\"}\n            />\n        );\n    }\n}\n\nexport default Bot;"]},"metadata":{},"sourceType":"module"}