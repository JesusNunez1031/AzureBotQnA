{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHorizontal = isHorizontal;\nexports.getAnchor = getAnchor;\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _Modal = _interopRequireDefault(require(\"../Modal\"));\n\nvar _Backdrop = _interopRequireDefault(require(\"../Backdrop\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _Slide = _interopRequireDefault(require(\"../Slide\"));\n\nvar _Paper = _interopRequireDefault(require(\"../Paper\"));\n\nvar _helpers = require(\"../utils/helpers\");\n\nvar _transitions = require(\"../styles/transitions\");\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {},\n\n    /* Styles applied to the root element if `variant=\"permanent or persistent\"`. */\n    docked: {\n      flex: '0 0 auto'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: {\n      overflowY: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      flex: '1 0 auto',\n      zIndex: theme.zIndex.drawer,\n      WebkitOverflowScrolling: 'touch',\n      // Add iOS momentum scrolling.\n      // temporary style\n      position: 'fixed',\n      top: 0,\n      // We disable the focus ring for mouse, touch and keyboard users.\n      // At some point, it would be better to keep it for keyboard users.\n      // :focus-ring CSS pseudo-class will help.\n      outline: 'none'\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"left\"`. */\n    paperAnchorLeft: {\n      left: 0,\n      right: 'auto'\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"right\"`. */\n    paperAnchorRight: {\n      left: 'auto',\n      right: 0\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"top\"`. */\n    paperAnchorTop: {\n      top: 0,\n      left: 0,\n      bottom: 'auto',\n      right: 0,\n      height: 'auto',\n      maxHeight: '100%'\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"bottom\"`. */\n    paperAnchorBottom: {\n      top: 'auto',\n      left: 0,\n      bottom: 0,\n      right: 0,\n      height: 'auto',\n      maxHeight: '100%'\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"left\"` & `variant` is not \"temporary\". */\n    paperAnchorDockedLeft: {\n      borderRight: \"1px solid \".concat(theme.palette.divider)\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"top\"` & `variant` is not \"temporary\". */\n    paperAnchorDockedTop: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"right\"` & `variant` is not \"temporary\". */\n    paperAnchorDockedRight: {\n      borderLeft: \"1px solid \".concat(theme.palette.divider)\n    },\n\n    /* Styles applied to the `Paper` component if `anchor=\"bottom\"` & `variant` is not \"temporary\". */\n    paperAnchorDockedBottom: {\n      borderTop: \"1px solid \".concat(theme.palette.divider)\n    },\n\n    /* Styles applied to the `Modal` component. */\n    modal: {}\n  };\n};\n\nexports.styles = styles;\nvar oppositeDirection = {\n  left: 'right',\n  right: 'left',\n  top: 'down',\n  bottom: 'up'\n};\n\nfunction isHorizontal(anchor) {\n  return ['left', 'right'].indexOf(anchor) !== -1;\n}\n\nfunction getAnchor(theme, anchor) {\n  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;\n}\n\nvar defaultTransitionDuration = {\n  enter: _transitions.duration.enteringScreen,\n  exit: _transitions.duration.leavingScreen\n};\n/**\n * The properties of the [Modal](/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n */\n\nvar Drawer = _react.default.forwardRef(function Drawer(props, ref) {\n  var _props$anchor = props.anchor,\n      anchorProp = _props$anchor === void 0 ? 'left' : _props$anchor,\n      BackdropProps = props.BackdropProps,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 16 : _props$elevation,\n      _props$ModalProps = props.ModalProps;\n  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;\n  var BackdropPropsProp = _props$ModalProps.BackdropProps,\n      ModalProps = (0, _objectWithoutProperties2.default)(_props$ModalProps, [\"BackdropProps\"]),\n      onClose = props.onClose,\n      _props$open = props.open,\n      open = _props$open === void 0 ? false : _props$open,\n      PaperProps = props.PaperProps,\n      SlideProps = props.SlideProps,\n      theme = props.theme,\n      _props$transitionDura = props.transitionDuration,\n      transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'temporary' : _props$variant,\n      other = (0, _objectWithoutProperties2.default)(props, [\"anchor\", \"BackdropProps\", \"children\", \"classes\", \"className\", \"elevation\", \"ModalProps\", \"onClose\", \"open\", \"PaperProps\", \"SlideProps\", \"theme\", \"transitionDuration\", \"variant\"]); // Let's assume that the Drawer will always be rendered on user space.\n  // We use this state is order to skip the appear transition during the\n  // initial mount of the component.\n\n  var mounted = _react.default.useRef(false);\n\n  _react.default.useEffect(function () {\n    mounted.current = true;\n  }, []);\n\n  var anchor = getAnchor(theme, anchorProp);\n\n  var drawer = _react.default.createElement(_Paper.default, (0, _extends2.default)({\n    elevation: variant === 'temporary' ? elevation : 0,\n    square: true,\n    className: (0, _clsx.default)(classes.paper, classes[\"paperAnchor\".concat((0, _helpers.capitalize)(anchor))], variant !== 'temporary' && classes[\"paperAnchorDocked\".concat((0, _helpers.capitalize)(anchor))])\n  }, PaperProps), children);\n\n  if (variant === 'permanent') {\n    return _react.default.createElement(\"div\", (0, _extends2.default)({\n      className: (0, _clsx.default)(classes.root, classes.docked, className),\n      ref: ref\n    }, other), drawer);\n  }\n\n  var slidingDrawer = _react.default.createElement(_Slide.default, (0, _extends2.default)({\n    in: open,\n    direction: oppositeDirection[anchor],\n    timeout: transitionDuration,\n    appear: mounted.current\n  }, SlideProps), drawer);\n\n  if (variant === 'persistent') {\n    return _react.default.createElement(\"div\", (0, _extends2.default)({\n      className: (0, _clsx.default)(classes.root, classes.docked, className)\n    }, other), slidingDrawer);\n  } // variant === temporary\n\n\n  return _react.default.createElement(_Modal.default, (0, _extends2.default)({\n    BackdropProps: (0, _extends2.default)({}, BackdropProps, BackdropPropsProp, {\n      transitionDuration: transitionDuration\n    }),\n    BackdropComponent: _Backdrop.default,\n    className: (0, _clsx.default)(classes.root, classes.modal, className),\n    open: open,\n    onClose: onClose,\n    ref: ref\n  }, other, ModalProps), slidingDrawer);\n});\n\nprocess.env.NODE_ENV !== \"production\" ? Drawer.propTypes = {\n  /**\n   * Side from which the drawer will appear.\n   */\n  anchor: _propTypes.default.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * @ignore\n   */\n  BackdropProps: _propTypes.default.object,\n\n  /**\n   * The contents of the drawer.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The elevation of the drawer.\n   */\n  elevation: _propTypes.default.number,\n\n  /**\n   * Properties applied to the [`Modal`](/api/modal/) element.\n   */\n  ModalProps: _propTypes.default.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: _propTypes.default.func,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: _propTypes.default.bool,\n\n  /**\n   * Properties applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: _propTypes.default.object,\n\n  /**\n   * Properties applied to the [`Slide`](/api/slide/) element.\n   */\n  SlideProps: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  })]),\n\n  /**\n   * The variant to use.\n   */\n  variant: _propTypes.default.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiDrawer',\n  flip: false,\n  withTheme: true\n})(Drawer);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}