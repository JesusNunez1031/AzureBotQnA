{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   Ant√≥nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.CharSetGroupProber = function () {\n    jschardet.CharSetProber.apply(this);\n    var self = this;\n\n    function init() {\n      self._mActiveNum = 0;\n      self._mProbers = [];\n      self._mBestGuessProber = null;\n    }\n\n    this.reset = function () {\n      jschardet.CharSetGroupProber.prototype.reset.apply(this);\n      this._mActiveNum = 0;\n\n      for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n        if (prober) {\n          prober.reset();\n          prober.active = true;\n          this._mActiveNum++;\n        }\n      }\n\n      this._mBestGuessProber = null;\n    };\n\n    this.getCharsetName = function () {\n      if (!this._mBestGuessProber) {\n        this.getConfidence();\n        if (!this._mBestGuessProber) return null;\n      }\n\n      return this._mBestGuessProber.getCharsetName();\n    };\n\n    this.feed = function (aBuf) {\n      for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n        if (!prober || !prober.active) continue;\n        var st = prober.feed(aBuf);\n        if (!st) continue;\n\n        if (st == jschardet.Constants.foundIt) {\n          this._mBestGuessProber = prober;\n          return this.getState();\n        } else if (st == jschardet.Constants.notMe) {\n          prober.active = false;\n          this._mActiveNum--;\n\n          if (this._mActiveNum <= 0) {\n            this._mState = jschardet.Constants.notMe;\n            return this.getState();\n          }\n        }\n      }\n\n      return this.getState();\n    };\n\n    this.getConfidence = function () {\n      var st = this.getState();\n\n      if (st == jschardet.Constants.foundIt) {\n        return 0.99;\n      } else if (st == jschardet.Constants.notMe) {\n        return 0.01;\n      }\n\n      var bestConf = 0.0;\n      this._mBestGuessProber = null;\n\n      for (var i = 0, prober; prober = this._mProbers[i]; i++) {\n        if (!prober) continue;\n\n        if (!prober.active) {\n          if (jschardet.Constants._debug) {\n            jschardet.log(prober.getCharsetName() + \" not active\\n\");\n          }\n\n          continue;\n        }\n\n        var cf = prober.getConfidence();\n\n        if (jschardet.Constants._debug) {\n          jschardet.log(prober.getCharsetName() + \" confidence = \" + cf + \"\\n\");\n        }\n\n        if (bestConf < cf) {\n          bestConf = cf;\n          this._mBestGuessProber = prober;\n        }\n      }\n\n      if (!this._mBestGuessProber) return 0.0;\n      return bestConf;\n    };\n\n    init();\n  };\n\n  jschardet.CharSetGroupProber.prototype = new jschardet.CharSetProber();\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}