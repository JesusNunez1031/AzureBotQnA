{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   Ant√≥nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.UTF8Prober = function () {\n    jschardet.CharSetProber.apply(this);\n    var ONE_CHAR_PROB = 0.5;\n    var self = this;\n\n    function init() {\n      self._mCodingSM = new jschardet.CodingStateMachine(jschardet.UTF8SMModel);\n      self.reset();\n    }\n\n    this.reset = function () {\n      jschardet.UTF8Prober.prototype.reset.apply(this);\n\n      this._mCodingSM.reset();\n\n      this._mNumOfMBChar = 0;\n    };\n\n    this.getCharsetName = function () {\n      return \"UTF-8\";\n    };\n\n    this.feed = function (aBuf) {\n      for (var i = 0, c; i < aBuf.length; i++) {\n        c = aBuf[i];\n\n        var codingState = this._mCodingSM.nextState(c);\n\n        if (codingState == jschardet.Constants.error) {\n          this._mState = jschardet.Constants.notMe;\n          break;\n        } else if (codingState == jschardet.Constants.itsMe) {\n          this._mState = jschardet.Constants.foundIt;\n          break;\n        } else if (codingState == jschardet.Constants.start) {\n          if (this._mCodingSM.getCurrentCharLen() >= 2) {\n            this._mNumOfMBChar++;\n          }\n        }\n      }\n\n      if (this.getState() == jschardet.Constants.detecting) {\n        if (this.getConfidence() > jschardet.Constants.SHORTCUT_THRESHOLD) {\n          this._mState = jschardet.Constants.foundIt;\n        }\n      }\n\n      return this.getState();\n    };\n\n    this.getConfidence = function () {\n      var unlike = 0.99;\n\n      if (this._mNumOfMBChar < 6) {\n        for (var i = 0; i < this._mNumOfMBChar; i++) {\n          unlike *= ONE_CHAR_PROB;\n        }\n\n        return 1 - unlike;\n      } else {\n        return unlike;\n      }\n    };\n\n    init();\n  };\n\n  jschardet.UTF8Prober.prototype = new jschardet.CharSetProber();\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}