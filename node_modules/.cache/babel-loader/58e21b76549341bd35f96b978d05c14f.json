{"ast":null,"code":"var _jsxFileName = \"/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js\";\nimport React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css'; //import * as AdaptiveCards from \"AdaptiveCards\";\n\nimport user_avatar from '../../Content/user_avatar.png';\n\nfunction AttachmentTemplate(props) {\n  let attachment = props.item;\n\n  if (attachment.contentType === 'Episode') {\n    return React.createElement(\"a\", {\n      href: \"Episode Name\",\n      target: \"_blank\",\n      draggable: false,\n      tabIndex: -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"TV\",\n      style: {\n        width: 150\n      },\n      src: \"https://www.wbtvd.com/titles/62143\",\n      draggable: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }));\n  } else if (attachment.contentType === 'text') {\n    return attachment.content;\n  } else {\n    return null;\n  }\n}\n\nclass Bot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onAction = event => {\n      if (event.action.type === 'alert') {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: event.action.value\n            }]\n          };\n        });\n      }\n    };\n\n    this.parseActions = actions => {\n      if (actions !== undefined) {\n        actions.actions.map(action => {\n          if (action.type === 'imBack') {\n            action.type = 'reply';\n          }\n        });\n        return actions.actions;\n      }\n\n      return [];\n    };\n\n    this.parseText = event => {\n      if (event.actions !== undefined) {\n        return event.action.value;\n      } else if (event.value) {\n        return event.value;\n      } else {\n        return event.message.text;\n      }\n    };\n\n    this.onResponse = activity => {\n      let newMsg;\n\n      if (activity.from.id === this.bot.id) {\n        newMsg = {\n          text: activity.text,\n          author: this.bot,\n          typing: activity.type === \"typing\",\n          timestamp: new Date(activity.timestamp),\n          suggestedActions: this.parseActions(activity.suggestedActions),\n          attachments: activity.attachment ? activity.attachment : []\n        };\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, newMsg]\n          };\n        });\n      }\n    };\n\n    this.addNewMessage = event => {\n      let value = this.parseText(event);\n      this.client.postActivity({\n        from: {\n          id: this.user.id,\n          name: this.user.name\n        },\n        type: 'message',\n        text: value\n      }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n\n      if (!event.value) {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: value,\n              timestamp: new Date()\n            }]\n          };\n        });\n      }\n    };\n\n    this.client = new DirectLine({\n      secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n    });\n    this.client.activity$.subscribe(activity => this.onResponse(activity));\n    this.user = {\n      id: 'User',\n      name: \"Jesus\",\n      avatarUrl: user_avatar\n    };\n    this.bot = {\n      id: 'friendanv-bot',\n      name: 'Friend Bot',\n      avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg'\n    };\n    this.attachments = [{\n      content: 'Name of TV Episode 1',\n      contentType: 'Episode'\n    }, {\n      content: 'Name of the TV Episode 2',\n      contentType: 'Episode'\n    }, {\n      content: 'Name of the TV Episode 3',\n      contentType: 'Episode'\n    }];\n    this.state = {\n      messages: [{\n        author: this.bot,\n        suggestedActions: [{\n          type: 'reply',\n          value: 'Hello!'\n        }, {\n          type: 'reply',\n          value: 'What can you do?'\n        }, {\n          title: 'Shop Friends',\n          value: 'https://www.wbshop.com/collections/friends',\n          type: 'openUrl'\n        }, {\n          title: 'Custom action',\n          value: '',\n          type: 'alert'\n        }],\n        timestamp: new Date(),\n        text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\"\n      }]\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  }\n\n  render() {\n    return React.createElement(Chat, {\n      messages: this.state.messages,\n      user: this.user,\n      onMessageSend: this.addNewMessage,\n      attachmentTemplate: AttachmentTemplate,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Bot;","map":{"version":3,"sources":["/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js"],"names":["React","Component","Chat","HeroCard","DirectLine","user_avatar","AttachmentTemplate","props","attachment","item","contentType","width","content","Bot","constructor","onAction","event","action","type","setState","prevState","messages","author","user","text","value","parseActions","actions","undefined","map","parseText","message","onResponse","activity","newMsg","from","id","bot","typing","timestamp","Date","suggestedActions","attachments","addNewMessage","client","postActivity","name","subscribe","console","log","error","secret","activity$","avatarUrl","state","title","bind","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,yCAA/B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAIC,UAAU,GAAGD,KAAK,CAACE,IAAvB;;AACA,MAAGD,UAAU,CAACE,WAAX,KAA2B,SAA9B,EAAyC;AACrC,WAAO;AAAG,MAAA,IAAI,EAAE,cAAT;AAAyB,MAAA,MAAM,EAAC,QAAhC;AAAyC,MAAA,SAAS,EAAE,KAApD;AAA2D,MAAA,QAAQ,EAAE,CAAC,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAK,MAAA,GAAG,EAAC,IAAT;AAAc,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAArB;AAAoC,MAAA,GAAG,EAAC,oCAAxC;AAA6E,MAAA,SAAS,EAAE,KAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,CAAP;AAGH,GAJD,MAIO,IAAIH,UAAU,CAACE,WAAX,KAA2B,MAA/B,EAAsC;AACzC,WAAOF,UAAU,CAACI,OAAlB;AACH,GAFM,MAEA;AACH,WAAO,IAAP;AACH;AACJ;;AAED,MAAMC,GAAN,SAAkBZ,SAAlB,CAA4B;AAExBa,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA2DnBQ,QA3DmB,GA2DPC,KAAD,IAAW;AAClB,UAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,OAA1B,EAAmC;AAC/B,aAAKC,QAAL,CAAeC,SAAD,IAAe;AACzB,iBAAO;AACHC,YAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwB;AAC9BC,cAAAA,MAAM,EACF,KAAKC,IAFqB;AAEfC,cAAAA,IAAI,EAAER,KAAK,CAACC,MAAN,CAAaQ;AAFJ,aAAxB;AADP,WAAP;AAMH,SAPD;AAQH;AACJ,KAtEkB;;AAAA,SAmGnBC,YAnGmB,GAmGHC,OAAD,IAAa;AACxB,UAAIA,OAAO,KAAKC,SAAhB,EAA2B;AACvBD,QAAAA,OAAO,CAACA,OAAR,CAAgBE,GAAhB,CAAoBZ,MAAM,IAAI;AAC1B,cAAIA,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC1BD,YAAAA,MAAM,CAACC,IAAP,GAAc,OAAd;AACH;AACJ,SAJD;AAKA,eAAOS,OAAO,CAACA,OAAf;AACH;;AACD,aAAO,EAAP;AACH,KA7GkB;;AAAA,SA+GnBG,SA/GmB,GA+GNd,KAAD,IAAW;AACnB,UAAIA,KAAK,CAACW,OAAN,KAAkBC,SAAtB,EAAiC;AAC7B,eAAOZ,KAAK,CAACC,MAAN,CAAaQ,KAApB;AACH,OAFD,MAEO,IAAIT,KAAK,CAACS,KAAV,EAAiB;AACpB,eAAOT,KAAK,CAACS,KAAb;AACH,OAFM,MAEA;AACH,eAAOT,KAAK,CAACe,OAAN,CAAcP,IAArB;AACH;AACJ,KAvHkB;;AAAA,SAyHnBQ,UAzHmB,GAyHLC,QAAD,IAAc;AACvB,UAAIC,MAAJ;;AACA,UAAID,QAAQ,CAACE,IAAT,CAAcC,EAAd,KAAqB,KAAKC,GAAL,CAASD,EAAlC,EAAsC;AAClCF,QAAAA,MAAM,GAAG;AACLV,UAAAA,IAAI,EAAES,QAAQ,CAACT,IADV;AAELF,UAAAA,MAAM,EAAE,KAAKe,GAFR;AAGLC,UAAAA,MAAM,EAAEL,QAAQ,CAACf,IAAT,KAAkB,QAHrB;AAILqB,UAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASP,QAAQ,CAACM,SAAlB,CAJN;AAKLE,UAAAA,gBAAgB,EAAE,KAAKf,YAAL,CAAkBO,QAAQ,CAACQ,gBAA3B,CALb;AAMLC,UAAAA,WAAW,EAAET,QAAQ,CAACzB,UAAT,GAAsByB,QAAQ,CAACzB,UAA/B,GAA4C;AANpD,SAAT;AASA,aAAKW,QAAL,CAAeC,SAAD,IAAe;AACzB,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwBa,MAAxB;AAAZ,WAAP;AACH,SAFD;AAGH;AACJ,KAzIkB;;AAAA,SA2InBS,aA3ImB,GA2IF3B,KAAD,IAAW;AACvB,UAAIS,KAAK,GAAG,KAAKK,SAAL,CAAed,KAAf,CAAZ;AACA,WAAK4B,MAAL,CAAYC,YAAZ,CAAyB;AACrBV,QAAAA,IAAI,EAAE;AAAEC,UAAAA,EAAE,EAAE,KAAKb,IAAL,CAAUa,EAAhB;AAAoBU,UAAAA,IAAI,EAAE,KAAKvB,IAAL,CAAUuB;AAApC,SADe;AAErB5B,QAAAA,IAAI,EAAE,SAFe;AAGrBM,QAAAA,IAAI,EAAEC;AAHe,OAAzB,EAIGsB,SAJH,CAKIX,EAAE,IAAIY,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6Cb,EAA7C,CALV,EAMIc,KAAK,IAAIF,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,KAAtC,CANb;;AAQA,UAAI,CAAClC,KAAK,CAACS,KAAX,EAAkB;AACd,aAAKN,QAAL,CAAeC,SAAD,IAAe;AACzB,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwB;AAAEC,cAAAA,MAAM,EAAE,KAAKC,IAAf;AAAqBC,cAAAA,IAAI,EAAEC,KAA3B;AAAkCc,cAAAA,SAAS,EAAE,IAAIC,IAAJ;AAA7C,aAAxB;AAAZ,WAAP;AACH,SAFD;AAGH;AACJ,KA1JkB;;AAEf,SAAKI,MAAL,GAAc,IAAIxC,UAAJ,CAAe;AACzB+C,MAAAA,MAAM,EAAE;AADiB,KAAf,CAAd;AAIA,SAAKP,MAAL,CAAYQ,SAAZ,CAAsBL,SAAtB,CACId,QAAQ,IAAI,KAAKD,UAAL,CAAgBC,QAAhB,CADhB;AAGA,SAAKV,IAAL,GAAY;AACRa,MAAAA,EAAE,EAAE,MADI;AAERU,MAAAA,IAAI,EAAE,OAFE;AAGRO,MAAAA,SAAS,EAAEhD;AAHH,KAAZ;AAMA,SAAKgC,GAAL,GAAW;AACPD,MAAAA,EAAE,EAAE,eADG;AAEPU,MAAAA,IAAI,EAAE,YAFC;AAGPO,MAAAA,SAAS,EAAE;AAHJ,KAAX;AAKA,SAAKX,WAAL,GAAmB,CAAC;AAChB9B,MAAAA,OAAO,EAAE,sBADO;AAEhBF,MAAAA,WAAW,EAAE;AAFG,KAAD,EAGhB;AACCE,MAAAA,OAAO,EAAE,0BADV;AAECF,MAAAA,WAAW,EAAE;AAFd,KAHgB,EAMhB;AACCE,MAAAA,OAAO,EAAE,0BADV;AAECF,MAAAA,WAAW,EAAE;AAFd,KANgB,CAAnB;AAUA,SAAK4C,KAAL,GAAa;AACTjC,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,MAAM,EAAE,KAAKe,GADjB;AAEII,QAAAA,gBAAgB,EAAE,CACd;AACIvB,UAAAA,IAAI,EAAE,OADV;AAEIO,UAAAA,KAAK,EAAE;AAFX,SADc,EAIX;AACCP,UAAAA,IAAI,EAAE,OADP;AAECO,UAAAA,KAAK,EAAE;AAFR,SAJW,EAOX;AACC8B,UAAAA,KAAK,EAAE,cADR;AAEC9B,UAAAA,KAAK,EAAE,4CAFR;AAGCP,UAAAA,IAAI,EAAE;AAHP,SAPW,EAWX;AACCqC,UAAAA,KAAK,EAAE,eADR;AAEC9B,UAAAA,KAAK,EAAE,EAFR;AAGCP,UAAAA,IAAI,EAAE;AAHP,SAXW,CAFtB;AAmBIqB,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAnBf;AAoBIhB,QAAAA,IAAI,EAAE,iBAAiB,KAAKD,IAAL,CAAUuB,IAA3B,GAAkC;AApB5C,OADM;AADD,KAAb;AA0BA,SAAKH,aAAL,GAAqB,KAAKA,aAAL,CAAmBa,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AAmGDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,IAAD;AACI,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWjC,QADzB;AAEI,MAAA,IAAI,EAAE,KAAKE,IAFf;AAGI,MAAA,aAAa,EAAE,KAAKoB,aAHxB;AAII,MAAA,kBAAkB,EAAErC,kBAJxB;AAKI,MAAA,WAAW,EAAE,mBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AASH;;AAxKuB;;AA2K5B,eAAeO,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css';\n//import * as AdaptiveCards from \"AdaptiveCards\";\nimport user_avatar from '../../Content/user_avatar.png';\n\nfunction AttachmentTemplate(props) {\n    let attachment = props.item;\n    if(attachment.contentType === 'Episode') {\n        return <a href={\"Episode Name\"} target=\"_blank\" draggable={false} tabIndex={-1}>\n            <img alt='TV' style={{width: 150 }} src='https://www.wbtvd.com/titles/62143' draggable={false}/>\n        </a>;\n    } else if (attachment.contentType === 'text'){\n        return attachment.content;\n    } else {\n        return null;\n    }\n}\n\nclass Bot extends Component {\n\n    constructor(props) {\n        super(props);\n        this.client = new DirectLine({\n            secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n\n        });\n        this.client.activity$.subscribe(\n            activity => this.onResponse(activity)\n        );\n        this.user = {\n            id: 'User',\n            name: \"Jesus\",\n            avatarUrl: user_avatar\n        };\n\n        this.bot = {\n            id: 'friendanv-bot',\n            name: 'Friend Bot',\n            avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg',\n        };\n        this.attachments = [{\n            content: 'Name of TV Episode 1',\n            contentType: 'Episode'\n        }, {\n            content: 'Name of the TV Episode 2',\n            contentType: 'Episode'\n        }, {\n            content: 'Name of the TV Episode 3',\n            contentType: 'Episode'\n        }];\n        this.state = {\n            messages: [\n                {\n                    author: this.bot,\n                    suggestedActions: [\n                        {\n                            type: 'reply',\n                            value: 'Hello!'\n                        }, {\n                            type: 'reply',\n                            value: 'What can you do?'\n                        }, {\n                            title: 'Shop Friends',\n                            value: 'https://www.wbshop.com/collections/friends',\n                            type: 'openUrl'\n                        }, {\n                            title: 'Custom action',\n                            value: '',\n                            type: 'alert'\n                        },\n                    ],\n                    timestamp: new Date(),\n                    text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\"\n                }\n            ]\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    onAction = (event) => {\n        if (event.action.type === 'alert') {\n            this.setState((prevState) => {\n                return {\n                    messages: [...prevState.messages, {\n                        author:\n                            this.user, text: event.action.value\n                    }]\n                };\n            });\n        }\n    }\n\n    //[[[[[[[[[[[[[[[[[[[This code is for when the bot triggers the event for the use of a adaptive card]]]]]]]]]]]]]]]]\n    // attachmentTemplate = (props) => {\n    //     let attachment = props.item;\n    //     if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n    //         return <HeroCard\n    //             title={attachment.content.title || attachment.content.text}\n    //             subtitle={attachment.content.subtitle}\n    //             imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n    //             imageMaxWidth=\"300px\"\n    //             actions={attachment.content.buttons}\n    //             onActionExecute={this.addNewMessage} />;\n    //     }\n    //     else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n    //         //let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    //         //adaptiveCard.parse(attachment.content);\n    //         //let renderedCard = adaptiveCard.render();\n    //         //let htmlToinsert = {__html: renderedCard.innerHTML};\n    //         //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n    //     } else {\n    //         return (\n    //             <div className=\"k-card\">\n    //                 {attachment.content}\n    //             </div>\n    //         );\n    //     }\n    // }\n\n    parseActions = (actions) => {\n        if (actions !== undefined) {\n            actions.actions.map(action => {\n                if (action.type === 'imBack') {\n                    action.type = 'reply';\n                }\n            });\n            return actions.actions;\n        }\n        return [];\n    }\n\n    parseText = (event) => {\n        if (event.actions !== undefined) {\n            return event.action.value;\n        } else if (event.value) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let newMsg;\n        if (activity.from.id === this.bot.id) {\n            newMsg = {\n                text: activity.text,\n                author: this.bot,\n                typing: activity.type === \"typing\",\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: this.parseActions(activity.suggestedActions),\n                attachments: activity.attachment ? activity.attachment : []\n            };\n\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, newMsg] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.postActivity({\n            from: { id: this.user.id, name: this.user.name },\n            type: 'message',\n            text: value\n        }).subscribe(\n            id => console.log(\"Posted activity, assigned ID \", id),\n            error => console.log(\"Error posting activity\", error)\n        );\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n            });\n        }\n    };\n\n    render() {\n        return (\n            <Chat\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                attachmentTemplate={AttachmentTemplate}\n                placeholder={\"Type a message...\"}\n            />\n        );\n    }\n}\n\nexport default Bot;"]},"metadata":{},"sourceType":"module"}