{"ast":null,"code":"var _jsxFileName = \"/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js\";\nimport React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css'; //import * as AdaptiveCards from \"AdaptiveCards\";\n\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.parseActions = actions => {\n      if (actions !== undefined) {\n        actions.actions.map(action => {\n          if (action.type === 'imBack') {\n            action.type = 'reply';\n          }\n        });\n        return actions.actions;\n      }\n\n      return [];\n    };\n\n    this.parseText = event => {\n      if (event.actions !== undefined) {\n        return event.action.value;\n      } else if (event.value) {\n        return event.value;\n      } else {\n        return event.message.text;\n      }\n    };\n\n    this.onResponse = activity => {\n      let newMsg;\n\n      if (activity.from.id === this.bot.id) {\n        newMsg = {\n          text: activity.text,\n          author: this.bot,\n          typing: activity.type === \"typing\",\n          timestamp: new Date(activity.timestamp),\n          suggestedActions: this.parseActions(activity.suggestedActions),\n          attachments: activity.attachment ? activity.attachment : []\n        };\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, newMsg]\n          };\n        });\n      }\n    };\n\n    this.addNewMessage = event => {\n      let value = this.parseText(event);\n      this.client.postActivity({\n        from: {\n          id: this.user.id,\n          name: this.user.name\n        },\n        type: 'message',\n        text: value\n      }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n\n      if (!event.value) {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: value,\n              timestamp: new Date()\n            }]\n          };\n        });\n      }\n    };\n\n    this.client = new DirectLine({\n      secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n    });\n    this.client.activity$.subscribe(activity => this.onResponse(activity));\n    this.user = {\n      id: 'User',\n      name: \"Jesus\",\n      avatarUrl: user_avatar\n    };\n    this.bot = {\n      id: 'friendanv-bot',\n      name: 'Friend Bot',\n      avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg'\n    };\n    this.state = {\n      messages: [{\n        author: this.bot,\n        suggestedActions: [{\n          type: 'reply',\n          value: 'Hello!'\n        }, {\n          type: 'reply',\n          value: 'What can you do?'\n        }],\n        timestamp: new Date(),\n        text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\"\n      }]\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  } //[[[[[[[[[[[[[[[[[[[This code is for when the bot triggers the event for the use of a adaptive card]]]]]]]]]]]]]]]]\n  // attachmentTemplate = (props) => {\n  //     let attachment = props.item;\n  //     if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n  //         return <HeroCard\n  //             title={attachment.content.title || attachment.content.text}\n  //             subtitle={attachment.content.subtitle}\n  //             imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n  //             imageMaxWidth=\"300px\"\n  //             actions={attachment.content.buttons}\n  //             onActionExecute={this.addNewMessage} />;\n  //     }\n  //     else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n  //         //let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n  //         //adaptiveCard.parse(attachment.content);\n  //         //let renderedCard = adaptiveCard.render();\n  //         //let htmlToinsert = {__html: renderedCard.innerHTML};\n  //         //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n  //     } else {\n  //         return (\n  //             <div className=\"k-card\">\n  //                 {attachment.content}\n  //             </div>\n  //         );\n  //     }\n  // }\n\n\n  render() {\n    return React.createElement(Chat, {\n      messages: this.state.messages,\n      user: this.user,\n      onMessageSend: this.addNewMessage,\n      attachmentTemplate: this.attachmentTemplate,\n      placeholder: \"Type a message...\",\n      width: 700,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Bot;","map":{"version":3,"sources":["/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js"],"names":["React","Component","Chat","HeroCard","DirectLine","user_avatar","Bot","constructor","props","parseActions","actions","undefined","map","action","type","parseText","event","value","message","text","onResponse","activity","newMsg","from","id","bot","author","typing","timestamp","Date","suggestedActions","attachments","attachment","setState","prevState","messages","addNewMessage","client","postActivity","user","name","subscribe","console","log","error","secret","activity$","avatarUrl","state","bind","render","attachmentTemplate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css';\n//import * as AdaptiveCards from \"AdaptiveCards\";\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n\n    constructor(props) {\n        super(props);\n        this.client = new DirectLine({\n            secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n\n        });\n        this.client.activity$.subscribe(\n            activity => this.onResponse(activity)\n        );\n        this.user = {\n            id: 'User',\n            name: \"Jesus\",\n            avatarUrl: user_avatar\n        };\n\n        this.bot = {\n            id: 'friendanv-bot',\n            name: 'Friend Bot',\n            avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg',\n        };\n        this.state = {\n            messages: [\n                {\n                    author: this.bot,\n                    suggestedActions: [\n                        {\n                            type: 'reply',\n                            value: 'Hello!'\n                        }, {\n                            type: 'reply',\n                            value: 'What can you do?'\n                        }\n                    ],\n                    timestamp: new Date(),\n                    text: \"Hello there \" + this.user.name + \", welcome to the Friends bot!\"\n                }\n            ]\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    //[[[[[[[[[[[[[[[[[[[This code is for when the bot triggers the event for the use of a adaptive card]]]]]]]]]]]]]]]]\n    // attachmentTemplate = (props) => {\n    //     let attachment = props.item;\n    //     if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n    //         return <HeroCard\n    //             title={attachment.content.title || attachment.content.text}\n    //             subtitle={attachment.content.subtitle}\n    //             imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n    //             imageMaxWidth=\"300px\"\n    //             actions={attachment.content.buttons}\n    //             onActionExecute={this.addNewMessage} />;\n    //     }\n    //     else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n    //         //let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n    //         //adaptiveCard.parse(attachment.content);\n    //         //let renderedCard = adaptiveCard.render();\n    //         //let htmlToinsert = {__html: renderedCard.innerHTML};\n    //         //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n    //     } else {\n    //         return (\n    //             <div className=\"k-card\">\n    //                 {attachment.content}\n    //             </div>\n    //         );\n    //     }\n    // }\n\n    parseActions = (actions) => {\n        if (actions !== undefined) {\n            actions.actions.map(action => {\n                if (action.type === 'imBack') {\n                    action.type = 'reply';\n                }\n            });\n            return actions.actions;\n        }\n        return [];\n    }\n\n    parseText = (event) => {\n        if (event.actions !== undefined) {\n            return event.action.value;\n        } else if (event.value) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let newMsg;\n        if (activity.from.id === this.bot.id) {\n            newMsg = {\n                text: activity.text,\n                author: this.bot,\n                typing: activity.type === \"typing\",\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: this.parseActions(activity.suggestedActions),\n                attachments: activity.attachment ? activity.attachment : []\n            };\n\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, newMsg] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.postActivity({\n            from: { id: this.user.id, name: this.user.name },\n            type: 'message',\n            text: value\n        }).subscribe(\n            id => console.log(\"Posted activity, assigned ID \", id),\n            error => console.log(\"Error posting activity\", error)\n        );\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n            });\n        }\n    };\n\n    render() {\n        return (\n            <Chat\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                attachmentTemplate={this.attachmentTemplate}\n                placeholder={\"Type a message...\"}\n                width={700}\n            />\n        );\n    }\n}\n\nexport default Bot;"]},"metadata":{},"sourceType":"module"}