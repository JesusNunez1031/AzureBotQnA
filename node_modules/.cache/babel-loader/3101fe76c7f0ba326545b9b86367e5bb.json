{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   Ant√≥nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.CodingStateMachine = function (sm) {\n    var self = this;\n\n    function init(sm) {\n      self._mModel = sm;\n      self._mCurrentBytePos = 0;\n      self._mCurrentCharLen = 0;\n      self.reset();\n    }\n\n    this.reset = function () {\n      this._mCurrentState = jschardet.Constants.start;\n    };\n\n    this.nextState = function (c) {\n      // for each byte we get its class\n      // if it is first byte, we also get byte length\n      var byteCls = this._mModel.classTable[c.charCodeAt(0)];\n\n      if (this._mCurrentState == jschardet.Constants.start) {\n        this._mCurrentBytePos = 0;\n        this._mCurrentCharLen = this._mModel.charLenTable[byteCls];\n      } // from byte's class and stateTable, we get its next state\n\n\n      this._mCurrentState = this._mModel.stateTable[this._mCurrentState * this._mModel.classFactor + byteCls];\n      this._mCurrentBytePos++;\n      return this._mCurrentState;\n    };\n\n    this.getCurrentCharLen = function () {\n      return this._mCurrentCharLen;\n    };\n\n    this.getCodingStateMachine = function () {\n      return this._mModel.name;\n    };\n\n    init(sm);\n  };\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}