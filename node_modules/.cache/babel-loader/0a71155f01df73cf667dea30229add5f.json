{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   Ant√≥nio Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.MultiByteCharSetProber = function () {\n    jschardet.CharSetProber.apply(this);\n    var self = this;\n\n    function init() {\n      self._mDistributionAnalyzer = null;\n      self._mCodingSM = null; //self._mLastChar = [\"\\x00\", \"\\x00\"];\n\n      self._mLastChar = \"\\x00\\x00\";\n    }\n\n    this.reset = function () {\n      jschardet.MultiByteCharSetProber.prototype.reset.apply(this);\n\n      if (this._mCodingSM) {\n        this._mCodingSM.reset();\n      }\n\n      if (this._mDistributionAnalyzer) {\n        this._mDistributionAnalyzer.reset();\n      } //this._mLastChar = [\"\\x00\", \"\\x00\"];\n\n\n      this._mLastChar = \"\\x00\\x00\";\n    };\n\n    this.getCharsetName = function () {};\n\n    this.feed = function (aBuf) {\n      var aLen = aBuf.length;\n\n      for (var i = 0; i < aLen; i++) {\n        var codingState = this._mCodingSM.nextState(aBuf[i]);\n\n        if (codingState == jschardet.Constants.error) {\n          if (jschardet.Constants._debug) {\n            jschardet.log(this.getCharsetName() + \" prober hit error at byte \" + i + \"\\n\");\n          }\n\n          this._mState = jschardet.Constants.notMe;\n          break;\n        } else if (codingState == jschardet.Constants.itsMe) {\n          this._mState = jschardet.Constants.foundIt;\n          break;\n        } else if (codingState == jschardet.Constants.start) {\n          var charLen = this._mCodingSM.getCurrentCharLen();\n\n          if (i == 0) {\n            this._mLastChar[1] = aBuf[0];\n\n            this._mDistributionAnalyzer.feed(this._mLastChar, charLen);\n          } else {\n            this._mDistributionAnalyzer.feed(aBuf.slice(i - 1, i + 1), charLen);\n          }\n        }\n      }\n\n      this._mLastChar[0] = aBuf[aLen - 1];\n\n      if (this.getState() == jschardet.Constants.detecting) {\n        if (this._mDistributionAnalyzer.gotEnoughData() && this.getConfidence() > jschardet.Constants.SHORTCUT_THRESHOLD) {\n          this._mState = jschardet.Constants.foundIt;\n        }\n      }\n\n      return this.getState();\n    };\n\n    this.getConfidence = function () {\n      return this._mDistributionAnalyzer.getConfidence();\n    };\n  };\n\n  jschardet.MultiByteCharSetProber.prototype = new jschardet.CharSetProber();\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}