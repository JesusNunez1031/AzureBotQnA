{"ast":null,"code":"var _jsxFileName = \"/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js\";\nimport { React, Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport * as AdaptiveCards from \"AdaptiveCards\";\n\nclass Bot extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.attachmentTemplate = props => {\n      let attachment = props.item;\n\n      if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n        return React.createElement(HeroCard, {\n          title: attachment.content.title || attachment.content.text,\n          subtitle: attachment.content.subtitle,\n          imageUrl: attachment.content.images ? attachment.content.images[0].url : \"\",\n          imageMaxWidth: \"250px\",\n          actions: attachment.content.buttons,\n          onActionExecute: this.addNewMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      } else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n        let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n        adaptiveCard.parse(attachment.content);\n        let renderedCard = adaptiveCard.render();\n        let htmlToinsert = {\n          __html: renderedCard.innerHTML\n        };\n        return React.createElement(\"div\", {\n          dangerouslySetInnerHTML: htmlToinsert,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          className: \"k-card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, attachment.content);\n      }\n    };\n\n    this.parseActions = actions => {\n      if (actions != undefined) {\n        actions.actions.map(actions => {\n          if (actions.type === 'imBack') {\n            actions.type = 'reply';\n          }\n        });\n        return actions.actions;\n      }\n\n      return [];\n    };\n\n    this.parseText = event => {\n      if (event.actions !== undefined) {\n        return event.action.value;\n      } else if (event.value) {\n        return event.value;\n      } else {\n        return event.message.text;\n      }\n    };\n\n    this.onResponse = activity => {\n      let newMsg;\n\n      if (activity.from.id === this.bot.id) {\n        newMsg = {\n          text: activity.text,\n          author: this.bot,\n          typing: activity.type === \"typing\",\n          timestamp: new Date(activity.timestamp),\n          suggestedActions: this.parseActions(activity.suggestedActions),\n          attachments: activity.attachment ? activity.attachment : []\n        };\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, newMsg]\n          };\n        });\n      }\n    };\n\n    this.addNewMessage = event => {\n      let value = this.parseText(event);\n      this.client.postActivity({\n        from: {\n          id: this.user.id,\n          name: this.user.name\n        },\n        type: 'message',\n        text: value\n      }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n\n      if (!event.value) {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: value,\n              timestamp: new Date()\n            }]\n          };\n        });\n      }\n    };\n\n    this.state = {\n      messages: []\n    };\n    this.client = new DirectLine({\n      secret: \"FTpSAvKwL8g.6OIwcwUFuGyTlap_zM8Q1LievucB4hxY5rqZA4FdxXg\"\n    });\n    this.client.activity$.subscribe(activity => this.onResponse(activity));\n    this.user = {\n      id: 'User'\n    };\n    this.bot = {\n      id: 'friendanv',\n      name: 'Friend Bot',\n      avatarUrl: 'https://demos.telerik.com/kendo-ui/content/chat/VacationBot.png'\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  }\n\n  render() {\n    return React.createElement(Chat, {\n      messages: this.state.messages,\n      user: this.user,\n      onMessageSend: this.addNewMessage,\n      attachmentTemplate: this.attachmentTemplate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Bot;","map":{"version":3,"sources":["/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js"],"names":["React","Component","Chat","HeroCard","DirectLine","AdaptiveCards","Bot","constructor","props","attachmentTemplate","attachment","item","contentType","content","title","text","subtitle","images","url","buttons","addNewMessage","adaptiveCard","AdaptiveCard","parse","renderedCard","render","htmlToinsert","__html","innerHTML","parseActions","actions","undefined","map","type","parseText","event","action","value","message","onResponse","activity","newMsg","from","id","bot","author","typing","timestamp","Date","suggestedActions","attachments","setState","prevState","messages","client","postActivity","user","name","subscribe","console","log","error","state","secret","activity$","avatarUrl","bind"],"mappings":"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","sourcesContent":["import {React, Component} from  'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport * as AdaptiveCards from \"AdaptiveCards\";\n\nclass Bot extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {messages: [] };\n        this.client = new DirectLine({\n            secret: \"FTpSAvKwL8g.6OIwcwUFuGyTlap_zM8Q1LievucB4hxY5rqZA4FdxXg\"\n        });\n        this.client.activity$.subscribe(\n            activity => this.onResponse(activity)\n        );\n        this.user = {\n            id: 'User'\n        };\n\n        this.bot = {\n            id: 'friendanv',\n            name: 'Friend Bot',\n            avatarUrl: 'https://demos.telerik.com/kendo-ui/content/chat/VacationBot.png'\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    attachmentTemplate = (props) => {\n        let attachment = props.item;\n        if(attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n            return <HeroCard\n                title={attachment.content.title || attachment.content.text}\n                subtitle ={attachment.content.subtitle}\n                imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n                imageMaxWidth=\"250px\"\n                actions={attachment.content.buttons}\n                onActionExecute={this.addNewMessage}/>;\n        }\n        else if(attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n            let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n            adaptiveCard.parse(attachment.content);\n            let renderedCard = adaptiveCard.render();\n            let htmlToinsert = {__html: renderedCard.innerHTML};\n            return <div dangerouslySetInnerHTML={htmlToinsert} />;\n        } else {\n            return (\n                <div className=\"k-card\">\n                    {attachment.content}\n                    </div>\n            );\n        }\n    }\n\n    parseActions = (actions) => {\n        if(actions != undefined) {\n            actions.actions.map(actions => {\n                if(actions.type === 'imBack') {\n                    actions.type = 'reply';\n                }\n            });\n            return actions.actions;\n        }\n        return [];\n    }\n\n    parseText = (event) => {\n        if(event.actions !== undefined){\n            return event.action.value;\n        } else if (event.value) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let newMsg;\n        if (activity.from.id === this.bot.id) {\n            newMsg = {\n                text: activity.text,\n                author: this.bot,\n                typing: activity.type === \"typing\",\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: this.parseActions(activity.suggestedActions),\n                attachments: activity.attachment ? activity.attachment : []\n            };\n\n            this.setState((prevState) => {\n                return {messages: [...prevState.messages, newMsg] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.postActivity({\n            from: { id: this.user.id, name: this.user.name },\n            type: 'message',\n            text: value\n        }).subscribe(\n            id => console.log(\"Posted activity, assigned ID \", id),\n            error => console.log(\"Error posting activity\", error)\n        );\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n            });\n        }\n    };\n\n    render() {\n        return (\n            <Chat\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                attachmentTemplate={this.attachmentTemplate}\n            />    \n        );\n    }\n}\n\nexport default Bot;"]},"metadata":{},"sourceType":"module"}