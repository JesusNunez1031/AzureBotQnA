{"ast":null,"code":"var _jsxFileName = \"/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js\";\nimport React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css'; //import * as AdaptiveCards from \"AdaptiveCards\";\n\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n  constructor(_props) {\n    super(_props); // this.state = {\n    //     messages: [\n    //         {\n    //             author: this.bot,\n    //             suggestedActions: [\n    //                 {\n    //                     type: 'reply',\n    //                     value: 'Hello!'\n    //                 }, {\n    //                     type: 'reply',\n    //                     value: 'What can you do?'\n    //                 }\n    //             ],\n    //             timestamp: new Date(),\n    //             text: \"Hello there \" + user + \", welcome to the Friends bot!\"\n    //         }\n    //     ]\n    // };\n\n    this.attachmentTemplate = props => {\n      let attachment = props.item;\n\n      if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n        return React.createElement(HeroCard, {\n          title: attachment.content.title || attachment.content.text,\n          subtitle: attachment.content.subtitle,\n          imageUrl: attachment.content.images ? attachment.content.images[0].url : \"\",\n          imageMaxWidth: \"300px\",\n          actions: attachment.content.buttons,\n          onActionExecute: this.addNewMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      } else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {//let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n        //adaptiveCard.parse(attachment.content);\n        //let renderedCard = adaptiveCard.render();\n        //let htmlToinsert = {__html: renderedCard.innerHTML};\n        //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n      } else {\n        return React.createElement(\"div\", {\n          className: \"k-card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, attachment.content);\n      }\n    };\n\n    this.parseActions = actions => {\n      if (actions !== undefined) {\n        actions.actions.map(action => {\n          if (action.type === 'imBack') {\n            action.type = 'reply';\n          }\n        });\n        return actions.actions;\n      }\n\n      return [];\n    };\n\n    this.parseText = event => {\n      if (event.actions !== undefined) {\n        return event.action.value;\n      } else if (event.value) {\n        return event.value;\n      } else {\n        return event.message.text;\n      }\n    };\n\n    this.onResponse = activity => {\n      let newMsg;\n\n      if (activity.from.id === this.bot.id) {\n        newMsg = {\n          text: activity.text,\n          author: this.bot,\n          typing: activity.type === \"typing\",\n          timestamp: new Date(activity.timestamp),\n          suggestedActions: this.parseActions(activity.suggestedActions),\n          attachments: activity.attachment ? activity.attachment : []\n        };\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, newMsg]\n          };\n        });\n      }\n    };\n\n    this.addNewMessage = event => {\n      let value = this.parseText(event);\n      this.client.postActivity({\n        from: {\n          id: this.user.id,\n          name: this.user.name\n        },\n        type: 'message',\n        text: value\n      }).subscribe(id => console.log(\"Posted activity, assigned ID \", id), error => console.log(\"Error posting activity\", error));\n\n      if (!event.value) {\n        this.setState(prevState => {\n          return {\n            messages: [...prevState.messages, {\n              author: this.user,\n              text: value,\n              timestamp: new Date()\n            }]\n          };\n        });\n      }\n    };\n\n    this.client = new DirectLine({\n      secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n    });\n    this.client.activity$.subscribe(activity => this.onResponse(activity));\n    this.user = {\n      id: 'User',\n      name: \"Jesus\",\n      avatarUrl: user_avatar\n    };\n    this.bot = {\n      id: 'friendanv-bot',\n      name: 'Friend Bot',\n      avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg'\n    };\n    this.state = {\n      messages: [{\n        author: this.bot,\n        suggestedActions: [{\n          type: 'reply',\n          value: 'Hello!'\n        }, {\n          type: 'reply',\n          value: 'What can you do?'\n        }],\n        timestamp: new Date(),\n        text: \"Hello there \" + this.user + \", welcome to the Friends bot!\"\n      }]\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  }\n\n  render() {\n    return React.createElement(Chat, {\n      messages: this.state.messages,\n      user: this.user,\n      onMessageSend: this.addNewMessage,\n      attachmentTemplate: this.attachmentTemplate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Bot;","map":{"version":3,"sources":["/Users/jnunez/Desktop/my-app/src/components/Bot/Bot.js"],"names":["React","Component","Chat","HeroCard","DirectLine","user_avatar","Bot","constructor","props","attachmentTemplate","attachment","item","contentType","content","title","text","subtitle","images","url","buttons","addNewMessage","parseActions","actions","undefined","map","action","type","parseText","event","value","message","onResponse","activity","newMsg","from","id","bot","author","typing","timestamp","Date","suggestedActions","attachments","setState","prevState","messages","client","postActivity","user","name","subscribe","console","log","error","secret","activity$","avatarUrl","state","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { DirectLine } from 'botframework-directlinejs';\nimport './Bot.css';\n//import * as AdaptiveCards from \"AdaptiveCards\";\nimport user_avatar from '../../Content/user_avatar.png';\n\nclass Bot extends Component {\n\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     messages: [\n        //         {\n        //             author: this.bot,\n        //             suggestedActions: [\n        //                 {\n        //                     type: 'reply',\n        //                     value: 'Hello!'\n        //                 }, {\n        //                     type: 'reply',\n        //                     value: 'What can you do?'\n        //                 }\n        //             ],\n        //             timestamp: new Date(),\n        //             text: \"Hello there \" + user + \", welcome to the Friends bot!\"\n        //         }\n        //     ]\n        // };\n        this.client = new DirectLine({\n            secret: \"L1SOy_0QAkE.wi9TzvfOJezpFp_sax7wF5tcESCKbI-w1SgoP2LwU5I\"\n\n        });\n        this.client.activity$.subscribe(\n            activity => this.onResponse(activity)\n        );\n        this.user = {\n            id: 'User',\n            name: \"Jesus\",\n            avatarUrl: user_avatar\n        };\n\n        this.bot = {\n            id: 'friendanv-bot',\n            name: 'Friend Bot',\n            avatarUrl: 'https://pbs.twimg.com/profile_images/1853664095/image.jpg',\n        };\n        this.state = {\n            messages: [\n                {\n                    author: this.bot,\n                    suggestedActions: [\n                        {\n                            type: 'reply',\n                            value: 'Hello!'\n                        }, {\n                            type: 'reply',\n                            value: 'What can you do?'\n                        }\n                    ],\n                    timestamp: new Date(),\n                    text: \"Hello there \" + this.user + \", welcome to the Friends bot!\"\n                }\n            ]\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    attachmentTemplate = (props) => {\n        let attachment = props.item;\n        if (attachment.contentType === \"application/vnd.microsoft.card.hero\") {\n            return <HeroCard\n                title={attachment.content.title || attachment.content.text}\n                subtitle={attachment.content.subtitle}\n                imageUrl={attachment.content.images ? attachment.content.images[0].url : \"\"}\n                imageMaxWidth=\"300px\"\n                actions={attachment.content.buttons}\n                onActionExecute={this.addNewMessage} />;\n        }\n        else if (attachment.contentType === \"application/vnd.microsoft.card.adaptive\") {\n            //let adaptiveCard = new AdaptiveCards.AdaptiveCard();\n            //adaptiveCard.parse(attachment.content);\n            //let renderedCard = adaptiveCard.render();\n            //let htmlToinsert = {__html: renderedCard.innerHTML};\n            //return <div dangerouslySetInnerHTML={htmlToinsert} />;\n        } else {\n            return (\n                <div className=\"k-card\">\n                    {attachment.content}\n                </div>\n            );\n        }\n    }\n\n    parseActions = (actions) => {\n        if (actions !== undefined) {\n            actions.actions.map(action => {\n                if (action.type === 'imBack') {\n                    action.type = 'reply';\n                }\n            });\n            return actions.actions;\n        }\n        return [];\n    }\n\n    parseText = (event) => {\n        if (event.actions !== undefined) {\n            return event.action.value;\n        } else if (event.value) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let newMsg;\n        if (activity.from.id === this.bot.id) {\n            newMsg = {\n                text: activity.text,\n                author: this.bot,\n                typing: activity.type === \"typing\",\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: this.parseActions(activity.suggestedActions),\n                attachments: activity.attachment ? activity.attachment : []\n            };\n\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, newMsg] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.postActivity({\n            from: { id: this.user.id, name: this.user.name },\n            type: 'message',\n            text: value\n        }).subscribe(\n            id => console.log(\"Posted activity, assigned ID \", id),\n            error => console.log(\"Error posting activity\", error)\n        );\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n            });\n        }\n    };\n\n    render() {\n        return (\n            <Chat\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                attachmentTemplate={this.attachmentTemplate}\n            />\n        );\n    }\n}\n\nexport default Bot;"]},"metadata":{},"sourceType":"module"}