{"ast":null,"code":"/*\n * The Original Code is Mozilla Universal charset detector code.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 2001\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   António Afonso (antonio.afonso gmail.com) - port to JavaScript\n *   Mark Pilgrim - port to Python\n *   Shy Shalom - original C code\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301  USA\n */\n!function (jschardet) {\n  jschardet.CharSetProber = function () {\n    this.reset = function () {\n      this._mState = jschardet.Constants.detecting;\n    };\n\n    this.getCharsetName = function () {\n      return null;\n    };\n\n    this.feed = function (aBuf) {};\n\n    this.getState = function () {\n      return this._mState;\n    };\n\n    this.getConfidence = function () {\n      return 0.0;\n    };\n\n    this.filterHighBitOnly = function (aBuf) {\n      aBuf = aBuf.replace(/[\\x00-\\x7F]+/g, \" \");\n      return aBuf;\n    };\n\n    this.filterWithoutEnglishLetters = function (aBuf) {\n      aBuf = aBuf.replace(/[A-Za-z]+/g, \" \");\n      return aBuf;\n    }; // Input: aBuf is a string containing all different types of characters\n    // Output: a string that contains all alphabetic letters, high-byte characters, and word immediately preceding `>`, but nothing else within `<>`\n    // Ex: input - '¡£º <div blah blah> abcdef</div> apples! * and oranges 9jd93jd>'\n    //     output - '¡£º blah div apples and oranges jd jd '\n\n\n    this.filterWithEnglishLetters = function (aBuf) {\n      var result = '';\n      var inTag = false;\n      var prev = 0;\n\n      for (var curr = 0; curr < aBuf.length; curr++) {\n        var c = aBuf[curr];\n\n        if (c == '>') {\n          inTag = false;\n        } else if (c == '<') {\n          inTag = true;\n        }\n\n        var isAlpha = /[a-zA-Z]/.test(c);\n        var isASCII = /^[\\x00-\\x7F]*$/.test(c);\n\n        if (isASCII && !isAlpha) {\n          if (curr > prev && !inTag) {\n            result = result + aBuf.substring(prev, curr) + ' ';\n          }\n\n          prev = curr + 1;\n        }\n      }\n\n      if (!inTag) {\n        result = result + aBuf.substring(prev);\n      }\n\n      return result;\n    };\n  };\n}(require('./init'));","map":null,"metadata":{},"sourceType":"script"}