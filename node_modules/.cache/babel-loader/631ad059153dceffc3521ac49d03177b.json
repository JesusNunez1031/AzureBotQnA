{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { Keys } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar SelectableItemsContainer =\n/** @class */\nfunction (_super) {\n  __extends(SelectableItemsContainer, _super);\n\n  function SelectableItemsContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      selectedItemIndex: null\n    };\n\n    _this.onRequestContainerSelection = function () {\n      return _this.props.onRequestSelection(_this.props.group.selectionIndex);\n    };\n\n    _this.onKeyDown = function (event) {\n      var newSelectedItemIndex = null;\n      var decrementKeyCode;\n      var incrementKeyCode;\n\n      if (_this.isKeyboardNavigationLeftRight) {\n        decrementKeyCode = Keys.left;\n        incrementKeyCode = Keys.right;\n      } else {\n        decrementKeyCode = Keys.up;\n        incrementKeyCode = Keys.down;\n      }\n\n      if (event.keyCode === decrementKeyCode) {\n        newSelectedItemIndex = _this.navigate(false);\n      } else if (event.keyCode === incrementKeyCode) {\n        newSelectedItemIndex = _this.navigate(true);\n      }\n\n      if (newSelectedItemIndex !== null) {\n        // Prevent the default behaviour of moving of the scrollbar\n        // because scrolling is achieved through item focusing.\n        event.preventDefault(); // Stop propagation to remove the collision with the up/down\n        // keyboard navigation of the message list.\n\n        event.stopPropagation();\n      }\n    };\n\n    return _this;\n  }\n\n  SelectableItemsContainer.getDerivedStateFromProps = function (props, state) {\n    if (!props.selected && state.selectedItemIndex !== null) {\n      // Moving away from a selected group.\n      return {\n        selectedItemIndex: null\n      };\n    } else if (props.selected && state.selectedItemIndex === null) {\n      // Entering a group w/o directly choosing (e.g. clicking) a subitem.\n      return {\n        selectedItemIndex: 0\n      };\n    }\n\n    return null;\n  };\n\n  SelectableItemsContainer.prototype.navigate = function (incrementSelection, newSelectedItemIndexUponFirstIncrement) {\n    if (newSelectedItemIndexUponFirstIncrement === void 0) {\n      newSelectedItemIndexUponFirstIncrement = 0;\n    }\n\n    var result = null;\n    var currentlySelectedItemIndex = this.state.selectedItemIndex;\n\n    if (incrementSelection) {\n      if (currentlySelectedItemIndex === null) {\n        result = newSelectedItemIndexUponFirstIncrement;\n      } else if (currentlySelectedItemIndex < this.getLastSelectionIndex()) {\n        result = currentlySelectedItemIndex + 1;\n      }\n    } else {\n      if (currentlySelectedItemIndex === null) {\n        result = 0;\n      } else if (currentlySelectedItemIndex > 0) {\n        result = currentlySelectedItemIndex - 1;\n      }\n    }\n\n    if (result !== null) {\n      this.setState({\n        selectedItemIndex: result\n      });\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(SelectableItemsContainer.prototype, \"isKeyboardNavigationLeftRight\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SelectableItemsContainer.prototype.getLastSelectionIndex = function () {\n    var result = -1;\n\n    if (this.props.group.type === 'action-group') {\n      var actionGroup = this.props.group;\n      result = actionGroup.actions ? actionGroup.actions.length - 1 : -1;\n    } else if (this.props.group.type === 'attachment-group') {\n      var attachmentGroup = this.props.group;\n      result = attachmentGroup.attachments ? attachmentGroup.attachments.length - 1 : -1;\n    }\n\n    return result;\n  };\n\n  return SelectableItemsContainer;\n}(React.Component);\n\nexport { SelectableItemsContainer };","map":null,"metadata":{},"sourceType":"module"}