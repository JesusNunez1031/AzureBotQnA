{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-config\n */\n\n/**\n * Copyright(c) Microsoft Corporation.All rights reserved.\n * Licensed under the MIT License.\n */\n\nconst url_1 = require(\"url\");\n\nconst schema_1 = require(\"../schema\");\n\nconst connectedService_1 = require(\"./connectedService\");\n/**\n * Defines a QnA Maker service connection.\n */\n\n\nclass QnaMakerService extends connectedService_1.ConnectedService {\n  /**\n   * Creates a new QnaMakerService instance.\n   * @param source (Optional) JSON based service definition.\n   */\n  constructor(source = {}) {\n    super(source, schema_1.ServiceTypes.QnA);\n\n    if (!source.hostname) {\n      throw TypeError('QnAMakerService requires source parameter to have a hostname.');\n    }\n\n    if (!this.hostname.endsWith('/qnamaker')) {\n      this.hostname = new url_1.URL('/qnamaker', this.hostname).href;\n    }\n  } // encrypt keys in service\n\n\n  encrypt(secret, encryptString) {\n    if (this.endpointKey && this.endpointKey.length > 0) {\n      this.endpointKey = encryptString(this.endpointKey, secret);\n    }\n\n    if (this.subscriptionKey && this.subscriptionKey.length > 0) {\n      this.subscriptionKey = encryptString(this.subscriptionKey, secret);\n    }\n  } // decrypt keys in service\n\n\n  decrypt(secret, decryptString) {\n    if (this.endpointKey && this.endpointKey.length > 0) {\n      this.endpointKey = decryptString(this.endpointKey, secret);\n    }\n\n    if (this.subscriptionKey && this.subscriptionKey.length > 0) {\n      this.subscriptionKey = decryptString(this.subscriptionKey, secret);\n    }\n  }\n\n}\n\nexports.QnaMakerService = QnaMakerService;","map":null,"metadata":{},"sourceType":"script"}