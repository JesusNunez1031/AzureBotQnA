{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nvar Enums = require(\"./enums\");\n\nexports.ContentTypes = {\n  applicationJson: \"application/json\",\n  applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n};\n\nvar StringWithSubstitutions =\n/** @class */\nfunction () {\n  function StringWithSubstitutions() {\n    this._isProcessed = false;\n    this._original = null;\n    this._processed = null;\n  }\n\n  StringWithSubstitutions.prototype.getReferencedInputs = function (inputs, referencedInputs) {\n    if (!referencedInputs) {\n      throw new Error(\"The referencedInputs parameter cannot be null.\");\n    }\n\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n      var input = inputs_1[_i];\n      var matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(this._original);\n\n      if (matches != null) {\n        referencedInputs[input.id] = input;\n      }\n    }\n  };\n\n  StringWithSubstitutions.prototype.substituteInputValues = function (inputs, contentType) {\n    this._processed = this._original;\n    var regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n    var matches;\n\n    while ((matches = regEx.exec(this._original)) != null) {\n      var matchedInput = null;\n\n      for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (key.toLowerCase() == matches[1].toLowerCase()) {\n          matchedInput = inputs[key];\n          break;\n        }\n      }\n\n      if (matchedInput) {\n        var valueForReplace = \"\";\n\n        if (matchedInput.value) {\n          valueForReplace = matchedInput.value;\n        }\n\n        if (contentType === exports.ContentTypes.applicationJson) {\n          valueForReplace = JSON.stringify(valueForReplace);\n          valueForReplace = valueForReplace.slice(1, -1);\n        } else if (contentType === exports.ContentTypes.applicationXWwwFormUrlencoded) {\n          valueForReplace = encodeURIComponent(valueForReplace);\n        }\n\n        this._processed = this._processed.replace(matches[0], valueForReplace);\n      }\n    }\n\n    ;\n    this._isProcessed = true;\n  };\n\n  StringWithSubstitutions.prototype.getOriginal = function () {\n    return this._original;\n  };\n\n  StringWithSubstitutions.prototype.get = function () {\n    if (!this._isProcessed) {\n      return this._original;\n    } else {\n      return this._processed;\n    }\n  };\n\n  StringWithSubstitutions.prototype.set = function (value) {\n    this._original = value;\n    this._isProcessed = false;\n  };\n\n  return StringWithSubstitutions;\n}();\n\nexports.StringWithSubstitutions = StringWithSubstitutions;\n\nvar SpacingDefinition =\n/** @class */\nfunction () {\n  function SpacingDefinition(top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (right === void 0) {\n      right = 0;\n    }\n\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n\n  return SpacingDefinition;\n}();\n\nexports.SpacingDefinition = SpacingDefinition;\n\nvar PaddingDefinition =\n/** @class */\nfunction () {\n  function PaddingDefinition(top, right, bottom, left) {\n    if (top === void 0) {\n      top = Enums.Spacing.None;\n    }\n\n    if (right === void 0) {\n      right = Enums.Spacing.None;\n    }\n\n    if (bottom === void 0) {\n      bottom = Enums.Spacing.None;\n    }\n\n    if (left === void 0) {\n      left = Enums.Spacing.None;\n    }\n\n    this.top = Enums.Spacing.None;\n    this.right = Enums.Spacing.None;\n    this.bottom = Enums.Spacing.None;\n    this.left = Enums.Spacing.None;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n\n  return PaddingDefinition;\n}();\n\nexports.PaddingDefinition = PaddingDefinition;\n\nvar SizeAndUnit =\n/** @class */\nfunction () {\n  function SizeAndUnit(physicalSize, unit) {\n    this.physicalSize = physicalSize;\n    this.unit = unit;\n  }\n\n  SizeAndUnit.parse = function (input, requireUnitSpecifier) {\n    if (requireUnitSpecifier === void 0) {\n      requireUnitSpecifier = false;\n    }\n\n    var result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n    var regExp = /^([0-9]+)(px|\\*)?$/g;\n    var matches = regExp.exec(input);\n    var expectedMatchCount = requireUnitSpecifier ? 3 : 2;\n\n    if (matches && matches.length >= expectedMatchCount) {\n      result.physicalSize = parseInt(matches[1]);\n\n      if (matches.length == 3) {\n        if (matches[2] == \"px\") {\n          result.unit = Enums.SizeUnit.Pixel;\n        }\n      }\n\n      return result;\n    }\n\n    throw new Error(\"Invalid size: \" + input);\n  };\n\n  return SizeAndUnit;\n}();\n\nexports.SizeAndUnit = SizeAndUnit;\n/**\r\n * Fast UUID generator, RFC4122 version 4 compliant.\r\n * @author Jeff Ward (jcward.com).\r\n * @license MIT license\r\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n **/\n\nvar UUID =\n/** @class */\nfunction () {\n  function UUID() {}\n\n  UUID.generate = function () {\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n    return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' + UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' + UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] + UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n  };\n\n  UUID.initialize = function () {\n    for (var i = 0; i < 256; i++) {\n      UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n    }\n  };\n\n  UUID.lut = [];\n  return UUID;\n}();\n\nexports.UUID = UUID;\nUUID.initialize();","map":null,"metadata":{},"sourceType":"script"}