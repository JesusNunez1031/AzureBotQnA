{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nvar Enums = require(\"./enums\");\n\nvar Shared = require(\"./shared\");\n\nvar Utils = require(\"./utils\");\n\nvar HostConfig = require(\"./host-config\");\n\nvar TextFormatters = require(\"./text-formatters\");\n\nfunction invokeSetCollection(action, collection) {\n  if (action) {\n    // Closest emulation of \"internal\" in TypeScript.\n    action[\"setCollection\"](collection);\n  }\n}\n\nfunction isActionAllowed(action, forbiddenActionTypes) {\n  if (forbiddenActionTypes) {\n    for (var i = 0; i < forbiddenActionTypes.length; i++) {\n      if (action.getJsonTypeName() === forbiddenActionTypes[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar InstanceCreationErrorType;\n\n(function (InstanceCreationErrorType) {\n  InstanceCreationErrorType[InstanceCreationErrorType[\"UnknownType\"] = 0] = \"UnknownType\";\n  InstanceCreationErrorType[InstanceCreationErrorType[\"ForbiddenType\"] = 1] = \"ForbiddenType\";\n})(InstanceCreationErrorType || (InstanceCreationErrorType = {}));\n\nfunction createCardObjectInstance(parent, json, forbiddenTypeNames, allowFallback, createInstanceCallback, createValidationErrorCallback, errors) {\n  var result = null;\n\n  if (json && typeof json === \"object\") {\n    var tryToFallback = false;\n    var typeName = Utils.getStringValue(json[\"type\"]);\n\n    if (forbiddenTypeNames && forbiddenTypeNames.indexOf(typeName) >= 0) {\n      raiseParseError(createValidationErrorCallback(typeName, InstanceCreationErrorType.ForbiddenType), errors);\n    } else {\n      result = createInstanceCallback(typeName);\n\n      if (!result) {\n        tryToFallback = allowFallback;\n        raiseParseError(createValidationErrorCallback(typeName, InstanceCreationErrorType.UnknownType), errors);\n      } else {\n        result.setParent(parent);\n        result.parse(json, errors);\n        tryToFallback = result.shouldFallback() && allowFallback;\n      }\n\n      if (tryToFallback) {\n        var fallback = json[\"fallback\"];\n\n        if (!fallback) {\n          parent.setShouldFallback(true);\n        }\n\n        if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\n          result = null;\n        } else if (typeof fallback === \"object\") {\n          result = createCardObjectInstance(parent, fallback, forbiddenTypeNames, true, createInstanceCallback, createValidationErrorCallback, errors);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction createActionInstance(parent, json, forbiddenActionTypes, allowFallback, errors) {\n  return createCardObjectInstance(parent, json, forbiddenActionTypes, allowFallback, function (typeName) {\n    return AdaptiveCard.actionTypeRegistry.createInstance(typeName);\n  }, function (typeName, errorType) {\n    if (errorType == InstanceCreationErrorType.UnknownType) {\n      return {\n        error: Enums.ValidationError.UnknownActionType,\n        message: \"Unknown action type: \" + typeName + \". Fallback will be used if present.\"\n      };\n    } else {\n      return {\n        error: Enums.ValidationError.ActionTypeNotAllowed,\n        message: \"Action type \" + typeName + \" is not allowed in this context.\"\n      };\n    }\n  }, errors);\n}\n\nexports.createActionInstance = createActionInstance;\n\nfunction createElementInstance(parent, json, allowFallback, errors) {\n  return createCardObjectInstance(parent, json, [], // Forbidden types not supported for elements for now\n  allowFallback, function (typeName) {\n    return AdaptiveCard.elementTypeRegistry.createInstance(typeName);\n  }, function (typeName, errorType) {\n    if (errorType == InstanceCreationErrorType.UnknownType) {\n      return {\n        error: Enums.ValidationError.UnknownElementType,\n        message: \"Unknown element type: \" + typeName + \". Fallback will be used if present.\"\n      };\n    } else {\n      return {\n        error: Enums.ValidationError.ElementTypeNotAllowed,\n        message: \"Element type \" + typeName + \" is not allowed in this context.\"\n      };\n    }\n  }, errors);\n}\n\nexports.createElementInstance = createElementInstance;\n\nvar SerializableObject =\n/** @class */\nfunction () {\n  function SerializableObject() {\n    this._rawProperties = {};\n  }\n\n  SerializableObject.prototype.parse = function (json, errors) {\n    this._rawProperties = AdaptiveCard.enableFullJsonRoundTrip ? json : {};\n  };\n\n  SerializableObject.prototype.toJSON = function () {\n    var result;\n\n    if (AdaptiveCard.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\n      result = this._rawProperties;\n    } else {\n      result = {};\n    }\n\n    return result;\n  };\n\n  SerializableObject.prototype.setCustomProperty = function (name, value) {\n    this._rawProperties[name] = value;\n  };\n\n  SerializableObject.prototype.getCustomProperty = function (name) {\n    return this._rawProperties[name];\n  };\n\n  return SerializableObject;\n}();\n\nexports.SerializableObject = SerializableObject;\n\nvar ValidationFailure =\n/** @class */\nfunction () {\n  function ValidationFailure(cardObject) {\n    this.cardObject = cardObject;\n    this.errors = [];\n  }\n\n  return ValidationFailure;\n}();\n\nexports.ValidationFailure = ValidationFailure;\n\nvar ValidationResults =\n/** @class */\nfunction () {\n  function ValidationResults() {\n    this.allIds = {};\n    this.failures = [];\n  }\n\n  ValidationResults.prototype.getFailureIndex = function (cardObject) {\n    for (var i = 0; i < this.failures.length; i++) {\n      if (this.failures[i].cardObject === cardObject) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  ValidationResults.prototype.addFailure = function (cardObject, error) {\n    var index = this.getFailureIndex(cardObject);\n    var failure;\n\n    if (index < 0) {\n      failure = new ValidationFailure(cardObject);\n      this.failures.push(failure);\n    } else {\n      failure = this.failures[index];\n    }\n\n    failure.errors.push(error);\n  };\n\n  return ValidationResults;\n}();\n\nexports.ValidationResults = ValidationResults;\n\nvar CardObject =\n/** @class */\nfunction (_super) {\n  __extends(CardObject, _super);\n\n  function CardObject() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CardObject.prototype.internalValidateProperties = function (context) {\n    if (!Utils.isNullOrEmpty(this.id)) {\n      if (context.allIds.hasOwnProperty(this.id)) {\n        if (context.allIds[this.id] == 1) {\n          context.addFailure(this, {\n            error: Enums.ValidationError.DuplicateId,\n            message: \"Duplicate Id: \" + this.id\n          });\n        }\n\n        context.allIds[this.id] += 1;\n      } else {\n        context.allIds[this.id] = 1;\n      }\n    }\n  };\n\n  CardObject.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.id = Utils.getStringValue(json[\"id\"]);\n  };\n\n  CardObject.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"type\", this.getJsonTypeName());\n    Utils.setProperty(result, \"id\", this.id);\n    return result;\n  };\n\n  CardObject.prototype.validateProperties = function () {\n    var result = new ValidationResults();\n    this.internalValidateProperties(result);\n    return result;\n  };\n\n  return CardObject;\n}(SerializableObject);\n\nexports.CardObject = CardObject;\n\nvar CardElement =\n/** @class */\nfunction (_super) {\n  __extends(CardElement, _super);\n\n  function CardElement() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._shouldFallback = false;\n    _this._lang = undefined;\n    _this._hostConfig = null;\n    _this._parent = null;\n    _this._renderedElement = null;\n    _this._separatorElement = null;\n    _this._isVisible = true;\n    _this._truncatedDueToOverflow = false;\n    _this._defaultRenderedElementDisplayMode = null;\n    _this._padding = null;\n    _this.requires = new HostConfig.HostCapabilities();\n    _this.horizontalAlignment = null;\n    _this.spacing = Enums.Spacing.Default;\n    _this.separator = false;\n    _this.customCssSelector = null;\n    _this.height = \"auto\";\n    _this.minPixelHeight = null;\n    return _this;\n  }\n\n  CardElement.prototype.internalRenderSeparator = function () {\n    var renderedSeparator = Utils.renderSeparation(this.hostConfig, {\n      spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\n      lineThickness: this.separator ? this.hostConfig.separator.lineThickness : null,\n      lineColor: this.separator ? this.hostConfig.separator.lineColor : null\n    }, this.separatorOrientation);\n    return renderedSeparator;\n  };\n\n  CardElement.prototype.updateRenderedElementVisibility = function () {\n    var displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : \"none\";\n\n    if (this._renderedElement) {\n      this._renderedElement.style.display = displayMode;\n    }\n\n    if (this._separatorElement) {\n      if (this.parent && this.parent.isFirstElement(this)) {\n        this._separatorElement.style.display = \"none\";\n      } else {\n        this._separatorElement.style.display = displayMode;\n      }\n    }\n  };\n\n  CardElement.prototype.hideElementDueToOverflow = function () {\n    if (this._renderedElement && this.isVisible) {\n      this._renderedElement.style.visibility = 'hidden';\n      this.isVisible = false;\n      raiseElementVisibilityChangedEvent(this, false);\n    }\n  };\n\n  CardElement.prototype.showElementHiddenDueToOverflow = function () {\n    if (this._renderedElement && !this.isVisible) {\n      this._renderedElement.style.visibility = null;\n      this.isVisible = true;\n      raiseElementVisibilityChangedEvent(this, false);\n    }\n  }; // Marked private to emulate internal access\n\n\n  CardElement.prototype.handleOverflow = function (maxHeight) {\n    if (this.isVisible || this.isHiddenDueToOverflow()) {\n      var handled = this.truncateOverflow(maxHeight); // Even if we were unable to truncate the element to fit this time,\n      // it still could have been previously truncated\n\n      this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\n\n      if (!handled) {\n        this.hideElementDueToOverflow();\n      } else if (handled && !this.isVisible) {\n        this.showElementHiddenDueToOverflow();\n      }\n    }\n  }; // Marked private to emulate internal access\n\n\n  CardElement.prototype.resetOverflow = function () {\n    var sizeChanged = false;\n\n    if (this._truncatedDueToOverflow) {\n      this.undoOverflowTruncation();\n      this._truncatedDueToOverflow = false;\n      sizeChanged = true;\n    }\n\n    if (this.isHiddenDueToOverflow) {\n      this.showElementHiddenDueToOverflow();\n    }\n\n    return sizeChanged;\n  };\n\n  CardElement.prototype.createPlaceholderElement = function () {\n    var element = document.createElement(\"div\");\n    element.style.border = \"1px dashed #DDDDDD\";\n    element.style.padding = \"4px\";\n    element.style.minHeight = \"32px\";\n    element.style.fontSize = \"10px\";\n    element.innerText = \"Empty \" + this.getJsonTypeName();\n    return element;\n  };\n\n  CardElement.prototype.adjustRenderedElementSize = function (renderedElement) {\n    if (this.height === \"auto\") {\n      renderedElement.style.flex = \"0 0 auto\";\n    } else {\n      renderedElement.style.flex = \"1 1 auto\";\n    }\n\n    if (this.minPixelHeight) {\n      renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n    }\n  };\n\n  CardElement.prototype.overrideInternalRender = function () {\n    return this.internalRender();\n  };\n\n  CardElement.prototype.applyPadding = function () {\n    if (this.separatorElement) {\n      if (AdaptiveCard.alwaysBleedSeparators && this.separatorOrientation == Enums.Orientation.Horizontal && !this.isBleeding()) {\n        var padding = new Shared.PaddingDefinition();\n        this.getImmediateSurroundingPadding(padding);\n        var physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n        this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n        this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n      } else {\n        this.separatorElement.style.marginRight = \"0\";\n        this.separatorElement.style.marginLeft = \"0\";\n      }\n    }\n  };\n  /*\r\n   * Called when this element overflows the bottom of the card.\r\n   * maxHeight will be the amount of space still available on the card (0 if\r\n   * the element is fully off the card).\r\n   */\n\n\n  CardElement.prototype.truncateOverflow = function (maxHeight) {\n    // Child implementations should return true if the element handled\n    // the truncation request such that its content fits within maxHeight,\n    // false if the element should fall back to being hidden\n    return false;\n  };\n  /*\r\n   * This should reverse any changes performed in truncateOverflow().\r\n   */\n\n\n  CardElement.prototype.undoOverflowTruncation = function () {};\n\n  CardElement.prototype.getDefaultPadding = function () {\n    return new Shared.PaddingDefinition();\n  };\n\n  CardElement.prototype.getHasBackground = function () {\n    return false;\n  };\n\n  CardElement.prototype.getPadding = function () {\n    return this._padding;\n  };\n\n  CardElement.prototype.setPadding = function (value) {\n    this._padding = value;\n  };\n\n  Object.defineProperty(CardElement.prototype, \"supportsMinHeight\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"useDefaultSizing\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"allowCustomPadding\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"separatorOrientation\", {\n    get: function () {\n      return Enums.Orientation.Horizontal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"defaultStyle\", {\n    get: function () {\n      return Enums.ContainerStyle.Default;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CardElement.prototype.asString = function () {\n    return \"\";\n  };\n\n  CardElement.prototype.isBleeding = function () {\n    return false;\n  };\n\n  CardElement.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"isVisible\", this.isVisible, true);\n\n    if (this.horizontalAlignment !== null) {\n      Utils.setEnumProperty(Enums.HorizontalAlignment, result, \"horizontalAlignment\", this.horizontalAlignment);\n    }\n\n    Utils.setEnumProperty(Enums.Spacing, result, \"spacing\", this.spacing, Enums.Spacing.Default);\n    Utils.setProperty(result, \"separator\", this.separator, false);\n    Utils.setProperty(result, \"height\", this.height, \"auto\");\n\n    if (this.minPixelHeight) {\n      Utils.setProperty(result, \"minHeight\", this.minPixelHeight + \"px\");\n    }\n\n    return result;\n  };\n\n  CardElement.prototype.setParent = function (value) {\n    this._parent = value;\n  };\n\n  CardElement.prototype.getEffectiveStyle = function () {\n    if (this.parent) {\n      return this.parent.getEffectiveStyle();\n    }\n\n    return this.defaultStyle;\n  };\n\n  CardElement.prototype.getForbiddenElementTypes = function () {\n    return null;\n  };\n\n  CardElement.prototype.getForbiddenActionTypes = function () {\n    return null;\n  };\n\n  CardElement.prototype.getImmediateSurroundingPadding = function (result, processTop, processRight, processBottom, processLeft) {\n    if (processTop === void 0) {\n      processTop = true;\n    }\n\n    if (processRight === void 0) {\n      processRight = true;\n    }\n\n    if (processBottom === void 0) {\n      processBottom = true;\n    }\n\n    if (processLeft === void 0) {\n      processLeft = true;\n    }\n\n    if (this.parent) {\n      var doProcessTop = processTop && this.parent.isTopElement(this);\n      var doProcessRight = processRight && this.parent.isRightMostElement(this);\n      var doProcessBottom = processBottom && this.parent.isBottomElement(this);\n      var doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\n      var effectivePadding = this.parent.getEffectivePadding();\n\n      if (effectivePadding) {\n        if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {\n          result.top = effectivePadding.top;\n          doProcessTop = false;\n        }\n\n        if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {\n          result.right = effectivePadding.right;\n          doProcessRight = false;\n        }\n\n        if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {\n          result.bottom = effectivePadding.bottom;\n          doProcessBottom = false;\n        }\n\n        if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {\n          result.left = effectivePadding.left;\n          doProcessLeft = false;\n        }\n      }\n\n      if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\n        this.parent.getImmediateSurroundingPadding(result, doProcessTop, doProcessRight, doProcessBottom, doProcessLeft);\n      }\n    }\n  };\n\n  CardElement.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    raiseParseElementEvent(this, json, errors);\n    this.requires.parse(json[\"requires\"], errors);\n    this.isVisible = Utils.getBoolValue(json[\"isVisible\"], this.isVisible);\n    this.horizontalAlignment = Utils.getEnumValue(Enums.HorizontalAlignment, json[\"horizontalAlignment\"], this.horizontalAlignment);\n    this.spacing = Utils.getEnumValue(Enums.Spacing, json[\"spacing\"], Enums.Spacing.Default);\n    this.separator = Utils.getBoolValue(json[\"separator\"], this.separator);\n    var jsonSeparation = json[\"separation\"];\n\n    if (jsonSeparation !== undefined) {\n      if (jsonSeparation === \"none\") {\n        this.spacing = Enums.Spacing.None;\n        this.separator = false;\n      } else if (jsonSeparation === \"strong\") {\n        this.spacing = Enums.Spacing.Large;\n        this.separator = true;\n      } else if (jsonSeparation === \"default\") {\n        this.spacing = Enums.Spacing.Default;\n        this.separator = false;\n      }\n\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The \\\"separation\\\" property is deprecated and will be removed. Use the \\\"spacing\\\" and \\\"separator\\\" properties instead.\"\n      }, errors);\n    }\n\n    var jsonHeight = json[\"height\"];\n\n    if (jsonHeight === \"auto\" || jsonHeight === \"stretch\") {\n      this.height = jsonHeight;\n    }\n\n    if (this.supportsMinHeight) {\n      var jsonMinHeight = json[\"minHeight\"];\n\n      if (jsonMinHeight && typeof jsonMinHeight === \"string\") {\n        var isValid = false;\n\n        try {\n          var size = Shared.SizeAndUnit.parse(jsonMinHeight, true);\n\n          if (size.unit == Enums.SizeUnit.Pixel) {\n            this.minPixelHeight = size.physicalSize;\n            isValid = true;\n          }\n        } catch (_a) {// Do nothing. A parse error is emitted below\n        }\n\n        if (!isValid) {\n          raiseParseError({\n            error: Enums.ValidationError.InvalidPropertyValue,\n            message: \"Invalid \\\"minHeight\\\" value: \" + jsonMinHeight\n          }, errors);\n        }\n      }\n    }\n  };\n\n  CardElement.prototype.getActionCount = function () {\n    return 0;\n  };\n\n  CardElement.prototype.getActionAt = function (index) {\n    throw new Error(\"Index out of range.\");\n  };\n\n  CardElement.prototype.remove = function () {\n    if (this.parent && this.parent instanceof CardElementContainer) {\n      return this.parent.removeItem(this);\n    }\n\n    return false;\n  };\n\n  CardElement.prototype.render = function () {\n    this._renderedElement = this.overrideInternalRender();\n    this._separatorElement = this.internalRenderSeparator();\n\n    if (this._renderedElement) {\n      if (this.customCssSelector) {\n        this._renderedElement.classList.add(this.customCssSelector);\n      }\n\n      this._renderedElement.style.boxSizing = \"border-box\";\n      this._defaultRenderedElementDisplayMode = this._renderedElement.style.display;\n      this.adjustRenderedElementSize(this._renderedElement);\n      this.updateLayout(false);\n    } else if (this.isDesignMode()) {\n      this._renderedElement = this.createPlaceholderElement();\n    }\n\n    return this._renderedElement;\n  };\n\n  CardElement.prototype.updateLayout = function (processChildren) {\n    if (processChildren === void 0) {\n      processChildren = true;\n    }\n\n    this.updateRenderedElementVisibility();\n    this.applyPadding();\n  };\n\n  CardElement.prototype.indexOf = function (cardElement) {\n    return -1;\n  };\n\n  CardElement.prototype.isDesignMode = function () {\n    var rootElement = this.getRootElement();\n    return rootElement instanceof AdaptiveCard && rootElement.designMode;\n  };\n\n  CardElement.prototype.isRendered = function () {\n    return this._renderedElement && this._renderedElement.offsetHeight > 0;\n  };\n\n  CardElement.prototype.isFirstElement = function (element) {\n    return true;\n  };\n\n  CardElement.prototype.isLastElement = function (element) {\n    return true;\n  };\n\n  CardElement.prototype.isAtTheVeryLeft = function () {\n    return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;\n  };\n\n  CardElement.prototype.isAtTheVeryRight = function () {\n    return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;\n  };\n\n  CardElement.prototype.isAtTheVeryTop = function () {\n    return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;\n  };\n\n  CardElement.prototype.isAtTheVeryBottom = function () {\n    return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;\n  };\n\n  CardElement.prototype.isBleedingAtTop = function () {\n    return false;\n  };\n\n  CardElement.prototype.isBleedingAtBottom = function () {\n    return false;\n  };\n\n  CardElement.prototype.isLeftMostElement = function (element) {\n    return true;\n  };\n\n  CardElement.prototype.isRightMostElement = function (element) {\n    return true;\n  };\n\n  CardElement.prototype.isTopElement = function (element) {\n    return this.isFirstElement(element);\n  };\n\n  CardElement.prototype.isBottomElement = function (element) {\n    return this.isLastElement(element);\n  };\n\n  CardElement.prototype.isHiddenDueToOverflow = function () {\n    return this._renderedElement && this._renderedElement.style.visibility == 'hidden';\n  };\n\n  CardElement.prototype.getRootElement = function () {\n    var rootElement = this;\n\n    while (rootElement.parent) {\n      rootElement = rootElement.parent;\n    }\n\n    return rootElement;\n  };\n\n  CardElement.prototype.getParentContainer = function () {\n    var currentElement = this.parent;\n\n    while (currentElement) {\n      if (currentElement instanceof Container) {\n        return currentElement;\n      }\n\n      currentElement = currentElement.parent;\n    }\n\n    return null;\n  };\n\n  CardElement.prototype.getAllInputs = function () {\n    return [];\n  };\n\n  CardElement.prototype.getResourceInformation = function () {\n    return [];\n  };\n\n  CardElement.prototype.getElementById = function (id) {\n    return this.id === id ? this : null;\n  };\n\n  CardElement.prototype.getActionById = function (id) {\n    return null;\n  };\n\n  CardElement.prototype.shouldFallback = function () {\n    return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\n  };\n\n  CardElement.prototype.setShouldFallback = function (value) {\n    this._shouldFallback = value;\n  };\n\n  CardElement.prototype.getEffectivePadding = function () {\n    var padding = this.getPadding();\n    return padding && this.allowCustomPadding ? padding : this.getDefaultPadding();\n  };\n\n  Object.defineProperty(CardElement.prototype, \"lang\", {\n    get: function () {\n      if (this._lang) {\n        return this._lang;\n      } else {\n        if (this.parent) {\n          return this.parent.lang;\n        } else {\n          return undefined;\n        }\n      }\n    },\n    set: function (value) {\n      if (value && value != \"\") {\n        var regEx = /^[a-z]{2,3}$/ig;\n        var matches = regEx.exec(value);\n\n        if (!matches) {\n          throw new Error(\"Invalid language identifier: \" + value);\n        }\n      }\n\n      this._lang = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"hostConfig\", {\n    get: function () {\n      if (this._hostConfig) {\n        return this._hostConfig;\n      } else {\n        if (this.parent) {\n          return this.parent.hostConfig;\n        } else {\n          return defaultHostConfig;\n        }\n      }\n    },\n    set: function (value) {\n      this._hostConfig = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"index\", {\n    get: function () {\n      if (this.parent) {\n        return this.parent.indexOf(this);\n      } else {\n        return 0;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"isInteractive\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"isStandalone\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"isInline\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"parent\", {\n    get: function () {\n      return this._parent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"isVisible\", {\n    get: function () {\n      return this._isVisible;\n    },\n    set: function (value) {\n      // If the element is going to be hidden, reset any changes that were due\n      // to overflow truncation (this ensures that if the element is later\n      // un-hidden it has the right content)\n      if (AdaptiveCard.useAdvancedCardBottomTruncation && !value) {\n        this.undoOverflowTruncation();\n      }\n\n      if (this._isVisible != value) {\n        this._isVisible = value;\n        this.updateRenderedElementVisibility();\n\n        if (this._renderedElement) {\n          raiseElementVisibilityChangedEvent(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"hasVisibleSeparator\", {\n    get: function () {\n      if (this.parent && this.separatorElement) {\n        return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\n      } else {\n        return false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"renderedElement\", {\n    get: function () {\n      return this._renderedElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CardElement.prototype, \"separatorElement\", {\n    get: function () {\n      return this._separatorElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CardElement;\n}(CardObject);\n\nexports.CardElement = CardElement;\n\nvar BaseTextBlock =\n/** @class */\nfunction (_super) {\n  __extends(BaseTextBlock, _super);\n\n  function BaseTextBlock() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._selectAction = null;\n    _this.size = Enums.TextSize.Default;\n    _this.weight = Enums.TextWeight.Default;\n    _this.color = Enums.TextColor.Default;\n    _this.isSubtle = false;\n    _this.fontType = null;\n    return _this;\n  }\n\n  BaseTextBlock.prototype.getEffectiveStyleDefinition = function () {\n    return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\n  };\n\n  BaseTextBlock.prototype.getFontSize = function (fontType) {\n    switch (this.size) {\n      case Enums.TextSize.Small:\n        return fontType.fontSizes.small;\n\n      case Enums.TextSize.Medium:\n        return fontType.fontSizes.medium;\n\n      case Enums.TextSize.Large:\n        return fontType.fontSizes.large;\n\n      case Enums.TextSize.ExtraLarge:\n        return fontType.fontSizes.extraLarge;\n\n      default:\n        return fontType.fontSizes.default;\n    }\n  };\n\n  BaseTextBlock.prototype.getColorDefinition = function (colorSet, color) {\n    switch (color) {\n      case Enums.TextColor.Accent:\n        return colorSet.accent;\n\n      case Enums.TextColor.Dark:\n        return colorSet.dark;\n\n      case Enums.TextColor.Light:\n        return colorSet.light;\n\n      case Enums.TextColor.Good:\n        return colorSet.good;\n\n      case Enums.TextColor.Warning:\n        return colorSet.warning;\n\n      case Enums.TextColor.Attention:\n        return colorSet.attention;\n\n      default:\n        return colorSet.default;\n    }\n  };\n\n  BaseTextBlock.prototype.setText = function (value) {\n    this._text = value;\n  };\n\n  BaseTextBlock.prototype.asString = function () {\n    return this.text;\n  };\n\n  BaseTextBlock.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setEnumProperty(Enums.TextSize, result, \"size\", this.size, Enums.TextSize.Default);\n    Utils.setEnumProperty(Enums.TextWeight, result, \"weight\", this.weight, Enums.TextWeight.Default);\n    Utils.setEnumProperty(Enums.TextColor, result, \"color\", this.color, Enums.TextColor.Default);\n    Utils.setProperty(result, \"text\", this.text);\n    Utils.setProperty(result, \"isSubtle\", this.isSubtle, false);\n    Utils.setEnumProperty(Enums.FontType, result, \"fontType\", this.fontType, Enums.FontType.Default);\n    return result;\n  };\n\n  BaseTextBlock.prototype.applyStylesTo = function (targetElement) {\n    var fontType = this.hostConfig.getFontTypeDefinition(this.fontType);\n\n    if (fontType.fontFamily) {\n      targetElement.style.fontFamily = fontType.fontFamily;\n    }\n\n    var fontSize;\n\n    switch (this.size) {\n      case Enums.TextSize.Small:\n        fontSize = fontType.fontSizes.small;\n        break;\n\n      case Enums.TextSize.Medium:\n        fontSize = fontType.fontSizes.medium;\n        break;\n\n      case Enums.TextSize.Large:\n        fontSize = fontType.fontSizes.large;\n        break;\n\n      case Enums.TextSize.ExtraLarge:\n        fontSize = fontType.fontSizes.extraLarge;\n        break;\n\n      default:\n        fontSize = fontType.fontSizes.default;\n        break;\n    }\n\n    targetElement.style.fontSize = fontSize + \"px\";\n    var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n    targetElement.style.color = Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);\n    var fontWeight;\n\n    switch (this.weight) {\n      case Enums.TextWeight.Lighter:\n        fontWeight = fontType.fontWeights.lighter;\n        break;\n\n      case Enums.TextWeight.Bolder:\n        fontWeight = fontType.fontWeights.bolder;\n        break;\n\n      default:\n        fontWeight = fontType.fontWeights.default;\n        break;\n    }\n\n    targetElement.style.fontWeight = fontWeight.toString();\n  };\n\n  BaseTextBlock.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.text = Utils.getStringValue(json[\"text\"]);\n    var sizeString = Utils.getStringValue(json[\"size\"]);\n\n    if (sizeString && sizeString.toLowerCase() === \"normal\") {\n      this.size = Enums.TextSize.Default;\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The TextBlock.size value \\\"normal\\\" is deprecated and will be removed. Use \\\"default\\\" instead.\"\n      }, errors);\n    } else {\n      this.size = Utils.getEnumValue(Enums.TextSize, sizeString, this.size);\n    }\n\n    var weightString = Utils.getStringValue(json[\"weight\"]);\n\n    if (weightString && weightString.toLowerCase() === \"normal\") {\n      this.weight = Enums.TextWeight.Default;\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The TextBlock.weight value \\\"normal\\\" is deprecated and will be removed. Use \\\"default\\\" instead.\"\n      }, errors);\n    } else {\n      this.weight = Utils.getEnumValue(Enums.TextWeight, weightString, this.weight);\n    }\n\n    this.color = Utils.getEnumValue(Enums.TextColor, json[\"color\"], this.color);\n    this.isSubtle = Utils.getBoolValue(json[\"isSubtle\"], this.isSubtle);\n    this.fontType = Utils.getEnumValue(Enums.FontType, json[\"fontType\"], this.fontType);\n  };\n\n  Object.defineProperty(BaseTextBlock.prototype, \"effectiveColor\", {\n    get: function () {\n      return this.color ? this.color : Enums.TextColor.Default;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseTextBlock.prototype, \"text\", {\n    get: function () {\n      return this._text;\n    },\n    set: function (value) {\n      this.setText(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseTextBlock.prototype, \"selectAction\", {\n    get: function () {\n      return this._selectAction;\n    },\n    set: function (value) {\n      this._selectAction = value;\n\n      if (this._selectAction) {\n        this._selectAction.setParent(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseTextBlock;\n}(CardElement);\n\nexports.BaseTextBlock = BaseTextBlock;\n\nvar TextBlock =\n/** @class */\nfunction (_super) {\n  __extends(TextBlock, _super);\n\n  function TextBlock() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._processedText = null;\n    _this._treatAsPlainText = true;\n    _this.wrap = false;\n    _this.useMarkdown = true;\n    return _this;\n  }\n\n  TextBlock.prototype.restoreOriginalContent = function () {\n    var maxHeight = this.maxLines ? this._computedLineHeight * this.maxLines + 'px' : null;\n    this.renderedElement.style.maxHeight = maxHeight;\n    this.renderedElement.innerHTML = this._originalInnerHtml;\n  };\n\n  TextBlock.prototype.truncateIfSupported = function (maxHeight) {\n    // For now, only truncate TextBlocks that contain just a single\n    // paragraph -- since the maxLines calculation doesn't take into\n    // account Markdown lists\n    var children = this.renderedElement.children;\n    var isTextOnly = !children.length;\n    var truncationSupported = isTextOnly || children.length == 1 && children[0].tagName.toLowerCase() == 'p';\n\n    if (truncationSupported) {\n      var element = isTextOnly ? this.renderedElement : children[0];\n      Utils.truncate(element, maxHeight, this._computedLineHeight);\n      return true;\n    }\n\n    return false;\n  };\n\n  TextBlock.prototype.setText = function (value) {\n    _super.prototype.setText.call(this, value);\n\n    this._processedText = null;\n  };\n\n  TextBlock.prototype.getRenderedDomElementType = function () {\n    return \"div\";\n  };\n\n  TextBlock.prototype.internalRender = function () {\n    var _this = this;\n\n    this._processedText = null;\n\n    if (!Utils.isNullOrEmpty(this.text)) {\n      var hostConfig = this.hostConfig;\n      var element = document.createElement(this.getRenderedDomElementType());\n      element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\n      element.style.overflow = \"hidden\";\n      this.applyStylesTo(element);\n\n      if (this.selectAction) {\n        element.onclick = function (e) {\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this.selectAction.execute();\n        };\n\n        if (hostConfig.supportsInteractivity) {\n          element.tabIndex = 0;\n          element.setAttribute(\"role\", \"button\");\n          element.setAttribute(\"aria-label\", this.selectAction.title);\n          element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n        }\n      }\n\n      if (!this._processedText) {\n        this._treatAsPlainText = true;\n        var formattedText = TextFormatters.formatText(this.lang, this.text);\n\n        if (this.useMarkdown) {\n          if (AdaptiveCard.allowMarkForTextHighlighting) {\n            formattedText = formattedText.replace(/<mark>/g, \"===\").replace(/<\\/mark>/g, \"/==\");\n          }\n\n          var markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\n\n          if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {\n            this._processedText = markdownProcessingResult.outputHtml;\n            this._treatAsPlainText = false; // Only process <mark> tag if markdown processing was applied because\n            // markdown processing is also responsible for sanitizing the input string\n\n            if (AdaptiveCard.allowMarkForTextHighlighting) {\n              var markStyle = \"\";\n              var effectiveStyle = this.getEffectiveStyleDefinition();\n\n              if (effectiveStyle.highlightBackgroundColor) {\n                markStyle += \"background-color: \" + effectiveStyle.highlightBackgroundColor + \";\";\n              }\n\n              if (effectiveStyle.highlightForegroundColor) {\n                markStyle += \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\n              }\n\n              if (!Utils.isNullOrEmpty(markStyle)) {\n                markStyle = 'style=\"' + markStyle + '\"';\n              }\n\n              this._processedText = this._processedText.replace(/===/g, \"<mark \" + markStyle + \">\").replace(/\\/==/g, \"</mark>\");\n            }\n          } else {\n            this._processedText = formattedText;\n            this._treatAsPlainText = true;\n          }\n        } else {\n          this._processedText = formattedText;\n          this._treatAsPlainText = true;\n        }\n      }\n\n      if (this._treatAsPlainText) {\n        element.innerText = this._processedText;\n      } else {\n        element.innerHTML = this._processedText;\n      }\n\n      if (element.firstElementChild instanceof HTMLElement) {\n        var firstElementChild = element.firstElementChild;\n        firstElementChild.style.marginTop = \"0px\";\n        firstElementChild.style.width = \"100%\";\n\n        if (!this.wrap) {\n          firstElementChild.style.overflow = \"hidden\";\n          firstElementChild.style.textOverflow = \"ellipsis\";\n        }\n      }\n\n      if (element.lastElementChild instanceof HTMLElement) {\n        element.lastElementChild.style.marginBottom = \"0px\";\n      }\n\n      var anchors = element.getElementsByTagName(\"a\");\n\n      for (var i = 0; i < anchors.length; i++) {\n        var anchor = anchors[i];\n        anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n        anchor.target = \"_blank\";\n\n        anchor.onclick = function (e) {\n          if (raiseAnchorClickedEvent(_this, e.target)) {\n            e.preventDefault();\n            e.cancelBubble = true;\n          }\n        };\n      }\n\n      if (this.wrap) {\n        element.style.wordWrap = \"break-word\";\n\n        if (this.maxLines > 0) {\n          element.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\n          element.style.overflow = \"hidden\";\n        }\n      } else {\n        element.style.whiteSpace = \"nowrap\";\n        element.style.textOverflow = \"ellipsis\";\n      }\n\n      if (AdaptiveCard.useAdvancedTextBlockTruncation || AdaptiveCard.useAdvancedCardBottomTruncation) {\n        this._originalInnerHtml = element.innerHTML;\n      }\n\n      return element;\n    } else {\n      return null;\n    }\n  };\n\n  TextBlock.prototype.truncateOverflow = function (maxHeight) {\n    if (maxHeight >= this._computedLineHeight) {\n      return this.truncateIfSupported(maxHeight);\n    }\n\n    return false;\n  };\n\n  TextBlock.prototype.undoOverflowTruncation = function () {\n    this.restoreOriginalContent();\n\n    if (AdaptiveCard.useAdvancedTextBlockTruncation && this.maxLines) {\n      var maxHeight = this._computedLineHeight * this.maxLines;\n      this.truncateIfSupported(maxHeight);\n    }\n  };\n\n  TextBlock.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"wrap\", this.wrap, false);\n    Utils.setProperty(result, \"maxLines\", this.maxLines, 0);\n    return result;\n  };\n\n  TextBlock.prototype.applyStylesTo = function (targetElement) {\n    _super.prototype.applyStylesTo.call(this, targetElement);\n\n    var parentContainer = this.getParentContainer();\n    var isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n    switch (this.horizontalAlignment) {\n      case Enums.HorizontalAlignment.Center:\n        targetElement.style.textAlign = \"center\";\n        break;\n\n      case Enums.HorizontalAlignment.Right:\n        targetElement.style.textAlign = isRtl ? \"left\" : \"right\";\n        break;\n\n      default:\n        targetElement.style.textAlign = isRtl ? \"right\" : \"left\";\n        break;\n    }\n\n    var lineHeights = this.hostConfig.lineHeights;\n\n    if (lineHeights) {\n      switch (this.size) {\n        case Enums.TextSize.Small:\n          this._computedLineHeight = lineHeights.small;\n          break;\n\n        case Enums.TextSize.Medium:\n          this._computedLineHeight = lineHeights.medium;\n          break;\n\n        case Enums.TextSize.Large:\n          this._computedLineHeight = lineHeights.large;\n          break;\n\n        case Enums.TextSize.ExtraLarge:\n          this._computedLineHeight = lineHeights.extraLarge;\n          break;\n\n        default:\n          this._computedLineHeight = lineHeights.default;\n          break;\n      }\n    } else {\n      // Looks like 1.33 is the magic number to compute line-height\n      // from font size.\n      this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;\n    }\n\n    targetElement.style.lineHeight = this._computedLineHeight + \"px\";\n  };\n\n  TextBlock.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.wrap = Utils.getBoolValue(json[\"wrap\"], this.wrap);\n\n    if (typeof json[\"maxLines\"] === \"number\") {\n      this.maxLines = json[\"maxLines\"];\n    }\n  };\n\n  TextBlock.prototype.getJsonTypeName = function () {\n    return \"TextBlock\";\n  };\n\n  TextBlock.prototype.updateLayout = function (processChildren) {\n    if (processChildren === void 0) {\n      processChildren = false;\n    }\n\n    _super.prototype.updateLayout.call(this, processChildren);\n\n    if (AdaptiveCard.useAdvancedTextBlockTruncation && this.maxLines && this.isRendered()) {\n      // Reset the element's innerHTML in case the available room for\n      // content has increased\n      this.restoreOriginalContent();\n      this.truncateIfSupported(this._computedLineHeight * this.maxLines);\n    }\n  };\n\n  return TextBlock;\n}(BaseTextBlock);\n\nexports.TextBlock = TextBlock;\n\nvar Label =\n/** @class */\nfunction (_super) {\n  __extends(Label, _super);\n\n  function Label() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Label.prototype.getRenderedDomElementType = function () {\n    return \"label\";\n  };\n\n  Label.prototype.internalRender = function () {\n    var renderedElement = _super.prototype.internalRender.call(this);\n\n    if (!Utils.isNullOrEmpty(this.forElementId)) {\n      renderedElement.htmlFor = this.forElementId;\n    }\n\n    return renderedElement;\n  };\n\n  return Label;\n}(TextBlock);\n\nvar TextRun =\n/** @class */\nfunction (_super) {\n  __extends(TextRun, _super);\n\n  function TextRun() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.italic = false;\n    _this.strikethrough = false;\n    _this.highlight = false;\n    return _this;\n  }\n\n  TextRun.prototype.internalRender = function () {\n    var _this = this;\n\n    if (!Utils.isNullOrEmpty(this.text)) {\n      var hostConfig = this.hostConfig;\n      var formattedText = TextFormatters.formatText(this.lang, this.text);\n      var element = document.createElement(\"span\");\n      element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\n      this.applyStylesTo(element);\n\n      if (this.selectAction && hostConfig.supportsInteractivity) {\n        var anchor = document.createElement(\"a\");\n        anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n        anchor.href = this.selectAction.getHref();\n        anchor.target = \"_blank\";\n\n        anchor.onclick = function (e) {\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this.selectAction.execute();\n        };\n\n        anchor.innerText = formattedText;\n        element.appendChild(anchor);\n      } else {\n        element.innerText = formattedText;\n      }\n\n      return element;\n    } else {\n      return null;\n    }\n  };\n\n  TextRun.prototype.applyStylesTo = function (targetElement) {\n    _super.prototype.applyStylesTo.call(this, targetElement);\n\n    if (this.italic) {\n      targetElement.style.fontStyle = \"italic\";\n    }\n\n    if (this.strikethrough) {\n      targetElement.style.textDecoration = \"line-through\";\n    }\n\n    if (this.highlight) {\n      var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n      targetElement.style.backgroundColor = Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);\n    }\n  };\n\n  TextRun.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"italic\", this.italic, false);\n    Utils.setProperty(result, \"strikethrough\", this.strikethrough, false);\n    Utils.setProperty(result, \"highlight\", this.highlight, false);\n\n    if (this.selectAction) {\n      Utils.setProperty(result, \"selectAction\", this.selectAction.toJSON());\n    }\n\n    return result;\n  };\n\n  TextRun.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.italic = Utils.getBoolValue(json[\"italic\"], this.italic);\n    this.strikethrough = Utils.getBoolValue(json[\"strikethrough\"], this.strikethrough);\n    this.highlight = Utils.getBoolValue(json[\"highlight\"], this.highlight);\n    this.selectAction = createActionInstance(this, json[\"selectAction\"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);\n  };\n\n  TextRun.prototype.getJsonTypeName = function () {\n    return \"TextRun\";\n  };\n\n  Object.defineProperty(TextRun.prototype, \"isStandalone\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextRun.prototype, \"isInline\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TextRun;\n}(BaseTextBlock);\n\nexports.TextRun = TextRun;\n\nvar RichTextBlock =\n/** @class */\nfunction (_super) {\n  __extends(RichTextBlock, _super);\n\n  function RichTextBlock() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._inlines = [];\n    return _this;\n  }\n\n  RichTextBlock.prototype.internalAddInline = function (inline, forceAdd) {\n    if (forceAdd === void 0) {\n      forceAdd = false;\n    }\n\n    if (!inline.isInline) {\n      throw new Error(\"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\");\n    }\n\n    var doAdd = inline.parent == null || forceAdd;\n\n    if (!doAdd && inline.parent != this) {\n      throw new Error(\"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\");\n    } else {\n      inline.setParent(this);\n\n      this._inlines.push(inline);\n    }\n  };\n\n  RichTextBlock.prototype.internalRender = function () {\n    if (this._inlines.length > 0) {\n      var element = document.createElement(\"div\");\n      element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\n      var parentContainer = this.getParentContainer();\n      var isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n      switch (this.horizontalAlignment) {\n        case Enums.HorizontalAlignment.Center:\n          element.style.textAlign = \"center\";\n          break;\n\n        case Enums.HorizontalAlignment.Right:\n          element.style.textAlign = isRtl ? \"left\" : \"right\";\n          break;\n\n        default:\n          element.style.textAlign = isRtl ? \"right\" : \"left\";\n          break;\n      }\n\n      for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {\n        var inline = _a[_i];\n        element.appendChild(inline.render());\n      }\n\n      return element;\n    } else {\n      return null;\n    }\n  };\n\n  RichTextBlock.prototype.asString = function () {\n    var result = \"\";\n\n    for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {\n      var inline = _a[_i];\n      result += inline.asString();\n    }\n\n    return result;\n  };\n\n  RichTextBlock.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this._inlines = [];\n\n    if (Array.isArray(json[\"inlines\"])) {\n      for (var _i = 0, _a = json[\"inlines\"]; _i < _a.length; _i++) {\n        var jsonInline = _a[_i];\n        var inline = void 0;\n\n        if (typeof jsonInline === \"string\") {\n          var textRun = new TextRun();\n          textRun.text = jsonInline;\n          inline = textRun;\n        } else {\n          inline = createElementInstance(this, jsonInline, false, // No fallback for inlines in 1.2\n          errors);\n        }\n\n        if (inline) {\n          this.internalAddInline(inline, true);\n        }\n      }\n    }\n  };\n\n  RichTextBlock.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this._inlines.length > 0) {\n      var jsonInlines = [];\n\n      for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {\n        var inline = _a[_i];\n        jsonInlines.push(inline.toJSON());\n      }\n\n      Utils.setProperty(result, \"inlines\", jsonInlines);\n    }\n\n    return result;\n  };\n\n  RichTextBlock.prototype.getJsonTypeName = function () {\n    return \"RichTextBlock\";\n  };\n\n  RichTextBlock.prototype.getInlineCount = function () {\n    return this._inlines.length;\n  };\n\n  RichTextBlock.prototype.getInlineAt = function (index) {\n    if (index >= 0 && index < this._inlines.length) {\n      return this._inlines[index];\n    } else {\n      throw new Error(\"RichTextBlock.getInlineAt: Index out of range (\" + index + \")\");\n    }\n  };\n\n  RichTextBlock.prototype.addInline = function (inline) {\n    this.internalAddInline(inline);\n  };\n\n  RichTextBlock.prototype.removeInline = function (inline) {\n    var index = this._inlines.indexOf(inline);\n\n    if (index >= 0) {\n      this._inlines[index].setParent(null);\n\n      this._inlines.splice(index, 1);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  return RichTextBlock;\n}(CardElement);\n\nexports.RichTextBlock = RichTextBlock;\n\nvar Fact =\n/** @class */\nfunction () {\n  function Fact(name, value) {\n    if (name === void 0) {\n      name = undefined;\n    }\n\n    if (value === void 0) {\n      value = undefined;\n    }\n\n    this.name = name;\n    this.value = value;\n  }\n\n  Fact.prototype.parse = function (json) {\n    this.name = Utils.getStringValue(json[\"title\"]);\n    this.value = Utils.getStringValue(json[\"value\"]);\n  };\n\n  Fact.prototype.toJSON = function () {\n    return {\n      title: this.name,\n      value: this.value\n    };\n  };\n\n  return Fact;\n}();\n\nexports.Fact = Fact;\n\nvar FactSet =\n/** @class */\nfunction (_super) {\n  __extends(FactSet, _super);\n\n  function FactSet() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.facts = [];\n    return _this;\n  }\n\n  Object.defineProperty(FactSet.prototype, \"useDefaultSizing\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FactSet.prototype.internalRender = function () {\n    var element = null;\n    var hostConfig = this.hostConfig;\n\n    if (this.facts.length > 0) {\n      element = document.createElement(\"table\");\n      element.style.borderWidth = \"0px\";\n      element.style.borderSpacing = \"0px\";\n      element.style.borderStyle = \"none\";\n      element.style.borderCollapse = \"collapse\";\n      element.style.display = \"block\";\n      element.style.overflow = \"hidden\";\n      element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\n\n      for (var i = 0; i < this.facts.length; i++) {\n        var trElement = document.createElement(\"tr\");\n\n        if (i > 0) {\n          trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\n        } // Title column\n\n\n        var tdElement = document.createElement(\"td\");\n        tdElement.style.padding = \"0\";\n        tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\n\n        if (hostConfig.factSet.title.maxWidth) {\n          tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\n        }\n\n        tdElement.style.verticalAlign = \"top\";\n        var textBlock = new TextBlock();\n        textBlock.setParent(this);\n        textBlock.text = Utils.isNullOrEmpty(this.facts[i].name) ? \"Title\" : this.facts[i].name;\n        textBlock.size = hostConfig.factSet.title.size;\n        textBlock.color = hostConfig.factSet.title.color;\n        textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\n        textBlock.weight = hostConfig.factSet.title.weight;\n        textBlock.wrap = hostConfig.factSet.title.wrap;\n        textBlock.spacing = Enums.Spacing.None;\n        Utils.appendChild(tdElement, textBlock.render());\n        Utils.appendChild(trElement, tdElement); // Spacer column\n\n        tdElement = document.createElement(\"td\");\n        tdElement.style.width = \"10px\";\n        Utils.appendChild(trElement, tdElement); // Value column\n\n        tdElement = document.createElement(\"td\");\n        tdElement.style.padding = \"0\";\n        tdElement.style.verticalAlign = \"top\";\n        tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\n        textBlock = new TextBlock();\n        textBlock.setParent(this);\n        textBlock.text = this.facts[i].value;\n        textBlock.size = hostConfig.factSet.value.size;\n        textBlock.color = hostConfig.factSet.value.color;\n        textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\n        textBlock.weight = hostConfig.factSet.value.weight;\n        textBlock.wrap = hostConfig.factSet.value.wrap;\n        textBlock.spacing = Enums.Spacing.None;\n        Utils.appendChild(tdElement, textBlock.render());\n        Utils.appendChild(trElement, tdElement);\n        Utils.appendChild(element, trElement);\n      }\n    }\n\n    return element;\n  };\n\n  FactSet.prototype.getJsonTypeName = function () {\n    return \"FactSet\";\n  };\n\n  FactSet.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    var facts = [];\n\n    for (var _i = 0, _a = this.facts; _i < _a.length; _i++) {\n      var fact = _a[_i];\n      facts.push(fact.toJSON());\n    }\n\n    Utils.setProperty(result, \"facts\", facts);\n    return result;\n  };\n\n  FactSet.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.facts = [];\n\n    if (json[\"facts\"] != null) {\n      var jsonFacts = json[\"facts\"];\n      this.facts = [];\n\n      for (var i = 0; i < jsonFacts.length; i++) {\n        var fact = new Fact();\n        fact.parse(jsonFacts[i]);\n        this.facts.push(fact);\n      }\n    }\n  };\n\n  return FactSet;\n}(CardElement);\n\nexports.FactSet = FactSet;\n\nvar Image =\n/** @class */\nfunction (_super) {\n  __extends(Image, _super);\n\n  function Image() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.style = Enums.ImageStyle.Default;\n    _this.size = Enums.Size.Auto;\n    _this.pixelWidth = null;\n    _this.pixelHeight = null;\n    _this.altText = \"\";\n    return _this;\n  }\n\n  Image.prototype.parseDimension = function (name, value, errors) {\n    if (value) {\n      if (typeof value === \"string\") {\n        try {\n          var size = Shared.SizeAndUnit.parse(value);\n\n          if (size.unit == Enums.SizeUnit.Pixel) {\n            return size.physicalSize;\n          }\n        } catch (_a) {// Ignore error\n        }\n      }\n\n      raiseParseError({\n        error: Enums.ValidationError.InvalidPropertyValue,\n        message: \"Invalid image \" + name + \": \" + value\n      }, errors);\n    }\n\n    return 0;\n  };\n\n  Image.prototype.applySize = function (element) {\n    if (this.pixelWidth || this.pixelHeight) {\n      if (this.pixelWidth) {\n        element.style.width = this.pixelWidth + \"px\";\n      }\n\n      if (this.pixelHeight) {\n        element.style.height = this.pixelHeight + \"px\";\n      }\n    } else {\n      switch (this.size) {\n        case Enums.Size.Stretch:\n          element.style.width = \"100%\";\n          break;\n\n        case Enums.Size.Auto:\n          element.style.maxWidth = \"100%\";\n          break;\n\n        case Enums.Size.Small:\n          element.style.width = this.hostConfig.imageSizes.small + \"px\";\n          break;\n\n        case Enums.Size.Large:\n          element.style.width = this.hostConfig.imageSizes.large + \"px\";\n          break;\n\n        case Enums.Size.Medium:\n          element.style.width = this.hostConfig.imageSizes.medium + \"px\";\n          break;\n      }\n    }\n  };\n\n  Object.defineProperty(Image.prototype, \"useDefaultSizing\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Image.prototype.internalRender = function () {\n    var _this = this;\n\n    var element = null;\n\n    if (!Utils.isNullOrEmpty(this.url)) {\n      element = document.createElement(\"div\");\n      element.style.display = \"flex\";\n      element.style.alignItems = \"flex-start\";\n\n      element.onkeypress = function (e) {\n        if (_this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) {\n          // enter or space pressed\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this.selectAction.execute();\n        }\n      };\n\n      element.onclick = function (e) {\n        if (_this.selectAction) {\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this.selectAction.execute();\n        }\n      };\n\n      switch (this.horizontalAlignment) {\n        case Enums.HorizontalAlignment.Center:\n          element.style.justifyContent = \"center\";\n          break;\n\n        case Enums.HorizontalAlignment.Right:\n          element.style.justifyContent = \"flex-end\";\n          break;\n\n        default:\n          element.style.justifyContent = \"flex-start\";\n          break;\n      } // Cache hostConfig to avoid walking the parent hierarchy multiple times\n\n\n      var hostConfig = this.hostConfig;\n      var imageElement = document.createElement(\"img\");\n\n      imageElement.onload = function (e) {\n        raiseImageLoadedEvent(_this);\n      };\n\n      imageElement.onerror = function (e) {\n        var card = _this.getRootElement();\n\n        _this.renderedElement.innerHTML = \"\";\n\n        if (card && card.designMode) {\n          var errorElement = document.createElement(\"div\");\n          errorElement.style.display = \"flex\";\n          errorElement.style.alignItems = \"center\";\n          errorElement.style.justifyContent = \"center\";\n          errorElement.style.backgroundColor = \"#EEEEEE\";\n          errorElement.style.color = \"black\";\n          errorElement.innerText = \":-(\";\n          errorElement.style.padding = \"10px\";\n\n          _this.applySize(errorElement);\n\n          _this.renderedElement.appendChild(errorElement);\n        }\n\n        raiseImageLoadedEvent(_this);\n      };\n\n      imageElement.style.maxHeight = \"100%\";\n      imageElement.style.minWidth = \"0\";\n      imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\n\n      if (this.selectAction != null && hostConfig.supportsInteractivity) {\n        imageElement.tabIndex = 0;\n        imageElement.setAttribute(\"role\", \"button\");\n        imageElement.setAttribute(\"aria-label\", this.selectAction.title);\n        imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n      }\n\n      this.applySize(imageElement);\n\n      if (this.style === Enums.ImageStyle.Person) {\n        imageElement.style.borderRadius = \"50%\";\n        imageElement.style.backgroundPosition = \"50% 50%\";\n        imageElement.style.backgroundRepeat = \"no-repeat\";\n      }\n\n      if (!Utils.isNullOrEmpty(this.backgroundColor)) {\n        imageElement.style.backgroundColor = Utils.stringToCssColor(this.backgroundColor);\n      }\n\n      imageElement.src = this.url;\n      imageElement.alt = this.altText;\n      element.appendChild(imageElement);\n    }\n\n    return element;\n  };\n\n  Image.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this._selectAction) {\n      Utils.setProperty(result, \"selectAction\", this._selectAction.toJSON());\n    }\n\n    Utils.setEnumProperty(Enums.ImageStyle, result, \"style\", this.style, Enums.ImageStyle.Default);\n    Utils.setProperty(result, \"backgroundColor\", this.backgroundColor);\n    Utils.setProperty(result, \"url\", this.url);\n    Utils.setEnumProperty(Enums.Size, result, \"size\", this.size, Enums.Size.Auto);\n\n    if (this.pixelWidth) {\n      Utils.setProperty(result, \"width\", this.pixelWidth + \"px\");\n    }\n\n    if (this.pixelHeight) {\n      Utils.setProperty(result, \"height\", this.pixelHeight + \"px\");\n    }\n\n    Utils.setProperty(result, \"altText\", this.altText);\n    return result;\n  };\n\n  Image.prototype.getJsonTypeName = function () {\n    return \"Image\";\n  };\n\n  Image.prototype.getActionById = function (id) {\n    var result = _super.prototype.getActionById.call(this, id);\n\n    if (!result && this.selectAction) {\n      result = this.selectAction.getActionById(id);\n    }\n\n    return result;\n  };\n\n  Image.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.url = Utils.getStringValue(json[\"url\"]);\n    this.backgroundColor = Utils.getStringValue(json[\"backgroundColor\"]);\n    var styleString = Utils.getStringValue(json[\"style\"]);\n\n    if (styleString && styleString.toLowerCase() === \"normal\") {\n      this.style = Enums.ImageStyle.Default;\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The Image.style value \\\"normal\\\" is deprecated and will be removed. Use \\\"default\\\" instead.\"\n      }, errors);\n    } else {\n      this.style = Utils.getEnumValue(Enums.ImageStyle, styleString, this.style);\n    }\n\n    this.size = Utils.getEnumValue(Enums.Size, json[\"size\"], this.size);\n    this.altText = json[\"altText\"]; // pixelWidth and pixelHeight are only parsed for backwards compatibility.\n    // Payloads should use the width and height proerties instead.\n\n    if (json[\"pixelWidth\"] && typeof json[\"pixelWidth\"] === \"number\") {\n      this.pixelWidth = json[\"pixelWidth\"];\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The pixelWidth property is deprecated and will be removed. Use the width property instead.\"\n      }, errors);\n    }\n\n    if (json[\"pixelHeight\"] && typeof json[\"pixelHeight\"] === \"number\") {\n      this.pixelHeight = json[\"pixelHeight\"];\n      raiseParseError({\n        error: Enums.ValidationError.Deprecated,\n        message: \"The pixelHeight property is deprecated and will be removed. Use the height property instead.\"\n      }, errors);\n    }\n\n    var size = this.parseDimension(\"width\", json[\"width\"], errors);\n\n    if (size > 0) {\n      this.pixelWidth = size;\n    }\n\n    size = this.parseDimension(\"height\", json[\"height\"], errors);\n\n    if (size > 0) {\n      this.pixelHeight = size;\n    }\n\n    this.selectAction = createActionInstance(this, json[\"selectAction\"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);\n  };\n\n  Image.prototype.getResourceInformation = function () {\n    if (!Utils.isNullOrEmpty(this.url)) {\n      return [{\n        url: this.url,\n        mimeType: \"image\"\n      }];\n    } else {\n      return [];\n    }\n  };\n\n  Object.defineProperty(Image.prototype, \"selectAction\", {\n    get: function () {\n      return this._selectAction;\n    },\n    set: function (value) {\n      this._selectAction = value;\n\n      if (this._selectAction) {\n        this._selectAction.setParent(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Image;\n}(CardElement);\n\nexports.Image = Image;\n\nvar CardElementContainer =\n/** @class */\nfunction (_super) {\n  __extends(CardElementContainer, _super);\n\n  function CardElementContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._selectAction = null;\n    return _this;\n  }\n\n  CardElementContainer.prototype.isElementAllowed = function (element, forbiddenElementTypes) {\n    if (!this.hostConfig.supportsInteractivity && element.isInteractive) {\n      return false;\n    }\n\n    if (forbiddenElementTypes) {\n      for (var _i = 0, forbiddenElementTypes_1 = forbiddenElementTypes; _i < forbiddenElementTypes_1.length; _i++) {\n        var forbiddenElementType = forbiddenElementTypes_1[_i];\n\n        if (element.getJsonTypeName() === forbiddenElementType) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  CardElementContainer.prototype.applyPadding = function () {\n    _super.prototype.applyPadding.call(this);\n\n    if (!this.renderedElement) {\n      return;\n    }\n\n    var physicalPadding = new Shared.SpacingDefinition();\n\n    if (this.getEffectivePadding()) {\n      physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n    }\n\n    this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n    this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n    this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n    this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n    this.renderedElement.style.marginRight = \"0\";\n    this.renderedElement.style.marginLeft = \"0\";\n  };\n\n  CardElementContainer.prototype.getSelectAction = function () {\n    return this._selectAction;\n  };\n\n  CardElementContainer.prototype.setSelectAction = function (value) {\n    this._selectAction = value;\n\n    if (this._selectAction) {\n      this._selectAction.setParent(this);\n    }\n  };\n\n  Object.defineProperty(CardElementContainer.prototype, \"isSelectable\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CardElementContainer.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    if (this.isSelectable) {\n      this._selectAction = createActionInstance(this, json[\"selectAction\"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);\n    }\n  };\n\n  CardElementContainer.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this._selectAction && this.isSelectable) {\n      Utils.setProperty(result, \"selectAction\", this._selectAction.toJSON());\n    }\n\n    return result;\n  };\n\n  CardElementContainer.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    for (var i = 0; i < this.getItemCount(); i++) {\n      var item = this.getItemAt(i);\n\n      if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\n        context.addFailure(this, {\n          error: Enums.ValidationError.InteractivityNotAllowed,\n          message: \"Interactivity is not allowed.\"\n        });\n      }\n\n      if (!this.isElementAllowed(item, this.getForbiddenElementTypes())) {\n        context.addFailure(this, {\n          error: Enums.ValidationError.InteractivityNotAllowed,\n          message: \"Elements of type \" + item.getJsonTypeName() + \" are not allowed in this container.\"\n        });\n      }\n\n      item.internalValidateProperties(context);\n    }\n\n    if (this._selectAction) {\n      this._selectAction.internalValidateProperties(context);\n    }\n  };\n\n  CardElementContainer.prototype.render = function () {\n    var _this = this;\n\n    var element = _super.prototype.render.call(this);\n\n    var hostConfig = this.hostConfig;\n\n    if (this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {\n      element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n      element.tabIndex = 0;\n      element.setAttribute(\"role\", \"button\");\n      element.setAttribute(\"aria-label\", this._selectAction.title);\n\n      element.onclick = function (e) {\n        if (_this._selectAction != null) {\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this._selectAction.execute();\n        }\n      };\n\n      element.onkeypress = function (e) {\n        if (_this._selectAction != null && (e.keyCode == 13 || e.keyCode == 32)) {\n          // Enter or space pressed\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          _this._selectAction.execute();\n        }\n      };\n    }\n\n    return element;\n  };\n\n  CardElementContainer.prototype.updateLayout = function (processChildren) {\n    if (processChildren === void 0) {\n      processChildren = true;\n    }\n\n    _super.prototype.updateLayout.call(this, processChildren);\n\n    if (processChildren) {\n      for (var i = 0; i < this.getItemCount(); i++) {\n        this.getItemAt(i).updateLayout();\n      }\n    }\n  };\n\n  CardElementContainer.prototype.getAllInputs = function () {\n    var result = [];\n\n    for (var i = 0; i < this.getItemCount(); i++) {\n      result = result.concat(this.getItemAt(i).getAllInputs());\n    }\n\n    return result;\n  };\n\n  CardElementContainer.prototype.getResourceInformation = function () {\n    var result = [];\n\n    for (var i = 0; i < this.getItemCount(); i++) {\n      result = result.concat(this.getItemAt(i).getResourceInformation());\n    }\n\n    return result;\n  };\n\n  CardElementContainer.prototype.getElementById = function (id) {\n    var result = _super.prototype.getElementById.call(this, id);\n\n    if (!result) {\n      for (var i = 0; i < this.getItemCount(); i++) {\n        result = this.getItemAt(i).getElementById(id);\n\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return CardElementContainer;\n}(CardElement);\n\nexports.CardElementContainer = CardElementContainer;\n\nvar ImageSet =\n/** @class */\nfunction (_super) {\n  __extends(ImageSet, _super);\n\n  function ImageSet() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._images = [];\n    _this.imageSize = Enums.Size.Medium;\n    return _this;\n  }\n\n  ImageSet.prototype.internalRender = function () {\n    var element = null;\n\n    if (this._images.length > 0) {\n      element = document.createElement(\"div\");\n      element.style.display = \"flex\";\n      element.style.flexWrap = \"wrap\";\n\n      for (var i = 0; i < this._images.length; i++) {\n        this._images[i].size = this.imageSize;\n\n        var renderedImage = this._images[i].render();\n\n        renderedImage.style.display = \"inline-flex\";\n        renderedImage.style.margin = \"0px\";\n        renderedImage.style.marginRight = \"10px\";\n        renderedImage.style.maxHeight = this.hostConfig.imageSet.maxImageHeight + \"px\";\n        Utils.appendChild(element, renderedImage);\n      }\n    }\n\n    return element;\n  };\n\n  ImageSet.prototype.getItemCount = function () {\n    return this._images.length;\n  };\n\n  ImageSet.prototype.getItemAt = function (index) {\n    return this._images[index];\n  };\n\n  ImageSet.prototype.getFirstVisibleRenderedItem = function () {\n    return this._images && this._images.length > 0 ? this._images[0] : null;\n  };\n\n  ImageSet.prototype.getLastVisibleRenderedItem = function () {\n    return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : null;\n  };\n\n  ImageSet.prototype.removeItem = function (item) {\n    if (item instanceof Image) {\n      var itemIndex = this._images.indexOf(item);\n\n      if (itemIndex >= 0) {\n        this._images.splice(itemIndex, 1);\n\n        item.setParent(null);\n        this.updateLayout();\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ImageSet.prototype.getJsonTypeName = function () {\n    return \"ImageSet\";\n  };\n\n  ImageSet.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setEnumProperty(Enums.Size, result, \"imageSize\", this.imageSize, Enums.Size.Medium);\n\n    if (this._images.length > 0) {\n      var images = [];\n\n      for (var _i = 0, _a = this._images; _i < _a.length; _i++) {\n        var image = _a[_i];\n        images.push(image.toJSON());\n      }\n\n      Utils.setProperty(result, \"images\", images);\n    }\n\n    return result;\n  };\n\n  ImageSet.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.imageSize = Utils.getEnumValue(Enums.Size, json[\"imageSize\"], Enums.Size.Medium);\n\n    if (json[\"images\"] != null) {\n      var jsonImages = json[\"images\"];\n      this._images = [];\n\n      for (var i = 0; i < jsonImages.length; i++) {\n        var image = new Image();\n        image.parse(jsonImages[i], errors);\n        this.addImage(image);\n      }\n    }\n  };\n\n  ImageSet.prototype.addImage = function (image) {\n    if (!image.parent) {\n      this._images.push(image);\n\n      image.setParent(this);\n    } else {\n      throw new Error(\"This image already belongs to another ImageSet\");\n    }\n  };\n\n  ImageSet.prototype.indexOf = function (cardElement) {\n    return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\n  };\n\n  return ImageSet;\n}(CardElementContainer);\n\nexports.ImageSet = ImageSet;\n\nvar MediaSource =\n/** @class */\nfunction () {\n  function MediaSource(url, mimeType) {\n    if (url === void 0) {\n      url = undefined;\n    }\n\n    if (mimeType === void 0) {\n      mimeType = undefined;\n    }\n\n    this.url = url;\n    this.mimeType = mimeType;\n  }\n\n  MediaSource.prototype.parse = function (json, errors) {\n    this.mimeType = Utils.getStringValue(json[\"mimeType\"]);\n    this.url = Utils.getStringValue(json[\"url\"]);\n  };\n\n  MediaSource.prototype.toJSON = function () {\n    return {\n      mimeType: this.mimeType,\n      url: this.url\n    };\n  };\n\n  return MediaSource;\n}();\n\nexports.MediaSource = MediaSource;\n\nvar Media =\n/** @class */\nfunction (_super) {\n  __extends(Media, _super);\n\n  function Media() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.sources = [];\n    return _this;\n  }\n\n  Media.prototype.getPosterUrl = function () {\n    return this.poster ? this.poster : this.hostConfig.media.defaultPoster;\n  };\n\n  Media.prototype.processSources = function () {\n    this._selectedSources = [];\n    this._selectedMediaType = undefined;\n\n    for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {\n      var source = _a[_i];\n      var mimeComponents = source.mimeType.split('/');\n\n      if (mimeComponents.length == 2) {\n        if (!this._selectedMediaType) {\n          var index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);\n\n          if (index >= 0) {\n            this._selectedMediaType = Media.supportedMediaTypes[index];\n          }\n        }\n\n        if (mimeComponents[0] == this._selectedMediaType) {\n          this._selectedSources.push(source);\n        }\n      }\n    }\n  };\n\n  Media.prototype.renderPoster = function () {\n    var _this = this;\n\n    var playButtonArrowWidth = 12;\n    var playButtonArrowHeight = 15;\n    var posterRootElement = document.createElement(\"div\");\n    posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\n    posterRootElement.setAttribute(\"role\", \"contentinfo\");\n    posterRootElement.setAttribute(\"aria-label\", this.altText ? this.altText : \"Media content\");\n    posterRootElement.style.position = \"relative\";\n    posterRootElement.style.display = \"flex\";\n    var posterUrl = this.getPosterUrl();\n\n    if (posterUrl) {\n      var posterImageElement_1 = document.createElement(\"img\");\n      posterImageElement_1.style.width = \"100%\";\n      posterImageElement_1.style.height = \"100%\";\n\n      posterImageElement_1.onerror = function (e) {\n        posterImageElement_1.parentNode.removeChild(posterImageElement_1);\n        posterRootElement.classList.add(\"empty\");\n        posterRootElement.style.minHeight = \"150px\";\n      };\n\n      posterImageElement_1.src = posterUrl;\n      posterRootElement.appendChild(posterImageElement_1);\n    } else {\n      posterRootElement.classList.add(\"empty\");\n      posterRootElement.style.minHeight = \"150px\";\n    }\n\n    if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {\n      var playButtonOuterElement = document.createElement(\"div\");\n      playButtonOuterElement.setAttribute(\"role\", \"button\");\n      playButtonOuterElement.setAttribute(\"aria-label\", \"Play media\");\n      playButtonOuterElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton\");\n      playButtonOuterElement.style.display = \"flex\";\n      playButtonOuterElement.style.alignItems = \"center\";\n      playButtonOuterElement.style.justifyContent = \"center\";\n\n      playButtonOuterElement.onclick = function (e) {\n        if (_this.hostConfig.media.allowInlinePlayback) {\n          e.preventDefault();\n          e.cancelBubble = true;\n\n          var mediaPlayerElement = _this.renderMediaPlayer();\n\n          _this.renderedElement.innerHTML = \"\";\n\n          _this.renderedElement.appendChild(mediaPlayerElement);\n\n          mediaPlayerElement.play();\n        } else {\n          if (Media.onPlay) {\n            e.preventDefault();\n            e.cancelBubble = true;\n            Media.onPlay(_this);\n          }\n        }\n      };\n\n      var playButtonInnerElement = document.createElement(\"div\");\n      playButtonInnerElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton-arrow\");\n      playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\n      playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\n      playButtonInnerElement.style.borderTopWidth = playButtonArrowHeight / 2 + \"px\";\n      playButtonInnerElement.style.borderBottomWidth = playButtonArrowHeight / 2 + \"px\";\n      playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\n      playButtonInnerElement.style.borderRightWidth = \"0\";\n      playButtonInnerElement.style.borderStyle = \"solid\";\n      playButtonInnerElement.style.borderTopColor = \"transparent\";\n      playButtonInnerElement.style.borderRightColor = \"transparent\";\n      playButtonInnerElement.style.borderBottomColor = \"transparent\";\n      playButtonInnerElement.style.transform = \"translate(\" + playButtonArrowWidth / 10 + \"px,0px)\";\n      playButtonOuterElement.appendChild(playButtonInnerElement);\n      var playButtonContainer = document.createElement(\"div\");\n      playButtonContainer.style.position = \"absolute\";\n      playButtonContainer.style.left = \"0\";\n      playButtonContainer.style.top = \"0\";\n      playButtonContainer.style.width = \"100%\";\n      playButtonContainer.style.height = \"100%\";\n      playButtonContainer.style.display = \"flex\";\n      playButtonContainer.style.justifyContent = \"center\";\n      playButtonContainer.style.alignItems = \"center\";\n      playButtonContainer.appendChild(playButtonOuterElement);\n      posterRootElement.appendChild(playButtonContainer);\n    }\n\n    return posterRootElement;\n  };\n\n  Media.prototype.renderMediaPlayer = function () {\n    var mediaElement;\n\n    if (this._selectedMediaType == \"video\") {\n      var videoPlayer = document.createElement(\"video\");\n      var posterUrl = this.getPosterUrl();\n\n      if (posterUrl) {\n        videoPlayer.poster = posterUrl;\n      }\n\n      mediaElement = videoPlayer;\n    } else {\n      mediaElement = document.createElement(\"audio\");\n    }\n\n    mediaElement.controls = true;\n    mediaElement.preload = \"none\";\n    mediaElement.style.width = \"100%\";\n\n    for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {\n      var source = _a[_i];\n      var src = document.createElement(\"source\");\n      src.src = source.url;\n      src.type = source.mimeType;\n      mediaElement.appendChild(src);\n    }\n\n    return mediaElement;\n  };\n\n  Media.prototype.internalRender = function () {\n    var element = document.createElement(\"div\");\n    element.className = this.hostConfig.makeCssClassName(\"ac-media\");\n    this.processSources();\n    element.appendChild(this.renderPoster());\n    return element;\n  };\n\n  Media.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.poster = Utils.getStringValue(json[\"poster\"]);\n    this.altText = Utils.getStringValue(json[\"altText\"]);\n\n    if (json[\"sources\"] != null) {\n      var jsonSources = json[\"sources\"];\n      this.sources = [];\n\n      for (var i = 0; i < jsonSources.length; i++) {\n        var source = new MediaSource();\n        source.parse(jsonSources[i], errors);\n        this.sources.push(source);\n      }\n    }\n  };\n\n  Media.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"poster\", this.poster);\n    Utils.setProperty(result, \"altText\", this.altText);\n\n    if (this.sources.length > 0) {\n      var serializedSources = [];\n\n      for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {\n        var source = _a[_i];\n        serializedSources.push(source.toJSON());\n      }\n\n      Utils.setProperty(result, \"sources\", serializedSources);\n    }\n\n    return result;\n  };\n\n  Media.prototype.getJsonTypeName = function () {\n    return \"Media\";\n  };\n\n  Media.prototype.getResourceInformation = function () {\n    var result = [];\n    var posterUrl = this.getPosterUrl();\n\n    if (!Utils.isNullOrEmpty(posterUrl)) {\n      result.push({\n        url: posterUrl,\n        mimeType: \"image\"\n      });\n    }\n\n    for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {\n      var mediaSource = _a[_i];\n\n      if (!Utils.isNullOrEmpty(mediaSource.url)) {\n        result.push({\n          url: mediaSource.url,\n          mimeType: mediaSource.mimeType\n        });\n      }\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(Media.prototype, \"selectedMediaType\", {\n    get: function () {\n      return this._selectedMediaType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Media.supportedMediaTypes = [\"audio\", \"video\"];\n  return Media;\n}(CardElement);\n\nexports.Media = Media;\n\nvar InputValidationOptions =\n/** @class */\nfunction () {\n  function InputValidationOptions() {\n    this.necessity = Enums.InputValidationNecessity.Optional;\n    this.errorMessage = undefined;\n  }\n\n  InputValidationOptions.prototype.parse = function (json) {\n    this.necessity = Utils.getEnumValue(Enums.InputValidationNecessity, json[\"necessity\"], this.necessity);\n    this.errorMessage = Utils.getStringValue(json[\"errorMessage\"]);\n  };\n\n  InputValidationOptions.prototype.toJSON = function () {\n    if (this.necessity != Enums.InputValidationNecessity.Optional || !Utils.isNullOrEmpty(this.errorMessage)) {\n      var result = {};\n      Utils.setEnumProperty(Enums.InputValidationNecessity, result, \"necessity\", this.necessity, Enums.InputValidationNecessity.Optional);\n      Utils.setProperty(result, \"errorMessage\", this.errorMessage);\n      return result;\n    } else {\n      return null;\n    }\n  };\n\n  return InputValidationOptions;\n}();\n\nexports.InputValidationOptions = InputValidationOptions;\n\nvar Input =\n/** @class */\nfunction (_super) {\n  __extends(Input, _super);\n\n  function Input() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.validation = new InputValidationOptions();\n    return _this;\n  }\n\n  Object.defineProperty(Input.prototype, \"isNullable\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Input.prototype, \"renderedInputControlElement\", {\n    get: function () {\n      return this._renderedInputControlElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Input.prototype, \"inputControlContainerElement\", {\n    get: function () {\n      return this._inputControlContainerElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Input.prototype.overrideInternalRender = function () {\n    var hostConfig = this.hostConfig;\n    this._outerContainerElement = document.createElement(\"div\");\n    this._outerContainerElement.style.display = \"flex\";\n    this._outerContainerElement.style.flexDirection = \"column\";\n    this._inputControlContainerElement = document.createElement(\"div\");\n    this._inputControlContainerElement.className = hostConfig.makeCssClassName(\"ac-input-container\");\n    this._inputControlContainerElement.style.display = \"flex\";\n    this._renderedInputControlElement = this.internalRender();\n    this._renderedInputControlElement.style.minWidth = \"0px\";\n\n    if (this.isNullable && this.validation.necessity == Enums.InputValidationNecessity.RequiredWithVisualCue) {\n      this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName(\"ac-input-required\"));\n    }\n\n    this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\n\n    this._outerContainerElement.appendChild(this._inputControlContainerElement);\n\n    return this._outerContainerElement;\n  };\n\n  Input.prototype.valueChanged = function () {\n    this.resetValidationFailureCue();\n\n    if (this.onValueChanged) {\n      this.onValueChanged(this);\n    }\n\n    raiseInputValueChangedEvent(this);\n  };\n\n  Input.prototype.resetValidationFailureCue = function () {\n    if (AdaptiveCard.useBuiltInInputValidation && this.renderedElement) {\n      this._renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n      if (this._errorMessageElement) {\n        this._outerContainerElement.removeChild(this._errorMessageElement);\n\n        this._errorMessageElement = null;\n      }\n    }\n  };\n\n  Input.prototype.showValidationErrorMessage = function () {\n    if (this.renderedElement && AdaptiveCard.useBuiltInInputValidation && AdaptiveCard.displayInputValidationErrors && !Utils.isNullOrEmpty(this.validation.errorMessage)) {\n      this._errorMessageElement = document.createElement(\"span\");\n      this._errorMessageElement.className = this.hostConfig.makeCssClassName(\"ac-input-validation-error-message\");\n      this._errorMessageElement.textContent = this.validation.errorMessage;\n\n      this._outerContainerElement.appendChild(this._errorMessageElement);\n    }\n  };\n\n  Input.prototype.parseInputValue = function (value) {\n    return value;\n  };\n\n  Input.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"title\", this.title);\n    Utils.setProperty(result, \"value\", this.renderedElement && !Utils.isNullOrEmpty(this.value) ? this.value : this.defaultValue);\n    Utils.setProperty(result, \"validation\", this.validation.toJSON());\n    return result;\n  };\n\n  Input.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (Utils.isNullOrEmpty(this.id)) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"All inputs must have a unique Id\"\n      });\n    }\n  };\n\n  Input.prototype.validateValue = function () {\n    if (AdaptiveCard.useBuiltInInputValidation) {\n      this.resetValidationFailureCue();\n      var result = this.validation.necessity != Enums.InputValidationNecessity.Optional ? !Utils.isNullOrEmpty(this.value) : true;\n\n      if (!result && this.renderedElement) {\n        this._renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n        this.showValidationErrorMessage();\n      }\n\n      return result;\n    } else {\n      return true;\n    }\n  };\n\n  Input.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.id = Utils.getStringValue(json[\"id\"]);\n    this.defaultValue = Utils.getStringValue(json[\"value\"]);\n    var jsonValidation = json[\"validation\"];\n\n    if (jsonValidation) {\n      this.validation.parse(jsonValidation);\n    }\n  };\n\n  Input.prototype.getAllInputs = function () {\n    return [this];\n  };\n\n  Object.defineProperty(Input.prototype, \"defaultValue\", {\n    get: function () {\n      return this._defaultValue;\n    },\n    set: function (value) {\n      this._defaultValue = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Input.prototype, \"isInteractive\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Input;\n}(CardElement);\n\nexports.Input = Input;\n\nvar TextInput =\n/** @class */\nfunction (_super) {\n  __extends(TextInput, _super);\n\n  function TextInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isMultiline = false;\n    _this.style = Enums.InputTextStyle.Text;\n    return _this;\n  }\n\n  TextInput.prototype.internalRender = function () {\n    var _this = this;\n\n    if (this.isMultiline) {\n      var textareaElement = document.createElement(\"textarea\");\n      textareaElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\", \"ac-multiline\");\n      textareaElement.style.flex = \"1 1 auto\";\n      textareaElement.tabIndex = 0;\n\n      if (!Utils.isNullOrEmpty(this.placeholder)) {\n        textareaElement.placeholder = this.placeholder;\n        textareaElement.setAttribute(\"aria-label\", this.placeholder);\n      }\n\n      if (!Utils.isNullOrEmpty(this.defaultValue)) {\n        textareaElement.value = this.defaultValue;\n      }\n\n      if (this.maxLength > 0) {\n        textareaElement.maxLength = this.maxLength;\n      }\n\n      textareaElement.oninput = function () {\n        _this.valueChanged();\n      };\n\n      textareaElement.onkeypress = function (e) {\n        // Ctrl+Enter pressed\n        if (e.keyCode == 10 && _this.inlineAction) {\n          _this.inlineAction.execute();\n        }\n      };\n\n      return textareaElement;\n    } else {\n      var inputElement = document.createElement(\"input\");\n      inputElement.type = Enums.InputTextStyle[this.style].toLowerCase();\n      inputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\n      inputElement.style.flex = \"1 1 auto\";\n      inputElement.tabIndex = 0;\n\n      if (!Utils.isNullOrEmpty(this.placeholder)) {\n        inputElement.placeholder = this.placeholder;\n        inputElement.setAttribute(\"aria-label\", this.placeholder);\n      }\n\n      if (!Utils.isNullOrEmpty(this.defaultValue)) {\n        inputElement.value = this.defaultValue;\n      }\n\n      if (this.maxLength > 0) {\n        inputElement.maxLength = this.maxLength;\n      }\n\n      inputElement.oninput = function () {\n        _this.valueChanged();\n      };\n\n      inputElement.onkeypress = function (e) {\n        // Enter pressed\n        if (e.keyCode == 13 && _this.inlineAction) {\n          _this.inlineAction.execute();\n        }\n      };\n\n      return inputElement;\n    }\n  };\n\n  TextInput.prototype.overrideInternalRender = function () {\n    var _this = this;\n\n    var renderedInputControl = _super.prototype.overrideInternalRender.call(this);\n\n    if (this.inlineAction) {\n      var button_1 = document.createElement(\"button\");\n      button_1.className = this.hostConfig.makeCssClassName(\"ac-inlineActionButton\");\n\n      button_1.onclick = function (e) {\n        e.preventDefault();\n        e.cancelBubble = true;\n\n        _this.inlineAction.execute();\n      };\n\n      if (!Utils.isNullOrEmpty(this.inlineAction.iconUrl)) {\n        button_1.classList.add(\"iconOnly\");\n        var icon_1 = document.createElement(\"img\");\n        icon_1.style.height = \"100%\"; // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\n        // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\n        // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\n        // after the image has loaded and been gicven its final size. The below trick also fixes that.\n\n        icon_1.style.display = \"none\";\n\n        icon_1.onload = function () {\n          icon_1.style.removeProperty(\"display\");\n        };\n\n        icon_1.onerror = function () {\n          button_1.removeChild(icon_1);\n          button_1.classList.remove(\"iconOnly\");\n          button_1.classList.add(\"textOnly\");\n          button_1.textContent = !Utils.isNullOrEmpty(_this.inlineAction.title) ? _this.inlineAction.title : \"Title\";\n        };\n\n        icon_1.src = this.inlineAction.iconUrl;\n        button_1.appendChild(icon_1);\n\n        if (!Utils.isNullOrEmpty(this.inlineAction.title)) {\n          button_1.title = this.inlineAction.title;\n        }\n      } else {\n        button_1.classList.add(\"textOnly\");\n        button_1.textContent = !Utils.isNullOrEmpty(this.inlineAction.title) ? this.inlineAction.title : \"Title\";\n      }\n\n      button_1.style.marginLeft = \"8px\";\n      this.inputControlContainerElement.appendChild(button_1);\n    }\n\n    return renderedInputControl;\n  };\n\n  TextInput.prototype.getJsonTypeName = function () {\n    return \"Input.Text\";\n  };\n\n  TextInput.prototype.getActionById = function (id) {\n    var result = _super.prototype.getActionById.call(this, id);\n\n    if (!result && this.inlineAction) {\n      result = this.inlineAction.getActionById(id);\n    }\n\n    return result;\n  };\n\n  TextInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"placeholder\", this.placeholder);\n    Utils.setProperty(result, \"maxLength\", this.maxLength, 0);\n    Utils.setProperty(result, \"isMultiline\", this.isMultiline, false);\n    Utils.setEnumProperty(Enums.InputTextStyle, result, \"style\", this.style, Enums.InputTextStyle.Text);\n\n    if (this._inlineAction) {\n      Utils.setProperty(result, \"inlineAction\", this._inlineAction.toJSON());\n    }\n\n    return result;\n  };\n\n  TextInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.maxLength = json[\"maxLength\"];\n    this.isMultiline = Utils.getBoolValue(json[\"isMultiline\"], this.isMultiline);\n    this.placeholder = Utils.getStringValue(json[\"placeholder\"]);\n    this.style = Utils.getEnumValue(Enums.InputTextStyle, json[\"style\"], this.style);\n    this.inlineAction = createActionInstance(this, json[\"inlineAction\"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);\n  };\n\n  Object.defineProperty(TextInput.prototype, \"inlineAction\", {\n    get: function () {\n      return this._inlineAction;\n    },\n    set: function (value) {\n      this._inlineAction = value;\n\n      if (this._inlineAction) {\n        this._inlineAction.setParent(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextInput.prototype, \"value\", {\n    get: function () {\n      if (this.renderedInputControlElement) {\n        if (this.isMultiline) {\n          return this.renderedInputControlElement.value;\n        } else {\n          return this.renderedInputControlElement.value;\n        }\n      } else {\n        return null;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TextInput;\n}(Input);\n\nexports.TextInput = TextInput;\n\nvar ToggleInput =\n/** @class */\nfunction (_super) {\n  __extends(ToggleInput, _super);\n\n  function ToggleInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.valueOn = \"true\";\n    _this.valueOff = \"false\";\n    _this.wrap = false;\n    return _this;\n  }\n\n  ToggleInput.prototype.internalRender = function () {\n    var _this = this;\n\n    var element = document.createElement(\"div\");\n    element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\n    element.style.width = \"100%\";\n    element.style.display = \"flex\";\n    element.style.alignItems = \"center\";\n    this._checkboxInputElement = document.createElement(\"input\");\n    this._checkboxInputElement.id = Utils.generateUniqueId();\n    this._checkboxInputElement.type = \"checkbox\";\n    this._checkboxInputElement.style.display = \"inline-block\";\n    this._checkboxInputElement.style.verticalAlign = \"middle\";\n    this._checkboxInputElement.style.margin = \"0\";\n    this._checkboxInputElement.style.flex = \"0 0 auto\";\n\n    this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\n\n    this._checkboxInputElement.tabIndex = 0;\n\n    if (this.defaultValue == this.valueOn) {\n      this._checkboxInputElement.checked = true;\n    }\n\n    this._checkboxInputElement.onchange = function () {\n      _this.valueChanged();\n    };\n\n    Utils.appendChild(element, this._checkboxInputElement);\n\n    if (!Utils.isNullOrEmpty(this.title) || this.isDesignMode()) {\n      var label = new Label();\n      label.setParent(this);\n      label.forElementId = this._checkboxInputElement.id;\n      label.hostConfig = this.hostConfig;\n      label.text = Utils.isNullOrEmpty(this.title) ? this.getJsonTypeName() : this.title;\n      label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;\n      label.wrap = this.wrap;\n      var labelElement = label.render();\n      labelElement.style.display = \"inline-block\";\n      labelElement.style.flex = \"1 1 auto\";\n      labelElement.style.marginLeft = \"6px\";\n      labelElement.style.verticalAlign = \"middle\";\n      var spacerElement = document.createElement(\"div\");\n      spacerElement.style.width = \"6px\";\n      Utils.appendChild(element, spacerElement);\n      Utils.appendChild(element, labelElement);\n    }\n\n    return element;\n  };\n\n  Object.defineProperty(ToggleInput.prototype, \"isNullable\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToggleInput.prototype.getJsonTypeName = function () {\n    return \"Input.Toggle\";\n  };\n\n  ToggleInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"valueOn\", this.valueOn, \"true\");\n    Utils.setProperty(result, \"valueOff\", this.valueOff, \"false\");\n    Utils.setProperty(result, \"wrap\", this.wrap);\n    return result;\n  };\n\n  ToggleInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.title = Utils.getStringValue(json[\"title\"]);\n    this.valueOn = Utils.getStringValue(json[\"valueOn\"], this.valueOn);\n    this.valueOff = Utils.getStringValue(json[\"valueOff\"], this.valueOff);\n    this.wrap = Utils.getBoolValue(json[\"wrap\"], this.wrap);\n  };\n\n  Object.defineProperty(ToggleInput.prototype, \"value\", {\n    get: function () {\n      if (this._checkboxInputElement) {\n        return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\n      } else {\n        return null;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ToggleInput;\n}(Input);\n\nexports.ToggleInput = ToggleInput;\n\nvar Choice =\n/** @class */\nfunction () {\n  function Choice(title, value) {\n    if (title === void 0) {\n      title = undefined;\n    }\n\n    if (value === void 0) {\n      value = undefined;\n    }\n\n    this.title = title;\n    this.value = value;\n  }\n\n  Choice.prototype.parse = function (json) {\n    this.title = Utils.getStringValue(json[\"title\"]);\n    this.value = Utils.getStringValue(json[\"value\"]);\n  };\n\n  Choice.prototype.toJSON = function () {\n    return {\n      title: this.title,\n      value: this.value\n    };\n  };\n\n  return Choice;\n}();\n\nexports.Choice = Choice;\n\nvar ChoiceSetInput =\n/** @class */\nfunction (_super) {\n  __extends(ChoiceSetInput, _super);\n\n  function ChoiceSetInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.choices = [];\n    _this.isCompact = false;\n    _this.isMultiSelect = false;\n    _this.wrap = false;\n    return _this;\n  }\n\n  ChoiceSetInput.getUniqueCategoryName = function () {\n    var uniqueCwtegoryName = \"__ac-category\" + ChoiceSetInput.uniqueCategoryCounter;\n    ChoiceSetInput.uniqueCategoryCounter++;\n    return uniqueCwtegoryName;\n  };\n\n  ChoiceSetInput.prototype.internalRender = function () {\n    var _this = this;\n\n    if (!this.isMultiSelect) {\n      if (this.isCompact) {\n        // Render as a combo box\n        this._selectElement = document.createElement(\"select\");\n        this._selectElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-multichoiceInput\", \"ac-choiceSetInput-compact\");\n        this._selectElement.style.width = \"100%\";\n        var option = document.createElement(\"option\");\n        option.selected = true;\n        option.disabled = true;\n        option.hidden = true;\n        option.value = \"\";\n\n        if (this.placeholder) {\n          option.text = this.placeholder;\n        }\n\n        Utils.appendChild(this._selectElement, option);\n\n        for (var i = 0; i < this.choices.length; i++) {\n          var option_1 = document.createElement(\"option\");\n          option_1.value = this.choices[i].value;\n          option_1.text = this.choices[i].title;\n          option_1.setAttribute(\"aria-label\", this.choices[i].title);\n\n          if (this.choices[i].value == this.defaultValue) {\n            option_1.selected = true;\n          }\n\n          Utils.appendChild(this._selectElement, option_1);\n        }\n\n        this._selectElement.onchange = function () {\n          _this.valueChanged();\n        };\n\n        return this._selectElement;\n      } else {\n        // Render as a series of radio buttons\n        var uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\n        var element = document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-choiceSetInput-expanded\");\n        element.style.width = \"100%\";\n        this._toggleInputs = [];\n\n        for (var i_1 = 0; i_1 < this.choices.length; i_1++) {\n          var radioInput = document.createElement(\"input\");\n          radioInput.id = Utils.generateUniqueId();\n          radioInput.type = \"radio\";\n          radioInput.style.margin = \"0\";\n          radioInput.style.display = \"inline-block\";\n          radioInput.style.verticalAlign = \"middle\";\n          radioInput.name = Utils.isNullOrEmpty(this.id) ? uniqueCategoryName : this.id;\n          radioInput.value = this.choices[i_1].value;\n          radioInput.style.flex = \"0 0 auto\";\n          radioInput.setAttribute(\"aria-label\", this.choices[i_1].title);\n\n          if (this.choices[i_1].value == this.defaultValue) {\n            radioInput.checked = true;\n          }\n\n          radioInput.onchange = function () {\n            _this.valueChanged();\n          };\n\n          this._toggleInputs.push(radioInput);\n\n          var label = new Label();\n          label.setParent(this);\n          label.forElementId = radioInput.id;\n          label.hostConfig = this.hostConfig;\n          label.text = Utils.isNullOrEmpty(this.choices[i_1].title) ? \"Choice \" + i_1 : this.choices[i_1].title;\n          label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;\n          label.wrap = this.wrap;\n          var labelElement = label.render();\n          labelElement.style.display = \"inline-block\";\n          labelElement.style.flex = \"1 1 auto\";\n          labelElement.style.marginLeft = \"6px\";\n          labelElement.style.verticalAlign = \"middle\";\n          var spacerElement = document.createElement(\"div\");\n          spacerElement.style.width = \"6px\";\n          var compoundInput = document.createElement(\"div\");\n          compoundInput.style.display = \"flex\";\n          compoundInput.style.alignItems = \"center\";\n          Utils.appendChild(compoundInput, radioInput);\n          Utils.appendChild(compoundInput, spacerElement);\n          Utils.appendChild(compoundInput, labelElement);\n          Utils.appendChild(element, compoundInput);\n        }\n\n        return element;\n      }\n    } else {\n      // Render as a list of toggle inputs\n      var defaultValues = this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : null;\n      var element = document.createElement(\"div\");\n      element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-choiceSetInput-multiSelect\");\n      element.style.width = \"100%\";\n      this._toggleInputs = [];\n\n      for (var i_2 = 0; i_2 < this.choices.length; i_2++) {\n        var checkboxInput = document.createElement(\"input\");\n        checkboxInput.id = Utils.generateUniqueId();\n        checkboxInput.type = \"checkbox\";\n        checkboxInput.style.margin = \"0\";\n        checkboxInput.style.display = \"inline-block\";\n        checkboxInput.style.verticalAlign = \"middle\";\n        checkboxInput.value = this.choices[i_2].value;\n        checkboxInput.style.flex = \"0 0 auto\";\n        checkboxInput.setAttribute(\"aria-label\", this.choices[i_2].title);\n\n        if (defaultValues) {\n          if (defaultValues.indexOf(this.choices[i_2].value) >= 0) {\n            checkboxInput.checked = true;\n          }\n        }\n\n        checkboxInput.onchange = function () {\n          _this.valueChanged();\n        };\n\n        this._toggleInputs.push(checkboxInput);\n\n        var label = new Label();\n        label.setParent(this);\n        label.forElementId = checkboxInput.id;\n        label.hostConfig = this.hostConfig;\n        label.text = Utils.isNullOrEmpty(this.choices[i_2].title) ? \"Choice \" + i_2 : this.choices[i_2].title;\n        label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;\n        label.wrap = this.wrap;\n        var labelElement = label.render();\n        labelElement.style.display = \"inline-block\";\n        labelElement.style.flex = \"1 1 auto\";\n        labelElement.style.marginLeft = \"6px\";\n        labelElement.style.verticalAlign = \"middle\";\n        var spacerElement = document.createElement(\"div\");\n        spacerElement.style.width = \"6px\";\n        var compoundInput = document.createElement(\"div\");\n        compoundInput.style.display = \"flex\";\n        compoundInput.style.alignItems = \"center\";\n        Utils.appendChild(compoundInput, checkboxInput);\n        Utils.appendChild(compoundInput, spacerElement);\n        Utils.appendChild(compoundInput, labelElement);\n        Utils.appendChild(element, compoundInput);\n      }\n\n      return element;\n    }\n  };\n\n  ChoiceSetInput.prototype.getJsonTypeName = function () {\n    return \"Input.ChoiceSet\";\n  };\n\n  ChoiceSetInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"placeholder\", this.placeholder);\n\n    if (this.choices.length > 0) {\n      var choices = [];\n\n      for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {\n        var choice = _a[_i];\n        choices.push(choice.toJSON());\n      }\n\n      Utils.setProperty(result, \"choices\", choices);\n    }\n\n    if (!this.isCompact) {\n      Utils.setProperty(result, \"style\", \"expanded\", false);\n    }\n\n    Utils.setProperty(result, \"isMultiSelect\", this.isMultiSelect, false);\n    Utils.setProperty(result, \"wrap\", this.wrap, false);\n    return result;\n  };\n\n  ChoiceSetInput.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (this.choices.length == 0) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.CollectionCantBeEmpty,\n        message: \"An Input.ChoiceSet must have at least one choice defined.\"\n      });\n    }\n\n    for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {\n      var choice = _a[_i];\n\n      if (!choice.title || !choice.value) {\n        context.addFailure(this, {\n          error: Enums.ValidationError.PropertyCantBeNull,\n          message: \"All choices in an Input.ChoiceSet must have their title and value properties set.\"\n        });\n      }\n    }\n  };\n\n  ChoiceSetInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.isCompact = !(json[\"style\"] === \"expanded\");\n    this.isMultiSelect = Utils.getBoolValue(json[\"isMultiSelect\"], this.isMultiSelect);\n    this.placeholder = Utils.getStringValue(json[\"placeholder\"]);\n    this.choices = [];\n\n    if (json[\"choices\"] != undefined) {\n      var choiceArray = json[\"choices\"];\n\n      for (var i = 0; i < choiceArray.length; i++) {\n        var choice = new Choice();\n        choice.parse(choiceArray[i]);\n        this.choices.push(choice);\n      }\n    }\n\n    this.wrap = Utils.getBoolValue(json[\"wrap\"], this.wrap);\n  };\n\n  Object.defineProperty(ChoiceSetInput.prototype, \"value\", {\n    get: function () {\n      if (!this.isMultiSelect) {\n        if (this.isCompact) {\n          if (this._selectElement) {\n            return this._selectElement.selectedIndex > 0 ? this._selectElement.value : null;\n          }\n\n          return null;\n        } else {\n          if (!this._toggleInputs || this._toggleInputs.length == 0) {\n            return null;\n          }\n\n          for (var i = 0; i < this._toggleInputs.length; i++) {\n            if (this._toggleInputs[i].checked) {\n              return this._toggleInputs[i].value;\n            }\n          }\n\n          return null;\n        }\n      } else {\n        if (!this._toggleInputs || this._toggleInputs.length == 0) {\n          return null;\n        }\n\n        var result = \"\";\n\n        for (var i = 0; i < this._toggleInputs.length; i++) {\n          if (this._toggleInputs[i].checked) {\n            if (result != \"\") {\n              result += this.hostConfig.choiceSetInputValueSeparator;\n            }\n\n            result += this._toggleInputs[i].value;\n          }\n        }\n\n        return result == \"\" ? null : result;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ChoiceSetInput.uniqueCategoryCounter = 0;\n  return ChoiceSetInput;\n}(Input);\n\nexports.ChoiceSetInput = ChoiceSetInput;\n\nvar NumberInput =\n/** @class */\nfunction (_super) {\n  __extends(NumberInput, _super);\n\n  function NumberInput() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NumberInput.prototype.internalRender = function () {\n    var _this = this;\n\n    this._numberInputElement = document.createElement(\"input\");\n\n    this._numberInputElement.setAttribute(\"type\", \"number\");\n\n    this._numberInputElement.setAttribute(\"min\", this.min);\n\n    this._numberInputElement.setAttribute(\"max\", this.max);\n\n    this._numberInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-numberInput\");\n    this._numberInputElement.style.width = \"100%\";\n    this._numberInputElement.tabIndex = 0;\n\n    if (!Utils.isNullOrEmpty(this.defaultValue)) {\n      this._numberInputElement.value = this.defaultValue;\n    }\n\n    if (!Utils.isNullOrEmpty(this.placeholder)) {\n      this._numberInputElement.placeholder = this.placeholder;\n\n      this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\n    }\n\n    this._numberInputElement.oninput = function () {\n      _this.valueChanged();\n    };\n\n    return this._numberInputElement;\n  };\n\n  NumberInput.prototype.getJsonTypeName = function () {\n    return \"Input.Number\";\n  };\n\n  NumberInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"placeholder\", this.placeholder);\n    Utils.setProperty(result, \"min\", this.min);\n    Utils.setProperty(result, \"max\", this.max);\n    return result;\n  };\n\n  NumberInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.placeholder = Utils.getStringValue(json[\"placeholder\"]);\n    this.min = Utils.getStringValue(json[\"min\"]);\n    this.max = Utils.getStringValue(json[\"max\"]);\n  };\n\n  Object.defineProperty(NumberInput.prototype, \"min\", {\n    get: function () {\n      return this._min;\n    },\n    set: function (value) {\n      this._min = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberInput.prototype, \"max\", {\n    get: function () {\n      return this._max;\n    },\n    set: function (value) {\n      this._max = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberInput.prototype, \"value\", {\n    get: function () {\n      return this._numberInputElement ? this._numberInputElement.value : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return NumberInput;\n}(Input);\n\nexports.NumberInput = NumberInput;\n\nvar DateInput =\n/** @class */\nfunction (_super) {\n  __extends(DateInput, _super);\n\n  function DateInput() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DateInput.prototype.internalRender = function () {\n    var _this = this;\n\n    this._dateInputElement = document.createElement(\"input\");\n\n    this._dateInputElement.setAttribute(\"type\", \"date\");\n\n    this._dateInputElement.setAttribute(\"min\", this.min);\n\n    this._dateInputElement.setAttribute(\"max\", this.max);\n\n    this._dateInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-dateInput\");\n    this._dateInputElement.style.width = \"100%\";\n\n    this._dateInputElement.oninput = function () {\n      _this.valueChanged();\n    };\n\n    if (!Utils.isNullOrEmpty(this.defaultValue)) {\n      this._dateInputElement.value = this.defaultValue;\n    }\n\n    return this._dateInputElement;\n  };\n\n  DateInput.prototype.getJsonTypeName = function () {\n    return \"Input.Date\";\n  };\n\n  DateInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"min\", this.min);\n    Utils.setProperty(result, \"max\", this.max);\n    return result;\n  };\n\n  DateInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.min = Utils.getStringValue(json[\"min\"]);\n    this.max = Utils.getStringValue(json[\"max\"]);\n  };\n\n  Object.defineProperty(DateInput.prototype, \"min\", {\n    get: function () {\n      return this._min;\n    },\n    set: function (value) {\n      this._min = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"max\", {\n    get: function () {\n      return this._max;\n    },\n    set: function (value) {\n      this._max = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateInput.prototype, \"value\", {\n    get: function () {\n      return this._dateInputElement ? this._dateInputElement.value : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateInput;\n}(Input);\n\nexports.DateInput = DateInput;\n\nvar TimeInput =\n/** @class */\nfunction (_super) {\n  __extends(TimeInput, _super);\n\n  function TimeInput() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeInput.prototype.internalRender = function () {\n    var _this = this;\n\n    this._timeInputElement = document.createElement(\"input\");\n\n    this._timeInputElement.setAttribute(\"type\", \"time\");\n\n    this._timeInputElement.setAttribute(\"min\", this.min);\n\n    this._timeInputElement.setAttribute(\"max\", this.max);\n\n    this._timeInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-timeInput\");\n    this._timeInputElement.style.width = \"100%\";\n\n    this._timeInputElement.oninput = function () {\n      _this.valueChanged();\n    };\n\n    if (!Utils.isNullOrEmpty(this.defaultValue)) {\n      this._timeInputElement.value = this.defaultValue;\n    }\n\n    return this._timeInputElement;\n  };\n\n  TimeInput.prototype.parseInputValue = function (value) {\n    if (/^[0-9]{2}:[0-9]{2}$/.test(value)) {\n      return value;\n    } else {\n      return null;\n    }\n  };\n\n  TimeInput.prototype.getJsonTypeName = function () {\n    return \"Input.Time\";\n  };\n\n  TimeInput.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"min\", this.min);\n    Utils.setProperty(result, \"max\", this.max);\n    return result;\n  };\n\n  TimeInput.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.min = Utils.getStringValue(json[\"min\"]);\n    this.max = Utils.getStringValue(json[\"max\"]);\n  };\n\n  Object.defineProperty(TimeInput.prototype, \"min\", {\n    get: function () {\n      return this._min;\n    },\n    set: function (value) {\n      this._min = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeInput.prototype, \"max\", {\n    get: function () {\n      return this._max;\n    },\n    set: function (value) {\n      this._max = this.parseInputValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimeInput.prototype, \"value\", {\n    get: function () {\n      return this._timeInputElement ? this._timeInputElement.value : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TimeInput;\n}(Input);\n\nexports.TimeInput = TimeInput;\nvar ActionButtonState;\n\n(function (ActionButtonState) {\n  ActionButtonState[ActionButtonState[\"Normal\"] = 0] = \"Normal\";\n  ActionButtonState[ActionButtonState[\"Expanded\"] = 1] = \"Expanded\";\n  ActionButtonState[ActionButtonState[\"Subdued\"] = 2] = \"Subdued\";\n})(ActionButtonState || (ActionButtonState = {}));\n\nvar ActionButton =\n/** @class */\nfunction () {\n  function ActionButton(action, parentContainerStyle) {\n    this._state = ActionButtonState.Normal;\n    this.onClick = null;\n    this.action = action;\n    this._parentContainerStyle = parentContainerStyle;\n  }\n\n  ActionButton.prototype.updateCssStyle = function () {\n    var _a, _b;\n\n    var hostConfig = this.action.parent.hostConfig;\n    this.action.renderedElement.className = hostConfig.makeCssClassName(\"ac-pushButton\");\n\n    if (!Utils.isNullOrEmpty(this._parentContainerStyle)) {\n      this.action.renderedElement.classList.add(\"style-\" + this._parentContainerStyle);\n    }\n\n    if (this.action instanceof ShowCardAction) {\n      this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expandable\"));\n    }\n\n    this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"expanded\"));\n    this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"subdued\"));\n\n    switch (this._state) {\n      case ActionButtonState.Expanded:\n        this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\n        break;\n\n      case ActionButtonState.Subdued:\n        this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\n        break;\n    }\n\n    if (!Utils.isNullOrEmpty(this.action.style)) {\n      if (this.action.style === Enums.ActionStyle.Positive) {\n        (_a = this.action.renderedElement.classList).add.apply(_a, hostConfig.makeCssClassNames(\"primary\", \"style-positive\"));\n      } else {\n        (_b = this.action.renderedElement.classList).add.apply(_b, hostConfig.makeCssClassNames(\"style-\" + this.action.style.toLowerCase()));\n      }\n    }\n  };\n\n  ActionButton.prototype.render = function (alignment) {\n    var _this = this;\n\n    this.action.render();\n    this.action.renderedElement.style.flex = alignment === Enums.ActionAlignment.Stretch ? \"0 1 100%\" : \"0 1 auto\";\n\n    this.action.renderedElement.onclick = function (e) {\n      e.preventDefault();\n      e.cancelBubble = true;\n\n      _this.click();\n    };\n\n    this.updateCssStyle();\n  };\n\n  ActionButton.prototype.click = function () {\n    if (this.onClick != null) {\n      this.onClick(this);\n    }\n  };\n\n  Object.defineProperty(ActionButton.prototype, \"state\", {\n    get: function () {\n      return this._state;\n    },\n    set: function (value) {\n      this._state = value;\n      this.updateCssStyle();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ActionButton;\n}();\n\nvar Action =\n/** @class */\nfunction (_super) {\n  __extends(Action, _super);\n\n  function Action() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._shouldFallback = false;\n    _this._parent = null;\n    _this._actionCollection = null; // hold the reference to its action collection\n\n    _this._renderedElement = null;\n    _this.requires = new HostConfig.HostCapabilities();\n    _this.style = Enums.ActionStyle.Default;\n    return _this;\n  }\n\n  Action.prototype.setCollection = function (actionCollection) {\n    this._actionCollection = actionCollection;\n  };\n\n  Action.prototype.addCssClasses = function (element) {// Do nothing in base implementation\n  };\n\n  Action.prototype.internalGetReferencedInputs = function (allInputs) {\n    return {};\n  };\n\n  Action.prototype.internalPrepareForExecution = function (inputs) {// Do nothing in base implementation\n  };\n\n  Action.prototype.internalValidateInputs = function (referencedInputs) {\n    var result = [];\n\n    if (AdaptiveCard.useBuiltInInputValidation && !this.ignoreInputValidation) {\n      for (var _i = 0, _a = Object.keys(referencedInputs); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var input = referencedInputs[key];\n\n        if (!input.validateValue()) {\n          result.push(input);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  Action.prototype.getHref = function () {\n    return \"\";\n  };\n\n  Action.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"type\", this.getJsonTypeName());\n    Utils.setProperty(result, \"title\", this.title);\n    Utils.setProperty(result, \"iconUrl\", this.iconUrl);\n    Utils.setProperty(result, \"style\", this.style, Enums.ActionStyle.Default);\n    return result;\n  };\n\n  Action.prototype.render = function (baseCssClass) {\n    if (baseCssClass === void 0) {\n      baseCssClass = \"ac-pushButton\";\n    } // Cache hostConfig for perf\n\n\n    var hostConfig = this.parent.hostConfig;\n    var buttonElement = document.createElement(\"button\");\n    this.addCssClasses(buttonElement);\n    buttonElement.setAttribute(\"aria-label\", this.title);\n    buttonElement.type = \"button\";\n    buttonElement.style.display = \"flex\";\n    buttonElement.style.alignItems = \"center\";\n    buttonElement.style.justifyContent = \"center\";\n    var hasTitle = !Utils.isNullOrEmpty(this.title);\n    var titleElement = document.createElement(\"div\");\n    titleElement.style.overflow = \"hidden\";\n    titleElement.style.textOverflow = \"ellipsis\";\n\n    if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {\n      titleElement.style.whiteSpace = \"nowrap\";\n    }\n\n    if (hasTitle) {\n      titleElement.innerText = this.title;\n    }\n\n    if (Utils.isNullOrEmpty(this.iconUrl)) {\n      buttonElement.classList.add(\"noIcon\");\n      buttonElement.appendChild(titleElement);\n    } else {\n      var iconElement = document.createElement(\"img\");\n      iconElement.src = this.iconUrl;\n      iconElement.style.width = hostConfig.actions.iconSize + \"px\";\n      iconElement.style.height = hostConfig.actions.iconSize + \"px\";\n      iconElement.style.flex = \"0 0 auto\";\n\n      if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {\n        buttonElement.classList.add(\"iconAbove\");\n        buttonElement.style.flexDirection = \"column\";\n\n        if (hasTitle) {\n          iconElement.style.marginBottom = \"4px\";\n        }\n      } else {\n        buttonElement.classList.add(\"iconLeft\");\n\n        if (hasTitle) {\n          iconElement.style.marginRight = \"4px\";\n        }\n      }\n\n      buttonElement.appendChild(iconElement);\n      buttonElement.appendChild(titleElement);\n    }\n\n    this._renderedElement = buttonElement;\n  };\n\n  Action.prototype.setParent = function (value) {\n    this._parent = value;\n  };\n\n  Action.prototype.execute = function () {\n    if (this.onExecute) {\n      this.onExecute(this);\n    }\n\n    raiseExecuteActionEvent(this);\n  };\n\n  Action.prototype.prepareForExecution = function () {\n    var referencedInputs = this.getReferencedInputs();\n\n    if (this.internalValidateInputs(referencedInputs).length > 0) {\n      return false;\n    }\n\n    this.internalPrepareForExecution(referencedInputs);\n    return true;\n  };\n\n  ;\n\n  Action.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    raiseParseActionEvent(this, json, errors);\n    this.requires.parse(json[\"requires\"], errors);\n\n    if (!json[\"title\"] && json[\"title\"] !== \"\") {\n      raiseParseError({\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"Actions should always have a title.\"\n      }, errors);\n    }\n\n    this.title = Utils.getStringValue(json[\"title\"]);\n    this.iconUrl = Utils.getStringValue(json[\"iconUrl\"]);\n    this.style = Utils.getStringValue(json[\"style\"], this.style);\n  };\n\n  Action.prototype.remove = function () {\n    if (this._actionCollection) {\n      return this._actionCollection.removeAction(this);\n    }\n\n    return false;\n  };\n\n  Action.prototype.getAllInputs = function () {\n    return [];\n  };\n\n  Action.prototype.getResourceInformation = function () {\n    if (!Utils.isNullOrEmpty(this.iconUrl)) {\n      return [{\n        url: this.iconUrl,\n        mimeType: \"image\"\n      }];\n    } else {\n      return [];\n    }\n  };\n\n  Action.prototype.getActionById = function (id) {\n    if (this.id == id) {\n      return this;\n    }\n  };\n\n  Action.prototype.getReferencedInputs = function () {\n    return this.internalGetReferencedInputs(this.parent.getRootElement().getAllInputs());\n  };\n\n  Action.prototype.validateInputs = function () {\n    return this.internalValidateInputs(this.getReferencedInputs());\n  };\n\n  Action.prototype.shouldFallback = function () {\n    return this._shouldFallback || !this.requires.areAllMet(this.parent.hostConfig.hostCapabilities);\n  };\n\n  Object.defineProperty(Action.prototype, \"isPrimary\", {\n    get: function () {\n      return this.style == Enums.ActionStyle.Positive;\n    },\n    set: function (value) {\n      if (value) {\n        this.style = Enums.ActionStyle.Positive;\n      } else {\n        if (this.style == Enums.ActionStyle.Positive) {\n          this.style = Enums.ActionStyle.Default;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Action.prototype, \"ignoreInputValidation\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Action.prototype, \"parent\", {\n    get: function () {\n      return this._parent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Action.prototype, \"renderedElement\", {\n    get: function () {\n      return this._renderedElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Action;\n}(CardObject);\n\nexports.Action = Action;\n\nvar SubmitAction =\n/** @class */\nfunction (_super) {\n  __extends(SubmitAction, _super);\n\n  function SubmitAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._isPrepared = false;\n    _this._ignoreInputValidation = false;\n    return _this;\n  }\n\n  SubmitAction.prototype.internalGetReferencedInputs = function (allInputs) {\n    var result = {};\n\n    for (var _i = 0, allInputs_1 = allInputs; _i < allInputs_1.length; _i++) {\n      var input = allInputs_1[_i];\n      result[input.id] = input;\n    }\n\n    return result;\n  };\n\n  SubmitAction.prototype.internalPrepareForExecution = function (inputs) {\n    if (this._originalData) {\n      this._processedData = JSON.parse(JSON.stringify(this._originalData));\n    } else {\n      this._processedData = {};\n    }\n\n    for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var input = inputs[key];\n\n      if (input.value != null) {\n        this._processedData[input.id] = input.value;\n      }\n    }\n\n    this._isPrepared = true;\n  };\n\n  SubmitAction.prototype.getJsonTypeName = function () {\n    return SubmitAction.JsonTypeName;\n  };\n\n  SubmitAction.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"ignoreInputValidation\", this.ignoreInputValidation, false);\n    Utils.setProperty(result, \"data\", this._originalData);\n    return result;\n  };\n\n  SubmitAction.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this._ignoreInputValidation = Utils.getBoolValue(json[\"ignoreInputValidation\"], this._ignoreInputValidation);\n    this.data = json[\"data\"];\n  };\n\n  Object.defineProperty(SubmitAction.prototype, \"ignoreInputValidation\", {\n    get: function () {\n      return this._ignoreInputValidation;\n    },\n    set: function (value) {\n      this._ignoreInputValidation = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SubmitAction.prototype, \"data\", {\n    get: function () {\n      return this._isPrepared ? this._processedData : this._originalData;\n    },\n    set: function (value) {\n      this._originalData = value;\n      this._isPrepared = false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SubmitAction.JsonTypeName = \"Action.Submit\";\n  return SubmitAction;\n}(Action);\n\nexports.SubmitAction = SubmitAction;\n\nvar OpenUrlAction =\n/** @class */\nfunction (_super) {\n  __extends(OpenUrlAction, _super);\n\n  function OpenUrlAction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OpenUrlAction.prototype.getJsonTypeName = function () {\n    return OpenUrlAction.JsonTypeName;\n  };\n\n  OpenUrlAction.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"url\", this.url);\n    return result;\n  };\n\n  OpenUrlAction.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (Utils.isNullOrEmpty(this.url)) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"An Action.OpenUrl must have its url property set.\"\n      });\n    }\n  };\n\n  OpenUrlAction.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.url = Utils.getStringValue(json[\"url\"]);\n  };\n\n  OpenUrlAction.prototype.getHref = function () {\n    return this.url;\n  };\n\n  OpenUrlAction.JsonTypeName = \"Action.OpenUrl\";\n  return OpenUrlAction;\n}(Action);\n\nexports.OpenUrlAction = OpenUrlAction;\n\nvar ToggleVisibilityAction =\n/** @class */\nfunction (_super) {\n  __extends(ToggleVisibilityAction, _super);\n\n  function ToggleVisibilityAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.targetElements = {};\n    return _this;\n  }\n\n  ToggleVisibilityAction.prototype.getJsonTypeName = function () {\n    return ToggleVisibilityAction.JsonTypeName;\n  };\n\n  ToggleVisibilityAction.prototype.execute = function () {\n    for (var _i = 0, _a = Object.keys(this.targetElements); _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      var targetElement = this.parent.getRootElement().getElementById(elementId);\n\n      if (targetElement) {\n        if (typeof this.targetElements[elementId] === \"boolean\") {\n          targetElement.isVisible = this.targetElements[elementId];\n        } else {\n          targetElement.isVisible = !targetElement.isVisible;\n        }\n      }\n    }\n  };\n\n  ToggleVisibilityAction.prototype.parse = function (json) {\n    _super.prototype.parse.call(this, json);\n\n    this.targetElements = {};\n    var jsonTargetElements = json[\"targetElements\"];\n\n    if (jsonTargetElements && Array.isArray(jsonTargetElements)) {\n      for (var _i = 0, jsonTargetElements_1 = jsonTargetElements; _i < jsonTargetElements_1.length; _i++) {\n        var item = jsonTargetElements_1[_i];\n\n        if (typeof item === \"string\") {\n          this.targetElements[item] = undefined;\n        } else if (typeof item === \"object\") {\n          var jsonElementId = item[\"elementId\"];\n\n          if (jsonElementId && typeof jsonElementId === \"string\") {\n            this.targetElements[jsonElementId] = Utils.getBoolValue(item[\"isVisible\"], undefined);\n          }\n        }\n      }\n    }\n  };\n\n  ToggleVisibilityAction.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    var targetElements = [];\n\n    for (var _i = 0, _a = Object.keys(this.targetElements); _i < _a.length; _i++) {\n      var id = _a[_i];\n\n      if (typeof this.targetElements[id] === \"boolean\") {\n        targetElements.push({\n          elementId: id,\n          isVisible: this.targetElements[id]\n        });\n      } else {\n        targetElements.push(id);\n      }\n    }\n\n    result[\"targetElements\"] = targetElements;\n    return result;\n  };\n\n  ToggleVisibilityAction.prototype.addTargetElement = function (elementId, isVisible) {\n    if (isVisible === void 0) {\n      isVisible = undefined;\n    }\n\n    this.targetElements[elementId] = isVisible;\n  };\n\n  ToggleVisibilityAction.prototype.removeTargetElement = function (elementId) {\n    delete this.targetElements[elementId];\n  };\n\n  ToggleVisibilityAction.JsonTypeName = \"Action.ToggleVisibility\";\n  return ToggleVisibilityAction;\n}(Action);\n\nexports.ToggleVisibilityAction = ToggleVisibilityAction;\n\nvar HttpHeader =\n/** @class */\nfunction () {\n  function HttpHeader(name, value) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    if (value === void 0) {\n      value = \"\";\n    }\n\n    this._value = new Shared.StringWithSubstitutions();\n    this.name = name;\n    this.value = value;\n  }\n\n  HttpHeader.prototype.parse = function (json) {\n    this.name = Utils.getStringValue(json[\"name\"]);\n    this.value = Utils.getStringValue(json[\"value\"]);\n  };\n\n  HttpHeader.prototype.toJSON = function () {\n    return {\n      name: this.name,\n      value: this._value.getOriginal()\n    };\n  };\n\n  HttpHeader.prototype.getReferencedInputs = function (inputs, referencedInputs) {\n    this._value.getReferencedInputs(inputs, referencedInputs);\n  };\n\n  HttpHeader.prototype.prepareForExecution = function (inputs) {\n    this._value.substituteInputValues(inputs, Shared.ContentTypes.applicationXWwwFormUrlencoded);\n  };\n\n  Object.defineProperty(HttpHeader.prototype, \"value\", {\n    get: function () {\n      return this._value.get();\n    },\n    set: function (newValue) {\n      this._value.set(newValue);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return HttpHeader;\n}();\n\nexports.HttpHeader = HttpHeader;\n\nvar HttpAction =\n/** @class */\nfunction (_super) {\n  __extends(HttpAction, _super);\n\n  function HttpAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._url = new Shared.StringWithSubstitutions();\n    _this._body = new Shared.StringWithSubstitutions();\n    _this._headers = [];\n    _this._ignoreInputValidation = false;\n    return _this;\n  }\n\n  HttpAction.prototype.internalGetReferencedInputs = function (allInputs) {\n    var result = {};\n\n    this._url.getReferencedInputs(allInputs, result);\n\n    for (var _i = 0, _a = this._headers; _i < _a.length; _i++) {\n      var header = _a[_i];\n      header.getReferencedInputs(allInputs, result);\n    }\n\n    this._body.getReferencedInputs(allInputs, result);\n\n    return result;\n  };\n\n  HttpAction.prototype.internalPrepareForExecution = function (inputs) {\n    this._url.substituteInputValues(inputs, Shared.ContentTypes.applicationXWwwFormUrlencoded);\n\n    var contentType = Shared.ContentTypes.applicationJson;\n\n    for (var _i = 0, _a = this._headers; _i < _a.length; _i++) {\n      var header = _a[_i];\n      header.prepareForExecution(inputs);\n\n      if (header.name && header.name.toLowerCase() == \"content-type\") {\n        contentType = header.value;\n      }\n    }\n\n    this._body.substituteInputValues(inputs, contentType);\n  };\n\n  ;\n\n  HttpAction.prototype.getJsonTypeName = function () {\n    return HttpAction.JsonTypeName;\n  };\n\n  HttpAction.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"method\", this.method);\n    Utils.setProperty(result, \"url\", this._url.getOriginal());\n    Utils.setProperty(result, \"body\", this._body.getOriginal());\n    Utils.setProperty(result, \"ignoreInputValidation\", this.ignoreInputValidation, false);\n\n    if (this._headers.length > 0) {\n      var headers = [];\n\n      for (var _i = 0, _a = this._headers; _i < _a.length; _i++) {\n        var header = _a[_i];\n        headers.push(header.toJSON());\n      }\n\n      Utils.setProperty(result, \"headers\", headers);\n    }\n\n    return result;\n  };\n\n  HttpAction.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (Utils.isNullOrEmpty(this.url)) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"An Action.Http must have its url property set.\"\n      });\n    }\n\n    if (this.headers.length > 0) {\n      for (var _i = 0, _a = this.headers; _i < _a.length; _i++) {\n        var header = _a[_i];\n\n        if (!header.name) {\n          context.addFailure(this, {\n            error: Enums.ValidationError.PropertyCantBeNull,\n            message: \"All headers of an Action.Http must have their name and value properties set.\"\n          });\n        }\n      }\n    }\n  };\n\n  HttpAction.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.url = Utils.getStringValue(json[\"url\"]);\n    this.method = Utils.getStringValue(json[\"method\"]);\n    this.body = Utils.getStringValue(json[\"body\"]);\n    this._ignoreInputValidation = Utils.getBoolValue(json[\"ignoreInputValidation\"], this._ignoreInputValidation);\n    this._headers = [];\n\n    if (json[\"headers\"] != null) {\n      var jsonHeaders = json[\"headers\"];\n\n      for (var i = 0; i < jsonHeaders.length; i++) {\n        var httpHeader = new HttpHeader();\n        httpHeader.parse(jsonHeaders[i]);\n        this.headers.push(httpHeader);\n      }\n    }\n  };\n\n  Object.defineProperty(HttpAction.prototype, \"ignoreInputValidation\", {\n    get: function () {\n      return this._ignoreInputValidation;\n    },\n    set: function (value) {\n      this._ignoreInputValidation = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpAction.prototype, \"url\", {\n    get: function () {\n      return this._url.get();\n    },\n    set: function (value) {\n      this._url.set(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpAction.prototype, \"body\", {\n    get: function () {\n      return this._body.get();\n    },\n    set: function (value) {\n      this._body.set(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HttpAction.prototype, \"headers\", {\n    get: function () {\n      return this._headers ? this._headers : [];\n    },\n    set: function (value) {\n      this._headers = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  HttpAction.JsonTypeName = \"Action.Http\";\n  return HttpAction;\n}(Action);\n\nexports.HttpAction = HttpAction;\n\nvar ShowCardAction =\n/** @class */\nfunction (_super) {\n  __extends(ShowCardAction, _super);\n\n  function ShowCardAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.card = new InlineAdaptiveCard();\n    return _this;\n  }\n\n  ShowCardAction.prototype.addCssClasses = function (element) {\n    _super.prototype.addCssClasses.call(this, element);\n\n    element.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\n  };\n\n  ShowCardAction.prototype.getJsonTypeName = function () {\n    return ShowCardAction.JsonTypeName;\n  };\n\n  ShowCardAction.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this.card) {\n      Utils.setProperty(result, \"card\", this.card.toJSON());\n    }\n\n    return result;\n  };\n\n  ShowCardAction.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    this.card.internalValidateProperties(context);\n  };\n\n  ShowCardAction.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    var jsonCard = json[\"card\"];\n\n    if (jsonCard) {\n      this.card.parse(jsonCard, errors);\n    } else {\n      raiseParseError({\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"An Action.ShowCard must have its \\\"card\\\" property set to a valid AdaptiveCard object.\"\n      }, errors);\n    }\n  };\n\n  ShowCardAction.prototype.setParent = function (value) {\n    _super.prototype.setParent.call(this, value);\n\n    this.card.setParent(value);\n  };\n\n  ShowCardAction.prototype.getAllInputs = function () {\n    return this.card.getAllInputs();\n  };\n\n  ShowCardAction.prototype.getResourceInformation = function () {\n    return _super.prototype.getResourceInformation.call(this).concat(this.card.getResourceInformation());\n  };\n\n  ShowCardAction.prototype.getActionById = function (id) {\n    var result = _super.prototype.getActionById.call(this, id);\n\n    if (!result) {\n      result = this.card.getActionById(id);\n    }\n\n    return result;\n  };\n\n  ShowCardAction.JsonTypeName = \"Action.ShowCard\";\n  return ShowCardAction;\n}(Action);\n\nexports.ShowCardAction = ShowCardAction;\n\nvar ActionCollection =\n/** @class */\nfunction () {\n  function ActionCollection(owner) {\n    this._expandedAction = null;\n    this._renderedActionCount = 0;\n    this._actionCard = null;\n    this.items = [];\n    this.buttons = [];\n    this._owner = owner;\n  }\n\n  ActionCollection.prototype.refreshContainer = function () {\n    this._actionCardContainer.innerHTML = \"\";\n\n    if (this._actionCard === null) {\n      this._actionCardContainer.style.marginTop = \"0px\";\n      return;\n    }\n\n    this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\" : \"0px\";\n\n    var padding = this._owner.getEffectivePadding();\n\n    this._owner.getImmediateSurroundingPadding(padding);\n\n    var physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n    if (this._actionCard !== null) {\n      this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\n      this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\n      this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n      this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n\n      if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {\n        this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\n        this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\n      }\n\n      Utils.appendChild(this._actionCardContainer, this._actionCard);\n    }\n  };\n\n  ActionCollection.prototype.layoutChanged = function () {\n    this._owner.getRootElement().updateLayout();\n  };\n\n  ActionCollection.prototype.hideActionCard = function () {\n    var previouslyExpandedAction = this._expandedAction;\n    this._expandedAction = null;\n    this._actionCard = null;\n    this.refreshContainer();\n\n    if (previouslyExpandedAction) {\n      this.layoutChanged();\n      raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\n    }\n  };\n\n  ActionCollection.prototype.showActionCard = function (action, suppressStyle, raiseEvent) {\n    if (suppressStyle === void 0) {\n      suppressStyle = false;\n    }\n\n    if (raiseEvent === void 0) {\n      raiseEvent = true;\n    }\n\n    if (action.card == null) {\n      return;\n    }\n\n    action.card.suppressStyle = suppressStyle;\n    var renderedCard = action.card.render();\n    this._actionCard = renderedCard;\n    this._expandedAction = action;\n    this.refreshContainer();\n\n    if (raiseEvent) {\n      this.layoutChanged();\n      raiseInlineCardExpandedEvent(action, true);\n    }\n  };\n\n  ActionCollection.prototype.collapseExpandedAction = function () {\n    for (var i = 0; i < this.buttons.length; i++) {\n      this.buttons[i].state = ActionButtonState.Normal;\n    }\n\n    this.hideActionCard();\n  };\n\n  ActionCollection.prototype.expandShowCardAction = function (action, raiseEvent) {\n    for (var i = 0; i < this.buttons.length; i++) {\n      if (this.buttons[i].action !== action) {\n        this.buttons[i].state = ActionButtonState.Subdued;\n      } else {\n        this.buttons[i].state = ActionButtonState.Expanded;\n      }\n    }\n\n    this.showActionCard(action, !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()), raiseEvent);\n  };\n\n  ActionCollection.prototype.actionClicked = function (actionButton) {\n    if (!(actionButton.action instanceof ShowCardAction)) {\n      for (var i = 0; i < this.buttons.length; i++) {\n        this.buttons[i].state = ActionButtonState.Normal;\n      }\n\n      this.hideActionCard();\n      actionButton.action.execute();\n    } else {\n      if (this._owner.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\n        actionButton.action.execute();\n      } else if (actionButton.action === this._expandedAction) {\n        this.collapseExpandedAction();\n      } else {\n        this.expandShowCardAction(actionButton.action, true);\n      }\n    }\n  };\n\n  ActionCollection.prototype.getParentContainer = function () {\n    if (this._owner instanceof Container) {\n      return this._owner;\n    } else {\n      return this._owner.getParentContainer();\n    }\n  };\n\n  ActionCollection.prototype.findActionButton = function (action) {\n    for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {\n      var actionButton = _a[_i];\n\n      if (actionButton.action == action) {\n        return actionButton;\n      }\n    }\n\n    return null;\n  };\n\n  ActionCollection.prototype.parse = function (json, errors) {\n    this.clear();\n\n    if (json && json instanceof Array) {\n      for (var _i = 0, json_1 = json; _i < json_1.length; _i++) {\n        var jsonAction = json_1[_i];\n        var action = createActionInstance(this._owner, jsonAction, [], !this._owner.isDesignMode(), errors);\n\n        if (action) {\n          this.addAction(action);\n        }\n      }\n    }\n  };\n\n  ActionCollection.prototype.toJSON = function () {\n    if (this.items.length > 0) {\n      var result = [];\n\n      for (var _i = 0, _a = this.items; _i < _a.length; _i++) {\n        var action = _a[_i];\n        result.push(action.toJSON());\n      }\n\n      return result;\n    } else {\n      return null;\n    }\n  };\n\n  ActionCollection.prototype.getActionById = function (id) {\n    var result = null;\n\n    for (var i = 0; i < this.items.length; i++) {\n      result = this.items[i].getActionById(id);\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  ActionCollection.prototype.validateProperties = function (context) {\n    if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {\n      context.addFailure(this._owner, {\n        error: Enums.ValidationError.TooManyActions,\n        message: \"A maximum of \" + this._owner.hostConfig.actions.maxActions + \" actions are allowed.\"\n      });\n    }\n\n    if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\n      context.addFailure(this._owner, {\n        error: Enums.ValidationError.InteractivityNotAllowed,\n        message: \"Interactivity is not allowed.\"\n      });\n    }\n\n    for (var _i = 0, _a = this.items; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      if (!isActionAllowed(item, this._owner.getForbiddenActionTypes())) {\n        context.addFailure(this._owner, {\n          error: Enums.ValidationError.ActionTypeNotAllowed,\n          message: \"Actions of type \" + item.getJsonTypeName() + \" are not allowe.\"\n        });\n      }\n\n      item.internalValidateProperties(context);\n    }\n  };\n\n  ActionCollection.prototype.render = function (orientation, isDesignMode) {\n    var _this = this;\n\n    if (!this._owner.hostConfig.supportsInteractivity) {\n      return null;\n    }\n\n    var element = document.createElement(\"div\");\n    var maxActions = this._owner.hostConfig.actions.maxActions ? Math.min(this._owner.hostConfig.actions.maxActions, this.items.length) : this.items.length;\n\n    var forbiddenActionTypes = this._owner.getForbiddenActionTypes();\n\n    this._actionCardContainer = document.createElement(\"div\");\n    this._renderedActionCount = 0;\n\n    if (this._owner.hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && isActionAllowed(this.items[0], forbiddenActionTypes)) {\n      this.showActionCard(this.items[0], true);\n      this._renderedActionCount = 1;\n    } else {\n      var buttonStrip = document.createElement(\"div\");\n      buttonStrip.className = this._owner.hostConfig.makeCssClassName(\"ac-actionSet\");\n      buttonStrip.style.display = \"flex\";\n\n      if (orientation == Enums.Orientation.Horizontal) {\n        buttonStrip.style.flexDirection = \"row\";\n\n        if (this._owner.horizontalAlignment && this._owner.hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n          switch (this._owner.horizontalAlignment) {\n            case Enums.HorizontalAlignment.Center:\n              buttonStrip.style.justifyContent = \"center\";\n              break;\n\n            case Enums.HorizontalAlignment.Right:\n              buttonStrip.style.justifyContent = \"flex-end\";\n              break;\n\n            default:\n              buttonStrip.style.justifyContent = \"flex-start\";\n              break;\n          }\n        } else {\n          switch (this._owner.hostConfig.actions.actionAlignment) {\n            case Enums.ActionAlignment.Center:\n              buttonStrip.style.justifyContent = \"center\";\n              break;\n\n            case Enums.ActionAlignment.Right:\n              buttonStrip.style.justifyContent = \"flex-end\";\n              break;\n\n            default:\n              buttonStrip.style.justifyContent = \"flex-start\";\n              break;\n          }\n        }\n      } else {\n        buttonStrip.style.flexDirection = \"column\";\n\n        if (this._owner.horizontalAlignment && this._owner.hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n          switch (this._owner.horizontalAlignment) {\n            case Enums.HorizontalAlignment.Center:\n              buttonStrip.style.alignItems = \"center\";\n              break;\n\n            case Enums.HorizontalAlignment.Right:\n              buttonStrip.style.alignItems = \"flex-end\";\n              break;\n\n            default:\n              buttonStrip.style.alignItems = \"flex-start\";\n              break;\n          }\n        } else {\n          switch (this._owner.hostConfig.actions.actionAlignment) {\n            case Enums.ActionAlignment.Center:\n              buttonStrip.style.alignItems = \"center\";\n              break;\n\n            case Enums.ActionAlignment.Right:\n              buttonStrip.style.alignItems = \"flex-end\";\n              break;\n\n            case Enums.ActionAlignment.Stretch:\n              buttonStrip.style.alignItems = \"stretch\";\n              break;\n\n            default:\n              buttonStrip.style.alignItems = \"flex-start\";\n              break;\n          }\n        }\n      }\n\n      var parentContainerStyle = this.getParentContainer().getEffectiveStyle();\n\n      for (var i = 0; i < this.items.length; i++) {\n        if (isActionAllowed(this.items[i], forbiddenActionTypes)) {\n          var actionButton = this.findActionButton(this.items[i]);\n\n          if (!actionButton) {\n            actionButton = new ActionButton(this.items[i], parentContainerStyle);\n\n            actionButton.onClick = function (ab) {\n              _this.actionClicked(ab);\n            };\n\n            this.buttons.push(actionButton);\n          }\n\n          actionButton.render(this._owner.hostConfig.actions.actionAlignment);\n          buttonStrip.appendChild(actionButton.action.renderedElement);\n          this._renderedActionCount++;\n\n          if (this._renderedActionCount >= this._owner.hostConfig.actions.maxActions || i == this.items.length - 1) {\n            break;\n          } else if (this._owner.hostConfig.actions.buttonSpacing > 0) {\n            var spacer = document.createElement(\"div\");\n\n            if (orientation === Enums.Orientation.Horizontal) {\n              spacer.style.flex = \"0 0 auto\";\n              spacer.style.width = this._owner.hostConfig.actions.buttonSpacing + \"px\";\n            } else {\n              spacer.style.height = this._owner.hostConfig.actions.buttonSpacing + \"px\";\n            }\n\n            Utils.appendChild(buttonStrip, spacer);\n          }\n        }\n      }\n\n      var buttonStripContainer = document.createElement(\"div\");\n      buttonStripContainer.style.overflow = \"hidden\";\n      buttonStripContainer.appendChild(buttonStrip);\n      Utils.appendChild(element, buttonStripContainer);\n    }\n\n    Utils.appendChild(element, this._actionCardContainer);\n\n    for (var i = 0; i < this.buttons.length; i++) {\n      if (this.buttons[i].state == ActionButtonState.Expanded) {\n        this.expandShowCardAction(this.buttons[i].action, false);\n        break;\n      }\n    }\n\n    return this._renderedActionCount > 0 ? element : null;\n  };\n\n  ActionCollection.prototype.addAction = function (action) {\n    if (!action) {\n      throw new Error(\"The action parameter cannot be null.\");\n    }\n\n    if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {\n      this.items.push(action);\n\n      if (!action.parent) {\n        action.setParent(this._owner);\n      }\n\n      invokeSetCollection(action, this);\n    } else {\n      throw new Error(\"The action already belongs to another element.\");\n    }\n  };\n\n  ActionCollection.prototype.removeAction = function (action) {\n    if (this.expandedAction && this._expandedAction == action) {\n      this.collapseExpandedAction();\n    }\n\n    var actionIndex = this.items.indexOf(action);\n\n    if (actionIndex >= 0) {\n      this.items.splice(actionIndex, 1);\n      action.setParent(null);\n      invokeSetCollection(action, null);\n\n      for (var i = 0; i < this.buttons.length; i++) {\n        if (this.buttons[i].action == action) {\n          this.buttons.splice(i, 1);\n          break;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ActionCollection.prototype.clear = function () {\n    this.items = [];\n    this.buttons = [];\n    this._expandedAction = null;\n    this._renderedActionCount = 0;\n  };\n\n  ActionCollection.prototype.getAllInputs = function () {\n    var result = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      var action = this.items[i];\n      result = result.concat(action.getAllInputs());\n    }\n\n    return result;\n  };\n\n  ActionCollection.prototype.getResourceInformation = function () {\n    var result = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      result = result.concat(this.items[i].getResourceInformation());\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(ActionCollection.prototype, \"renderedActionCount\", {\n    get: function () {\n      return this._renderedActionCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ActionCollection.prototype, \"expandedAction\", {\n    get: function () {\n      return this._expandedAction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ActionCollection;\n}();\n\nvar ActionSet =\n/** @class */\nfunction (_super) {\n  __extends(ActionSet, _super);\n\n  function ActionSet() {\n    var _this = _super.call(this) || this;\n\n    _this.orientation = null;\n    _this._actionCollection = new ActionCollection(_this);\n    return _this;\n  }\n\n  ActionSet.prototype.internalRender = function () {\n    return this._actionCollection.render(this.orientation ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());\n  };\n\n  ActionSet.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setEnumProperty(Enums.Orientation, result, \"orientation\", this.orientation);\n    Utils.setProperty(result, \"actions\", this._actionCollection.toJSON());\n    return result;\n  };\n\n  ActionSet.prototype.isBleedingAtBottom = function () {\n    if (this._actionCollection.renderedActionCount == 0) {\n      return _super.prototype.isBleedingAtBottom.call(this);\n    } else {\n      if (this._actionCollection.items.length == 1) {\n        return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;\n      } else {\n        return this._actionCollection.expandedAction != null;\n      }\n    }\n  };\n\n  ActionSet.prototype.getJsonTypeName = function () {\n    return \"ActionSet\";\n  };\n\n  ActionSet.prototype.getActionCount = function () {\n    return this._actionCollection.items.length;\n  };\n\n  ActionSet.prototype.getActionAt = function (index) {\n    if (index >= 0 && index < this.getActionCount()) {\n      return this._actionCollection.items[index];\n    } else {\n      _super.prototype.getActionAt.call(this, index);\n    }\n  };\n\n  ActionSet.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    this._actionCollection.validateProperties(context);\n  };\n\n  ActionSet.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    var jsonOrientation = json[\"orientation\"];\n\n    if (jsonOrientation) {\n      this.orientation = Utils.getEnumValue(Enums.Orientation, jsonOrientation, Enums.Orientation.Horizontal);\n    }\n\n    this._actionCollection.parse(json[\"actions\"], errors);\n  };\n\n  ActionSet.prototype.addAction = function (action) {\n    this._actionCollection.addAction(action);\n  };\n\n  ActionSet.prototype.getAllInputs = function () {\n    return this._actionCollection.getAllInputs();\n  };\n\n  ActionSet.prototype.getResourceInformation = function () {\n    return this._actionCollection.getResourceInformation();\n  };\n\n  Object.defineProperty(ActionSet.prototype, \"isInteractive\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ActionSet;\n}(CardElement);\n\nexports.ActionSet = ActionSet;\n\nvar StylableCardElementContainer =\n/** @class */\nfunction (_super) {\n  __extends(StylableCardElementContainer, _super);\n\n  function StylableCardElementContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._style = null;\n    _this._bleed = false;\n    return _this;\n  }\n\n  StylableCardElementContainer.prototype.applyBackground = function () {\n    var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\n\n    if (!Utils.isNullOrEmpty(styleDefinition.backgroundColor)) {\n      this.renderedElement.style.backgroundColor = Utils.stringToCssColor(styleDefinition.backgroundColor);\n    }\n  };\n\n  StylableCardElementContainer.prototype.applyPadding = function () {\n    _super.prototype.applyPadding.call(this);\n\n    if (!this.renderedElement) {\n      return;\n    }\n\n    var physicalPadding = new Shared.SpacingDefinition();\n\n    if (this.getEffectivePadding()) {\n      physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n    }\n\n    this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n    this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n    this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n    this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n\n    if (this.isBleeding()) {\n      // Bleed into the first parent that does have padding\n      var padding = new Shared.PaddingDefinition();\n      this.getImmediateSurroundingPadding(padding);\n      var surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n      this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n      this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n\n      if (!this.isDesignMode()) {\n        this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\n        this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\n      }\n\n      if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {\n        this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n        this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n      }\n    } else {\n      this.renderedElement.style.marginRight = \"0\";\n      this.renderedElement.style.marginLeft = \"0\";\n      this.renderedElement.style.marginTop = \"0\";\n      this.renderedElement.style.marginBottom = \"0\";\n\n      if (this.separatorElement) {\n        this.separatorElement.style.marginRight = \"0\";\n        this.separatorElement.style.marginLeft = \"0\";\n      }\n    }\n  };\n\n  StylableCardElementContainer.prototype.getHasBackground = function () {\n    var currentElement = this.parent;\n\n    while (currentElement) {\n      var currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;\n\n      if (currentElement instanceof StylableCardElementContainer) {\n        if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {\n          return true;\n        }\n      }\n\n      currentElement = currentElement.parent;\n    }\n\n    return false;\n  };\n\n  StylableCardElementContainer.prototype.getDefaultPadding = function () {\n    return this.getHasBackground() ? new Shared.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding) : _super.prototype.getDefaultPadding.call(this);\n  };\n\n  StylableCardElementContainer.prototype.getHasExpandedAction = function () {\n    return false;\n  };\n\n  StylableCardElementContainer.prototype.getBleed = function () {\n    return this._bleed;\n  };\n\n  StylableCardElementContainer.prototype.setBleed = function (value) {\n    this._bleed = value;\n  };\n\n  Object.defineProperty(StylableCardElementContainer.prototype, \"renderedActionCount\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StylableCardElementContainer.prototype, \"hasExplicitStyle\", {\n    get: function () {\n      return this._style != null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StylableCardElementContainer.prototype, \"allowCustomStyle\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StylableCardElementContainer.prototype, \"supportsMinHeight\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StylableCardElementContainer.prototype.isBleeding = function () {\n    return this.getHasBackground() && this.getBleed();\n  };\n\n  StylableCardElementContainer.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"style\", this.style);\n    return result;\n  };\n\n  StylableCardElementContainer.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (this._style) {\n      var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this._style);\n\n      if (!styleDefinition) {\n        context.addFailure(this, {\n          error: Enums.ValidationError.InvalidPropertyValue,\n          message: \"Unknown container style: \" + this._style\n        });\n      }\n    }\n  };\n\n  StylableCardElementContainer.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this._style = Utils.getStringValue(json[\"style\"]);\n  };\n\n  StylableCardElementContainer.prototype.render = function () {\n    var renderedElement = _super.prototype.render.call(this);\n\n    if (renderedElement && this.getHasBackground()) {\n      this.applyBackground();\n    }\n\n    return renderedElement;\n  };\n\n  StylableCardElementContainer.prototype.getEffectiveStyle = function () {\n    var effectiveStyle = this.style;\n    return effectiveStyle ? effectiveStyle : _super.prototype.getEffectiveStyle.call(this);\n  };\n\n  Object.defineProperty(StylableCardElementContainer.prototype, \"style\", {\n    get: function () {\n      if (this.allowCustomStyle) {\n        if (this._style && this.hostConfig.containerStyles.getStyleByName(this._style)) {\n          return this._style;\n        }\n      }\n\n      return null;\n    },\n    set: function (value) {\n      this._style = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return StylableCardElementContainer;\n}(CardElementContainer);\n\nexports.StylableCardElementContainer = StylableCardElementContainer;\n\nvar BackgroundImage =\n/** @class */\nfunction () {\n  function BackgroundImage() {\n    this.fillMode = BackgroundImage.defaultFillMode;\n    this.horizontalAlignment = BackgroundImage.defaultHorizontalAlignment;\n    this.verticalAlignment = BackgroundImage.defaultVerticalAlignment;\n  }\n\n  BackgroundImage.prototype.reset = function () {\n    this.url = undefined;\n    this.fillMode = BackgroundImage.defaultFillMode;\n    this.horizontalAlignment = BackgroundImage.defaultHorizontalAlignment;\n    this.verticalAlignment = BackgroundImage.defaultVerticalAlignment;\n  };\n\n  BackgroundImage.prototype.parse = function (json, errors) {\n    this.url = Utils.getStringValue(json[\"url\"]);\n    this.fillMode = Utils.getEnumValue(Enums.FillMode, json[\"fillMode\"], this.fillMode);\n    this.horizontalAlignment = Utils.getEnumValue(Enums.HorizontalAlignment, json[\"horizontalAlignment\"], this.horizontalAlignment);\n    this.verticalAlignment = Utils.getEnumValue(Enums.VerticalAlignment, json[\"verticalAlignment\"], this.verticalAlignment);\n  };\n\n  BackgroundImage.prototype.toJSON = function () {\n    if (!this.isValid()) {\n      return null;\n    }\n\n    if (this.fillMode == BackgroundImage.defaultFillMode && this.horizontalAlignment == BackgroundImage.defaultHorizontalAlignment && this.verticalAlignment == BackgroundImage.defaultVerticalAlignment) {\n      return this.url;\n    } else {\n      var result = {};\n      Utils.setProperty(result, \"url\", this.url);\n      Utils.setEnumProperty(Enums.FillMode, result, \"fillMode\", this.fillMode, BackgroundImage.defaultFillMode);\n      Utils.setEnumProperty(Enums.HorizontalAlignment, result, \"horizontalAlignment\", this.horizontalAlignment, BackgroundImage.defaultHorizontalAlignment);\n      Utils.setEnumProperty(Enums.VerticalAlignment, result, \"verticalAlignment\", this.verticalAlignment, BackgroundImage.defaultVerticalAlignment);\n      return result;\n    }\n  };\n\n  BackgroundImage.prototype.apply = function (element) {\n    if (this.url) {\n      element.style.backgroundImage = \"url('\" + this.url + \"')\";\n\n      switch (this.fillMode) {\n        case Enums.FillMode.Repeat:\n          element.style.backgroundRepeat = \"repeat\";\n          break;\n\n        case Enums.FillMode.RepeatHorizontally:\n          element.style.backgroundRepeat = \"repeat-x\";\n          break;\n\n        case Enums.FillMode.RepeatVertically:\n          element.style.backgroundRepeat = \"repeat-y\";\n          break;\n\n        case Enums.FillMode.Cover:\n        default:\n          element.style.backgroundRepeat = \"no-repeat\";\n          element.style.backgroundSize = \"cover\";\n          break;\n      }\n\n      switch (this.horizontalAlignment) {\n        case Enums.HorizontalAlignment.Center:\n          element.style.backgroundPositionX = \"center\";\n          break;\n\n        case Enums.HorizontalAlignment.Right:\n          element.style.backgroundPositionX = \"right\";\n          break;\n      }\n\n      switch (this.verticalAlignment) {\n        case Enums.VerticalAlignment.Center:\n          element.style.backgroundPositionY = \"center\";\n          break;\n\n        case Enums.VerticalAlignment.Bottom:\n          element.style.backgroundPositionY = \"bottom\";\n          break;\n      }\n    }\n  };\n\n  BackgroundImage.prototype.isValid = function () {\n    return !Utils.isNullOrEmpty(this.url);\n  };\n\n  BackgroundImage.defaultFillMode = Enums.FillMode.Cover;\n  BackgroundImage.defaultHorizontalAlignment = Enums.HorizontalAlignment.Left;\n  BackgroundImage.defaultVerticalAlignment = Enums.VerticalAlignment.Top;\n  return BackgroundImage;\n}();\n\nexports.BackgroundImage = BackgroundImage;\n\nvar Container =\n/** @class */\nfunction (_super) {\n  __extends(Container, _super);\n\n  function Container() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._items = [];\n    _this._renderedItems = [];\n    _this.backgroundImage = new BackgroundImage();\n    _this.verticalContentAlignment = Enums.VerticalAlignment.Top;\n    _this.rtl = null;\n    return _this;\n  }\n\n  Container.prototype.insertItemAt = function (item, index, forceInsert) {\n    if (!item.parent || forceInsert) {\n      if (item.isStandalone) {\n        if (index < 0 || index >= this._items.length) {\n          this._items.push(item);\n        } else {\n          this._items.splice(index, 0, item);\n        }\n\n        item.setParent(this);\n      } else {\n        throw new Error(\"Elements of type \" + item.getJsonTypeName() + \" cannot be used as standalone elements.\");\n      }\n    } else {\n      throw new Error(\"The element already belongs to another container.\");\n    }\n  };\n\n  Container.prototype.supportsExcplitiHeight = function () {\n    return true;\n  };\n\n  Container.prototype.getItemsCollectionPropertyName = function () {\n    return \"items\";\n  };\n\n  Container.prototype.applyBackground = function () {\n    if (this.backgroundImage.isValid()) {\n      this.backgroundImage.apply(this.renderedElement);\n    }\n\n    _super.prototype.applyBackground.call(this);\n  };\n\n  Container.prototype.internalRender = function () {\n    this._renderedItems = []; // Cache hostConfig to avoid walking the parent hierarchy several times\n\n    var hostConfig = this.hostConfig;\n    var element = document.createElement(\"div\");\n\n    if (this.rtl != null && this.rtl) {\n      element.dir = \"rtl\";\n    }\n\n    element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\n    element.style.display = \"flex\";\n    element.style.flexDirection = \"column\";\n\n    if (AdaptiveCard.useAdvancedCardBottomTruncation) {\n      // Forces the container to be at least as tall as its content.\n      //\n      // Fixes a quirk in Chrome where, for nested flex elements, the\n      // inner element's height would never exceed the outer element's\n      // height. This caused overflow truncation to break -- containers\n      // would always be measured as not overflowing, since their heights\n      // were constrained by their parents as opposed to truly reflecting\n      // the height of their content.\n      //\n      // See the \"Browser Rendering Notes\" section of this answer:\n      // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\n      element.style.minHeight = '-webkit-min-content';\n    }\n\n    switch (this.verticalContentAlignment) {\n      case Enums.VerticalAlignment.Center:\n        element.style.justifyContent = \"center\";\n        break;\n\n      case Enums.VerticalAlignment.Bottom:\n        element.style.justifyContent = \"flex-end\";\n        break;\n\n      default:\n        element.style.justifyContent = \"flex-start\";\n        break;\n    }\n\n    if (this._items.length > 0) {\n      for (var i = 0; i < this._items.length; i++) {\n        var renderedElement = this.isElementAllowed(this._items[i], this.getForbiddenElementTypes()) ? this._items[i].render() : null;\n\n        if (renderedElement) {\n          if (this._renderedItems.length > 0 && this._items[i].separatorElement) {\n            this._items[i].separatorElement.style.flex = \"0 0 auto\";\n            Utils.appendChild(element, this._items[i].separatorElement);\n          }\n\n          Utils.appendChild(element, renderedElement);\n\n          this._renderedItems.push(this._items[i]);\n        }\n      }\n    } else {\n      if (this.isDesignMode()) {\n        var placeholderElement = this.createPlaceholderElement();\n        placeholderElement.style.width = \"100%\";\n        placeholderElement.style.height = \"100%\";\n        element.appendChild(placeholderElement);\n      }\n    }\n\n    return element;\n  };\n\n  Container.prototype.truncateOverflow = function (maxHeight) {\n    // Add 1 to account for rounding differences between browsers\n    var boundary = this.renderedElement.offsetTop + maxHeight + 1;\n\n    var handleElement = function (cardElement) {\n      var elt = cardElement.renderedElement;\n\n      if (elt) {\n        switch (Utils.getFitStatus(elt, boundary)) {\n          case Enums.ContainerFitStatus.FullyInContainer:\n            var sizeChanged = cardElement['resetOverflow'](); // If the element's size changed after resetting content,\n            // we have to check if it still fits fully in the card\n\n            if (sizeChanged) {\n              handleElement(cardElement);\n            }\n\n            break;\n\n          case Enums.ContainerFitStatus.Overflowing:\n            var maxHeight_1 = boundary - elt.offsetTop;\n            cardElement['handleOverflow'](maxHeight_1);\n            break;\n\n          case Enums.ContainerFitStatus.FullyOutOfContainer:\n            cardElement['handleOverflow'](0);\n            break;\n        }\n      }\n    };\n\n    for (var _i = 0, _a = this._items; _i < _a.length; _i++) {\n      var item = _a[_i];\n      handleElement(item);\n    }\n\n    return true;\n  };\n\n  Container.prototype.undoOverflowTruncation = function () {\n    for (var _i = 0, _a = this._items; _i < _a.length; _i++) {\n      var item = _a[_i];\n      item['resetOverflow']();\n    }\n  };\n\n  Container.prototype.getHasBackground = function () {\n    return this.backgroundImage.isValid() || _super.prototype.getHasBackground.call(this);\n  };\n\n  Object.defineProperty(Container.prototype, \"isSelectable\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Container.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"backgroundImage\", this.backgroundImage.toJSON());\n    Utils.setEnumProperty(Enums.VerticalAlignment, result, \"verticalContentAlignment\", this.verticalContentAlignment, Enums.VerticalAlignment.Top);\n\n    if (this._items.length > 0) {\n      var elements = [];\n\n      for (var _i = 0, _a = this._items; _i < _a.length; _i++) {\n        var element = _a[_i];\n        elements.push(element.toJSON());\n      }\n\n      Utils.setProperty(result, this.getItemsCollectionPropertyName(), elements);\n    }\n\n    Utils.setProperty(result, \"bleed\", this.bleed, false);\n    return result;\n  };\n\n  Container.prototype.getItemCount = function () {\n    return this._items.length;\n  };\n\n  Container.prototype.getItemAt = function (index) {\n    return this._items[index];\n  };\n\n  Container.prototype.getFirstVisibleRenderedItem = function () {\n    if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n      for (var _i = 0, _a = this._renderedItems; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        if (item.isVisible) {\n          return item;\n        }\n      }\n\n      ;\n    }\n\n    return null;\n  };\n\n  Container.prototype.getLastVisibleRenderedItem = function () {\n    if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n      for (var i = this._renderedItems.length - 1; i >= 0; i--) {\n        if (this._renderedItems[i].isVisible) {\n          return this._renderedItems[i];\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Container.prototype.getJsonTypeName = function () {\n    return \"Container\";\n  };\n\n  Container.prototype.isFirstElement = function (element) {\n    var designMode = this.isDesignMode();\n\n    for (var i = 0; i < this._items.length; i++) {\n      if (this._items[i].isVisible || designMode) {\n        return this._items[i] == element;\n      }\n    }\n\n    return false;\n  };\n\n  Container.prototype.isLastElement = function (element) {\n    var designMode = this.isDesignMode();\n\n    for (var i = this._items.length - 1; i >= 0; i--) {\n      if (this._items[i].isVisible || designMode) {\n        return this._items[i] == element;\n      }\n    }\n\n    return false;\n  };\n\n  Container.prototype.isRtl = function () {\n    if (this.rtl != null) {\n      return this.rtl;\n    } else {\n      var parentContainer = this.getParentContainer();\n      return parentContainer ? parentContainer.isRtl() : false;\n    }\n  };\n\n  Container.prototype.isBleedingAtTop = function () {\n    var firstRenderedItem = this.getFirstVisibleRenderedItem();\n    return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);\n  };\n\n  Container.prototype.isBleedingAtBottom = function () {\n    var lastRenderedItem = this.getLastVisibleRenderedItem();\n    return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);\n  };\n\n  Container.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this.setShouldFallback(false);\n    this._items = [];\n    this._renderedItems = [];\n    this.backgroundImage.reset();\n    var jsonBackgroundImage = json[\"backgroundImage\"];\n\n    if (jsonBackgroundImage) {\n      if (typeof jsonBackgroundImage === \"string\") {\n        this.backgroundImage.url = jsonBackgroundImage;\n        this.backgroundImage.fillMode = Enums.FillMode.Cover;\n      } else if (typeof jsonBackgroundImage === \"object\") {\n        this.backgroundImage.parse(jsonBackgroundImage, errors);\n      }\n    }\n\n    this.verticalContentAlignment = Utils.getEnumValue(Enums.VerticalAlignment, json[\"verticalContentAlignment\"], this.verticalContentAlignment);\n\n    if (json[this.getItemsCollectionPropertyName()] != null) {\n      var items = json[this.getItemsCollectionPropertyName()];\n      this.clear();\n\n      for (var i = 0; i < items.length; i++) {\n        var element = createElementInstance(this, items[i], !this.isDesignMode(), errors);\n\n        if (element) {\n          this.insertItemAt(element, -1, true);\n        }\n      }\n    }\n\n    this.bleed = Utils.getBoolValue(json[\"bleed\"], this.bleed);\n  };\n\n  Container.prototype.indexOf = function (cardElement) {\n    return this._items.indexOf(cardElement);\n  };\n\n  Container.prototype.addItem = function (item) {\n    this.insertItemAt(item, -1, false);\n  };\n\n  Container.prototype.insertItemBefore = function (item, insertBefore) {\n    this.insertItemAt(item, this._items.indexOf(insertBefore), false);\n  };\n\n  Container.prototype.insertItemAfter = function (item, insertAfter) {\n    this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\n  };\n\n  Container.prototype.removeItem = function (item) {\n    var itemIndex = this._items.indexOf(item);\n\n    if (itemIndex >= 0) {\n      this._items.splice(itemIndex, 1);\n\n      item.setParent(null);\n      this.updateLayout();\n      return true;\n    }\n\n    return false;\n  };\n\n  Container.prototype.clear = function () {\n    this._items = [];\n  };\n\n  Container.prototype.getResourceInformation = function () {\n    var result = _super.prototype.getResourceInformation.call(this);\n\n    if (this.backgroundImage.isValid()) {\n      result.push({\n        url: this.backgroundImage.url,\n        mimeType: \"image\"\n      });\n    }\n\n    return result;\n  };\n\n  Container.prototype.getActionById = function (id) {\n    var result = _super.prototype.getActionById.call(this, id);\n\n    if (!result) {\n      if (this.selectAction) {\n        result = this.selectAction.getActionById(id);\n      }\n\n      if (!result) {\n        for (var i = 0; i < this._items.length; i++) {\n          result = this._items[i].getActionById(id);\n\n          if (result) {\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(Container.prototype, \"padding\", {\n    get: function () {\n      return this.getPadding();\n    },\n    set: function (value) {\n      this.setPadding(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Container.prototype, \"selectAction\", {\n    get: function () {\n      return this.getSelectAction();\n    },\n    set: function (value) {\n      this.setSelectAction(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Container.prototype, \"bleed\", {\n    get: function () {\n      return this.getBleed();\n    },\n    set: function (value) {\n      this.setBleed(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Container;\n}(StylableCardElementContainer);\n\nexports.Container = Container;\n\nvar Column =\n/** @class */\nfunction (_super) {\n  __extends(Column, _super);\n\n  function Column(width) {\n    if (width === void 0) {\n      width = \"auto\";\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._computedWeight = 0;\n    _this.width = \"auto\";\n    _this.width = width;\n    return _this;\n  }\n\n  Column.prototype.adjustRenderedElementSize = function (renderedElement) {\n    var minDesignTimeColumnHeight = 20;\n\n    if (this.isDesignMode()) {\n      renderedElement.style.minWidth = \"20px\";\n      renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\n    } else {\n      renderedElement.style.minWidth = \"0\";\n\n      if (this.minPixelHeight) {\n        renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n      }\n    }\n\n    if (this.width === \"auto\") {\n      renderedElement.style.flex = \"0 1 auto\";\n    } else if (this.width === \"stretch\") {\n      renderedElement.style.flex = \"1 1 50px\";\n    } else {\n      var sizeAndUnit = this.width;\n\n      if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {\n        renderedElement.style.flex = \"0 0 auto\";\n        renderedElement.style.width = sizeAndUnit.physicalSize + \"px\";\n      } else {\n        renderedElement.style.flex = \"1 1 \" + (this._computedWeight > 0 ? this._computedWeight : sizeAndUnit.physicalSize) + \"%\";\n      }\n    }\n  };\n\n  Object.defineProperty(Column.prototype, \"separatorOrientation\", {\n    get: function () {\n      return Enums.Orientation.Vertical;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Column.prototype.getJsonTypeName = function () {\n    return \"Column\";\n  };\n\n  Column.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this.width instanceof Shared.SizeAndUnit) {\n      if (this.width.unit == Enums.SizeUnit.Pixel) {\n        Utils.setProperty(result, \"width\", this.width.physicalSize + \"px\");\n      } else {\n        Utils.setProperty(result, \"width\", this.width.physicalSize);\n      }\n    } else {\n      Utils.setProperty(result, \"width\", this.width);\n    }\n\n    return result;\n  };\n\n  Column.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    var jsonWidth = json[\"width\"];\n\n    if (jsonWidth === undefined) {\n      jsonWidth = json[\"size\"];\n\n      if (jsonWidth !== undefined) {\n        raiseParseError({\n          error: Enums.ValidationError.Deprecated,\n          message: \"The \\\"Column.size\\\" property is deprecated and will be removed. Use the \\\"Column.width\\\" property instead.\"\n        }, errors);\n      }\n    }\n\n    var invalidWidth = false;\n\n    try {\n      this.width = Shared.SizeAndUnit.parse(jsonWidth);\n    } catch (e) {\n      if (typeof jsonWidth === \"string\" && (jsonWidth === \"auto\" || jsonWidth === \"stretch\")) {\n        this.width = jsonWidth;\n      } else {\n        invalidWidth = true;\n      }\n    }\n\n    if (invalidWidth) {\n      raiseParseError({\n        error: Enums.ValidationError.InvalidPropertyValue,\n        message: \"Invalid column width:\" + jsonWidth + \" - defaulting to \\\"auto\\\"\"\n      }, errors);\n    }\n  };\n\n  Object.defineProperty(Column.prototype, \"hasVisibleSeparator\", {\n    get: function () {\n      if (this.parent && this.parent instanceof ColumnSet) {\n        return this.separatorElement && !this.parent.isLeftMostElement(this);\n      } else {\n        return false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Column.prototype, \"isStandalone\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Column;\n}(Container);\n\nexports.Column = Column;\n\nvar ColumnSet =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSet, _super);\n\n  function ColumnSet() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._columns = [];\n    return _this;\n  }\n\n  ColumnSet.prototype.createColumnInstance = function (json, errors) {\n    return createCardObjectInstance(this, json, [], // Forbidden types not supported for elements for now\n    !this.isDesignMode(), function (typeName) {\n      return !typeName || typeName === \"Column\" ? new Column() : null;\n    }, function (typeName, errorType) {\n      if (errorType == InstanceCreationErrorType.UnknownType) {\n        return {\n          error: Enums.ValidationError.UnknownElementType,\n          message: \"Unknown element type: \" + typeName + \". Fallback will be used if present.\"\n        };\n      } else {\n        return {\n          error: Enums.ValidationError.ElementTypeNotAllowed,\n          message: \"Element type \" + typeName + \" isn't allowed in a ColumnSet.\"\n        };\n      }\n    }, errors);\n  };\n\n  ColumnSet.prototype.internalRender = function () {\n    this._renderedColumns = [];\n\n    if (this._columns.length > 0) {\n      // Cache hostConfig to avoid walking the parent hierarchy several times\n      var hostConfig = this.hostConfig;\n      var element = document.createElement(\"div\");\n      element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\n      element.style.display = \"flex\";\n\n      if (AdaptiveCard.useAdvancedCardBottomTruncation) {\n        // See comment in Container.internalRender()\n        element.style.minHeight = '-webkit-min-content';\n      }\n\n      switch (this.horizontalAlignment) {\n        case Enums.HorizontalAlignment.Center:\n          element.style.justifyContent = \"center\";\n          break;\n\n        case Enums.HorizontalAlignment.Right:\n          element.style.justifyContent = \"flex-end\";\n          break;\n\n        default:\n          element.style.justifyContent = \"flex-start\";\n          break;\n      }\n\n      var totalWeight = 0;\n\n      for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n        var column = _a[_i];\n\n        if (column.width instanceof Shared.SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight) {\n          totalWeight += column.width.physicalSize;\n        }\n      }\n\n      for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {\n        var column = _c[_b];\n\n        if (column.width instanceof Shared.SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {\n          var computedWeight = 100 / totalWeight * column.width.physicalSize; // Best way to emulate \"internal\" access I know of\n\n          column[\"_computedWeight\"] = computedWeight;\n        }\n\n        var renderedColumn = column.render();\n\n        if (renderedColumn) {\n          if (this._renderedColumns.length > 0 && column.separatorElement) {\n            column.separatorElement.style.flex = \"0 0 auto\";\n            Utils.appendChild(element, column.separatorElement);\n          }\n\n          Utils.appendChild(element, renderedColumn);\n\n          this._renderedColumns.push(column);\n        }\n      }\n\n      return this._renderedColumns.length > 0 ? element : null;\n    } else {\n      return null;\n    }\n  };\n\n  ColumnSet.prototype.truncateOverflow = function (maxHeight) {\n    for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n      var column = _a[_i];\n      column['handleOverflow'](maxHeight);\n    }\n\n    return true;\n  };\n\n  ColumnSet.prototype.undoOverflowTruncation = function () {\n    for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n      var column = _a[_i];\n      column['resetOverflow']();\n    }\n  };\n\n  Object.defineProperty(ColumnSet.prototype, \"isSelectable\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColumnSet.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    if (this._columns.length > 0) {\n      var columns = [];\n\n      for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n        var column = _a[_i];\n        columns.push(column.toJSON());\n      }\n\n      Utils.setProperty(result, \"columns\", columns);\n    }\n\n    Utils.setProperty(result, \"bleed\", this.bleed, false);\n    return result;\n  };\n\n  ColumnSet.prototype.isFirstElement = function (element) {\n    for (var i = 0; i < this._columns.length; i++) {\n      if (this._columns[i].isVisible) {\n        return this._columns[i] == element;\n      }\n    }\n\n    return false;\n  };\n\n  ColumnSet.prototype.isBleedingAtTop = function () {\n    if (this.isBleeding()) {\n      return true;\n    }\n\n    if (this._renderedColumns && this._renderedColumns.length > 0) {\n      for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n        var column = _a[_i];\n\n        if (column.isBleedingAtTop()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  ColumnSet.prototype.isBleedingAtBottom = function () {\n    if (this.isBleeding()) {\n      return true;\n    }\n\n    if (this._renderedColumns && this._renderedColumns.length > 0) {\n      for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n        var column = _a[_i];\n\n        if (column.isBleedingAtBottom()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  ColumnSet.prototype.getCount = function () {\n    return this._columns.length;\n  };\n\n  ColumnSet.prototype.getItemCount = function () {\n    return this.getCount();\n  };\n\n  ColumnSet.prototype.getFirstVisibleRenderedItem = function () {\n    if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n      return this._renderedColumns[0];\n    } else {\n      return null;\n    }\n  };\n\n  ColumnSet.prototype.getLastVisibleRenderedItem = function () {\n    if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n      return this._renderedColumns[this._renderedColumns.length - 1];\n    } else {\n      return null;\n    }\n  };\n\n  ColumnSet.prototype.getColumnAt = function (index) {\n    return this._columns[index];\n  };\n\n  ColumnSet.prototype.getItemAt = function (index) {\n    return this.getColumnAt(index);\n  };\n\n  ColumnSet.prototype.getJsonTypeName = function () {\n    return \"ColumnSet\";\n  };\n\n  ColumnSet.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    if (json[\"columns\"] != null) {\n      var jsonColumns = json[\"columns\"];\n      this._columns = [];\n\n      for (var i = 0; i < jsonColumns.length; i++) {\n        var column = this.createColumnInstance(jsonColumns[i], errors);\n\n        this._columns.push(column);\n      }\n    }\n\n    this.bleed = Utils.getBoolValue(json[\"bleed\"], this.bleed);\n  };\n\n  ColumnSet.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    var weightedColumns = 0;\n    var stretchedColumns = 0;\n\n    for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n      var column = _a[_i];\n\n      if (typeof column.width === \"number\") {\n        weightedColumns++;\n      } else if (column.width === \"stretch\") {\n        stretchedColumns++;\n      }\n    }\n\n    if (weightedColumns > 0 && stretchedColumns > 0) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.Hint,\n        message: \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\n      });\n    }\n  };\n\n  ColumnSet.prototype.addColumn = function (column) {\n    if (!column.parent) {\n      this._columns.push(column);\n\n      column.setParent(this);\n    } else {\n      throw new Error(\"This column already belongs to another ColumnSet.\");\n    }\n  };\n\n  ColumnSet.prototype.removeItem = function (item) {\n    if (item instanceof Column) {\n      var itemIndex = this._columns.indexOf(item);\n\n      if (itemIndex >= 0) {\n        this._columns.splice(itemIndex, 1);\n\n        item.setParent(null);\n        this.updateLayout();\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ColumnSet.prototype.indexOf = function (cardElement) {\n    return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\n  };\n\n  ColumnSet.prototype.isLeftMostElement = function (element) {\n    return this._columns.indexOf(element) == 0;\n  };\n\n  ColumnSet.prototype.isRightMostElement = function (element) {\n    return this._columns.indexOf(element) == this._columns.length - 1;\n  };\n\n  ColumnSet.prototype.isTopElement = function (element) {\n    return this._columns.indexOf(element) >= 0;\n  };\n\n  ColumnSet.prototype.isBottomElement = function (element) {\n    return this._columns.indexOf(element) >= 0;\n  };\n\n  ColumnSet.prototype.getActionById = function (id) {\n    var result = null;\n\n    for (var i = 0; i < this._columns.length; i++) {\n      result = this._columns[i].getActionById(id);\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(ColumnSet.prototype, \"bleed\", {\n    get: function () {\n      return this.getBleed();\n    },\n    set: function (value) {\n      this.setBleed(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSet.prototype, \"padding\", {\n    get: function () {\n      return this.getPadding();\n    },\n    set: function (value) {\n      this.setPadding(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSet.prototype, \"selectAction\", {\n    get: function () {\n      return this.getSelectAction();\n    },\n    set: function (value) {\n      this.setSelectAction(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSet;\n}(StylableCardElementContainer);\n\nexports.ColumnSet = ColumnSet;\n\nfunction raiseImageLoadedEvent(image) {\n  var card = image.getRootElement();\n  var onImageLoadedHandler = card && card.onImageLoaded ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\n\n  if (onImageLoadedHandler) {\n    onImageLoadedHandler(image);\n  }\n}\n\nfunction raiseAnchorClickedEvent(element, anchor) {\n  var card = element.getRootElement();\n  var onAnchorClickedHandler = card && card.onAnchorClicked ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\n  return onAnchorClickedHandler != null ? onAnchorClickedHandler(element, anchor) : false;\n}\n\nfunction raiseExecuteActionEvent(action) {\n  var card = action.parent.getRootElement();\n  var onExecuteActionHandler = card && card.onExecuteAction ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\n\n  if (onExecuteActionHandler) {\n    if (action.prepareForExecution()) {\n      onExecuteActionHandler(action);\n    }\n  }\n}\n\nfunction raiseInlineCardExpandedEvent(action, isExpanded) {\n  var card = action.parent.getRootElement();\n  var onInlineCardExpandedHandler = card && card.onInlineCardExpanded ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;\n\n  if (onInlineCardExpandedHandler) {\n    onInlineCardExpandedHandler(action, isExpanded);\n  }\n}\n\nfunction raiseInputValueChangedEvent(input) {\n  var card = input.getRootElement();\n  var onInputValueChangedHandler = card && card.onInputValueChanged ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;\n\n  if (onInputValueChangedHandler) {\n    onInputValueChangedHandler(input);\n  }\n}\n\nfunction raiseElementVisibilityChangedEvent(element, shouldUpdateLayout) {\n  if (shouldUpdateLayout === void 0) {\n    shouldUpdateLayout = true;\n  }\n\n  var rootElement = element.getRootElement();\n\n  if (shouldUpdateLayout) {\n    rootElement.updateLayout();\n  }\n\n  var card = rootElement;\n  var onElementVisibilityChangedHandler = card && card.onElementVisibilityChanged ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;\n\n  if (onElementVisibilityChangedHandler != null) {\n    onElementVisibilityChangedHandler(element);\n  }\n}\n\nfunction raiseParseElementEvent(element, json, errors) {\n  var card = element.getRootElement();\n  var onParseElementHandler = card && card.onParseElement ? card.onParseElement : AdaptiveCard.onParseElement;\n\n  if (onParseElementHandler != null) {\n    onParseElementHandler(element, json, errors);\n  }\n}\n\nfunction raiseParseActionEvent(action, json, errors) {\n  var card = action.parent ? action.parent.getRootElement() : null;\n  var onParseActionHandler = card && card.onParseAction ? card.onParseAction : AdaptiveCard.onParseAction;\n\n  if (onParseActionHandler != null) {\n    onParseActionHandler(action, json, errors);\n  }\n}\n\nfunction raiseParseError(error, errors) {\n  if (errors) {\n    errors.push(error);\n  }\n\n  if (AdaptiveCard.onParseError != null) {\n    AdaptiveCard.onParseError(error);\n  }\n}\n\nvar ContainerWithActions =\n/** @class */\nfunction (_super) {\n  __extends(ContainerWithActions, _super);\n\n  function ContainerWithActions() {\n    var _this = _super.call(this) || this;\n\n    _this._actionCollection = new ActionCollection(_this);\n    return _this;\n  }\n\n  ContainerWithActions.prototype.internalRender = function () {\n    var element = _super.prototype.internalRender.call(this);\n\n    var renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);\n\n    if (renderedActions) {\n      Utils.appendChild(element, Utils.renderSeparation(this.hostConfig, {\n        spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing),\n        lineThickness: null,\n        lineColor: null\n      }, Enums.Orientation.Horizontal));\n      Utils.appendChild(element, renderedActions);\n    }\n\n    if (this.renderIfEmpty) {\n      return element;\n    } else {\n      return element.children.length > 0 ? element : null;\n    }\n  };\n\n  ContainerWithActions.prototype.getHasExpandedAction = function () {\n    if (this.renderedActionCount == 0) {\n      return false;\n    } else if (this.renderedActionCount == 1) {\n      return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;\n    } else {\n      return this._actionCollection.expandedAction != null;\n    }\n  };\n\n  Object.defineProperty(ContainerWithActions.prototype, \"renderedActionCount\", {\n    get: function () {\n      return this._actionCollection.renderedActionCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContainerWithActions.prototype, \"renderIfEmpty\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContainerWithActions.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"actions\", this._actionCollection.toJSON());\n    return result;\n  };\n\n  ContainerWithActions.prototype.getActionCount = function () {\n    return this._actionCollection.items.length;\n  };\n\n  ContainerWithActions.prototype.getActionAt = function (index) {\n    if (index >= 0 && index < this.getActionCount()) {\n      return this._actionCollection.items[index];\n    } else {\n      _super.prototype.getActionAt.call(this, index);\n    }\n  };\n\n  ContainerWithActions.prototype.getActionById = function (id) {\n    var result = this._actionCollection.getActionById(id);\n\n    return result ? result : _super.prototype.getActionById.call(this, id);\n  };\n\n  ContainerWithActions.prototype.parse = function (json, errors) {\n    _super.prototype.parse.call(this, json, errors);\n\n    this._actionCollection.parse(json[\"actions\"], errors);\n  };\n\n  ContainerWithActions.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (this._actionCollection) {\n      this._actionCollection.validateProperties(context);\n    }\n  };\n\n  ContainerWithActions.prototype.isLastElement = function (element) {\n    return _super.prototype.isLastElement.call(this, element) && this._actionCollection.items.length == 0;\n  };\n\n  ContainerWithActions.prototype.addAction = function (action) {\n    this._actionCollection.addAction(action);\n  };\n\n  ContainerWithActions.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this._actionCollection.clear();\n  };\n\n  ContainerWithActions.prototype.getAllInputs = function () {\n    return _super.prototype.getAllInputs.call(this).concat(this._actionCollection.getAllInputs());\n  };\n\n  ContainerWithActions.prototype.getResourceInformation = function () {\n    return _super.prototype.getResourceInformation.call(this).concat(this._actionCollection.getResourceInformation());\n  };\n\n  ContainerWithActions.prototype.isBleedingAtBottom = function () {\n    if (this._actionCollection.renderedActionCount == 0) {\n      return _super.prototype.isBleedingAtBottom.call(this);\n    } else {\n      if (this._actionCollection.items.length == 1) {\n        return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;\n      } else {\n        return this._actionCollection.expandedAction != null;\n      }\n    }\n  };\n\n  Object.defineProperty(ContainerWithActions.prototype, \"isStandalone\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ContainerWithActions;\n}(Container);\n\nexports.ContainerWithActions = ContainerWithActions;\n\nvar TypeRegistry =\n/** @class */\nfunction () {\n  function TypeRegistry() {\n    this._items = [];\n    this.reset();\n  }\n\n  TypeRegistry.prototype.findTypeRegistration = function (typeName) {\n    for (var i = 0; i < this._items.length; i++) {\n      if (this._items[i].typeName === typeName) {\n        return this._items[i];\n      }\n    }\n\n    return null;\n  };\n\n  TypeRegistry.prototype.clear = function () {\n    this._items = [];\n  };\n\n  TypeRegistry.prototype.registerType = function (typeName, createInstance) {\n    var registrationInfo = this.findTypeRegistration(typeName);\n\n    if (registrationInfo != null) {\n      registrationInfo.createInstance = createInstance;\n    } else {\n      registrationInfo = {\n        typeName: typeName,\n        createInstance: createInstance\n      };\n\n      this._items.push(registrationInfo);\n    }\n  };\n\n  TypeRegistry.prototype.unregisterType = function (typeName) {\n    for (var i = 0; i < this._items.length; i++) {\n      if (this._items[i].typeName === typeName) {\n        this._items.splice(i, 1);\n\n        return;\n      }\n    }\n  };\n\n  TypeRegistry.prototype.createInstance = function (typeName) {\n    var registrationInfo = this.findTypeRegistration(typeName);\n    return registrationInfo ? registrationInfo.createInstance() : null;\n  };\n\n  TypeRegistry.prototype.getItemCount = function () {\n    return this._items.length;\n  };\n\n  TypeRegistry.prototype.getItemAt = function (index) {\n    return this._items[index];\n  };\n\n  return TypeRegistry;\n}();\n\nexports.TypeRegistry = TypeRegistry;\n\nvar ElementTypeRegistry =\n/** @class */\nfunction (_super) {\n  __extends(ElementTypeRegistry, _super);\n\n  function ElementTypeRegistry() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ElementTypeRegistry.prototype.reset = function () {\n    this.clear();\n    this.registerType(\"Container\", function () {\n      return new Container();\n    });\n    this.registerType(\"TextBlock\", function () {\n      return new TextBlock();\n    });\n    this.registerType(\"RichTextBlock\", function () {\n      return new RichTextBlock();\n    });\n    this.registerType(\"TextRun\", function () {\n      return new TextRun();\n    });\n    this.registerType(\"Image\", function () {\n      return new Image();\n    });\n    this.registerType(\"ImageSet\", function () {\n      return new ImageSet();\n    });\n    this.registerType(\"Media\", function () {\n      return new Media();\n    });\n    this.registerType(\"FactSet\", function () {\n      return new FactSet();\n    });\n    this.registerType(\"ColumnSet\", function () {\n      return new ColumnSet();\n    });\n    this.registerType(\"ActionSet\", function () {\n      return new ActionSet();\n    });\n    this.registerType(\"Input.Text\", function () {\n      return new TextInput();\n    });\n    this.registerType(\"Input.Date\", function () {\n      return new DateInput();\n    });\n    this.registerType(\"Input.Time\", function () {\n      return new TimeInput();\n    });\n    this.registerType(\"Input.Number\", function () {\n      return new NumberInput();\n    });\n    this.registerType(\"Input.ChoiceSet\", function () {\n      return new ChoiceSetInput();\n    });\n    this.registerType(\"Input.Toggle\", function () {\n      return new ToggleInput();\n    });\n  };\n\n  return ElementTypeRegistry;\n}(TypeRegistry);\n\nexports.ElementTypeRegistry = ElementTypeRegistry;\n\nvar ActionTypeRegistry =\n/** @class */\nfunction (_super) {\n  __extends(ActionTypeRegistry, _super);\n\n  function ActionTypeRegistry() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ActionTypeRegistry.prototype.reset = function () {\n    this.clear();\n    this.registerType(OpenUrlAction.JsonTypeName, function () {\n      return new OpenUrlAction();\n    });\n    this.registerType(SubmitAction.JsonTypeName, function () {\n      return new SubmitAction();\n    });\n    this.registerType(ShowCardAction.JsonTypeName, function () {\n      return new ShowCardAction();\n    });\n    this.registerType(ToggleVisibilityAction.JsonTypeName, function () {\n      return new ToggleVisibilityAction();\n    });\n  };\n\n  return ActionTypeRegistry;\n}(TypeRegistry);\n\nexports.ActionTypeRegistry = ActionTypeRegistry;\n\nvar AdaptiveCard =\n/** @class */\nfunction (_super) {\n  __extends(AdaptiveCard, _super);\n\n  function AdaptiveCard() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._cardTypeName = \"AdaptiveCard\";\n    _this._fallbackCard = null;\n    _this.onAnchorClicked = null;\n    _this.onExecuteAction = null;\n    _this.onElementVisibilityChanged = null;\n    _this.onImageLoaded = null;\n    _this.onInlineCardExpanded = null;\n    _this.onInputValueChanged = null;\n    _this.onParseElement = null;\n    _this.onParseAction = null;\n    _this.version = new HostConfig.Version(1, 0);\n    _this.designMode = false;\n    return _this;\n  }\n\n  Object.defineProperty(AdaptiveCard, \"processMarkdown\", {\n    get: function () {\n      throw new Error(\"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\");\n    },\n    set: function (value) {\n      throw new Error(\"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AdaptiveCard.applyMarkdown = function (text) {\n    var result = {\n      didProcess: false\n    };\n\n    if (AdaptiveCard.onProcessMarkdown) {\n      AdaptiveCard.onProcessMarkdown(text, result);\n    } else if (window[\"markdownit\"]) {\n      // Check for markdownit\n      result.outputHtml = window[\"markdownit\"]().render(text);\n      result.didProcess = true;\n    } else {\n      console.warn(\"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\");\n    }\n\n    return result;\n  };\n\n  AdaptiveCard.prototype.isVersionSupported = function () {\n    if (this.bypassVersionCheck) {\n      return true;\n    } else {\n      var unsupportedVersion = !this.version || !this.version.isValid || AdaptiveCard.currentVersion.major < this.version.major || AdaptiveCard.currentVersion.major == this.version.major && AdaptiveCard.currentVersion.minor < this.version.minor;\n      return !unsupportedVersion;\n    }\n  };\n\n  AdaptiveCard.prototype.getItemsCollectionPropertyName = function () {\n    return \"body\";\n  };\n\n  AdaptiveCard.prototype.internalRender = function () {\n    var renderedElement = _super.prototype.internalRender.call(this);\n\n    if (AdaptiveCard.useAdvancedCardBottomTruncation) {\n      // Unlike containers, the root card element should be allowed to\n      // be shorter than its content (otherwise the overflow truncation\n      // logic would never get triggered)\n      renderedElement.style.minHeight = null;\n    }\n\n    return renderedElement;\n  };\n\n  AdaptiveCard.prototype.getHasBackground = function () {\n    return true;\n  };\n\n  AdaptiveCard.prototype.getDefaultPadding = function () {\n    return new Shared.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding);\n  };\n\n  Object.defineProperty(AdaptiveCard.prototype, \"renderIfEmpty\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AdaptiveCard.prototype, \"bypassVersionCheck\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AdaptiveCard.prototype, \"allowCustomStyle\", {\n    get: function () {\n      return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AdaptiveCard.prototype, \"hasBackground\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AdaptiveCard.prototype.getJsonTypeName = function () {\n    return \"AdaptiveCard\";\n  };\n\n  AdaptiveCard.prototype.toJSON = function () {\n    var result = _super.prototype.toJSON.call(this);\n\n    Utils.setProperty(result, \"$schema\", \"http://adaptivecards.io/schemas/adaptive-card.json\");\n\n    if (!this.bypassVersionCheck && this.version) {\n      Utils.setProperty(result, \"version\", this.version.toString());\n    }\n\n    Utils.setProperty(result, \"fallbackText\", this.fallbackText);\n    Utils.setProperty(result, \"lang\", this.lang);\n    Utils.setProperty(result, \"speak\", this.speak);\n    return result;\n  };\n\n  AdaptiveCard.prototype.internalValidateProperties = function (context) {\n    _super.prototype.internalValidateProperties.call(this, context);\n\n    if (this._cardTypeName != \"AdaptiveCard\") {\n      context.addFailure(this, {\n        error: Enums.ValidationError.MissingCardType,\n        message: \"Invalid or missing card type. Make sure the card's type property is set to \\\"AdaptiveCard\\\".\"\n      });\n    }\n\n    if (!this.bypassVersionCheck && !this.version) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.PropertyCantBeNull,\n        message: \"The version property must be specified.\"\n      });\n    } else if (!this.isVersionSupported()) {\n      context.addFailure(this, {\n        error: Enums.ValidationError.UnsupportedCardVersion,\n        message: \"The specified card version (\" + this.version + \") is not supported. The maximum supported card version is \" + AdaptiveCard.currentVersion\n      });\n    }\n  };\n\n  AdaptiveCard.prototype.parse = function (json, errors) {\n    this._fallbackCard = null;\n    this._cardTypeName = Utils.getStringValue(json[\"type\"]);\n    this.speak = Utils.getStringValue(json[\"speak\"]);\n    var langId = json[\"lang\"];\n\n    if (langId && typeof langId === \"string\") {\n      try {\n        this.lang = langId;\n      } catch (e) {\n        raiseParseError({\n          error: Enums.ValidationError.InvalidPropertyValue,\n          message: e.message\n        }, errors);\n      }\n    }\n\n    this.version = HostConfig.Version.parse(json[\"version\"], errors);\n    this.fallbackText = Utils.getStringValue(json[\"fallbackText\"]);\n    var fallbackElement = createElementInstance(null, json[\"fallback\"], !this.isDesignMode(), errors);\n\n    if (fallbackElement) {\n      this._fallbackCard = new AdaptiveCard();\n\n      this._fallbackCard.addItem(fallbackElement);\n    }\n\n    _super.prototype.parse.call(this, json, errors);\n  };\n\n  AdaptiveCard.prototype.render = function (target) {\n    var renderedCard;\n\n    if (this.shouldFallback() && this._fallbackCard) {\n      this._fallbackCard.hostConfig = this.hostConfig;\n      renderedCard = this._fallbackCard.render();\n    } else {\n      renderedCard = _super.prototype.render.call(this);\n\n      if (renderedCard) {\n        renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\n        renderedCard.tabIndex = 0;\n\n        if (!Utils.isNullOrEmpty(this.speak)) {\n          renderedCard.setAttribute(\"aria-label\", this.speak);\n        }\n      }\n    }\n\n    if (target) {\n      target.appendChild(renderedCard);\n      this.updateLayout();\n    }\n\n    return renderedCard;\n  };\n\n  AdaptiveCard.prototype.updateLayout = function (processChildren) {\n    if (processChildren === void 0) {\n      processChildren = true;\n    }\n\n    _super.prototype.updateLayout.call(this, processChildren);\n\n    if (AdaptiveCard.useAdvancedCardBottomTruncation && this.isRendered()) {\n      var card = this.renderedElement;\n      var padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\n      this['handleOverflow'](card.offsetHeight - padding);\n    }\n  };\n\n  AdaptiveCard.prototype.shouldFallback = function () {\n    return _super.prototype.shouldFallback.call(this) || !this.isVersionSupported();\n  };\n\n  Object.defineProperty(AdaptiveCard.prototype, \"hasVisibleSeparator\", {\n    get: function () {\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AdaptiveCard.currentVersion = new HostConfig.Version(1, 2);\n  AdaptiveCard.useAdvancedTextBlockTruncation = true;\n  AdaptiveCard.useAdvancedCardBottomTruncation = false;\n  AdaptiveCard.useMarkdownInRadioButtonAndCheckbox = true;\n  AdaptiveCard.allowMarkForTextHighlighting = false;\n  AdaptiveCard.alwaysBleedSeparators = false;\n  AdaptiveCard.enableFullJsonRoundTrip = false;\n  AdaptiveCard.useBuiltInInputValidation = false;\n  AdaptiveCard.displayInputValidationErrors = true;\n  AdaptiveCard.elementTypeRegistry = new ElementTypeRegistry();\n  AdaptiveCard.actionTypeRegistry = new ActionTypeRegistry();\n  AdaptiveCard.onAnchorClicked = null;\n  AdaptiveCard.onExecuteAction = null;\n  AdaptiveCard.onElementVisibilityChanged = null;\n  AdaptiveCard.onImageLoaded = null;\n  AdaptiveCard.onInlineCardExpanded = null;\n  AdaptiveCard.onInputValueChanged = null;\n  AdaptiveCard.onParseElement = null;\n  AdaptiveCard.onParseAction = null;\n  AdaptiveCard.onParseError = null;\n  AdaptiveCard.onProcessMarkdown = null;\n  return AdaptiveCard;\n}(ContainerWithActions);\n\nexports.AdaptiveCard = AdaptiveCard;\n\nvar InlineAdaptiveCard =\n/** @class */\nfunction (_super) {\n  __extends(InlineAdaptiveCard, _super);\n\n  function InlineAdaptiveCard() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.suppressStyle = false;\n    return _this;\n  }\n\n  InlineAdaptiveCard.prototype.getDefaultPadding = function () {\n    return new Shared.PaddingDefinition(this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding, this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding);\n  };\n\n  Object.defineProperty(InlineAdaptiveCard.prototype, \"bypassVersionCheck\", {\n    get: function () {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InlineAdaptiveCard.prototype, \"defaultStyle\", {\n    get: function () {\n      if (this.suppressStyle) {\n        return Enums.ContainerStyle.Default;\n      } else {\n        return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  InlineAdaptiveCard.prototype.render = function (target) {\n    var renderedCard = _super.prototype.render.call(this, target);\n\n    renderedCard.setAttribute(\"aria-live\", \"polite\");\n    renderedCard.removeAttribute(\"tabindex\");\n    return renderedCard;\n  };\n\n  InlineAdaptiveCard.prototype.getForbiddenActionTypes = function () {\n    return [ShowCardAction];\n  };\n\n  return InlineAdaptiveCard;\n}(AdaptiveCard);\n\nvar defaultHostConfig = new HostConfig.HostConfig({\n  supportsInteractivity: true,\n  spacing: {\n    small: 10,\n    default: 20,\n    medium: 30,\n    large: 40,\n    extraLarge: 50,\n    padding: 20\n  },\n  separator: {\n    lineThickness: 1,\n    lineColor: \"#EEEEEE\"\n  },\n  fontTypes: {\n    default: {\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n      fontSizes: {\n        small: 12,\n        default: 14,\n        medium: 17,\n        large: 21,\n        extraLarge: 26\n      },\n      fontWeights: {\n        lighter: 200,\n        default: 400,\n        bolder: 600\n      }\n    },\n    monospace: {\n      fontFamily: \"'Courier New', Courier, monospace\",\n      fontSizes: {\n        small: 12,\n        default: 14,\n        medium: 17,\n        large: 21,\n        extraLarge: 26\n      },\n      fontWeights: {\n        lighter: 200,\n        default: 400,\n        bolder: 600\n      }\n    }\n  },\n  imageSizes: {\n    small: 40,\n    medium: 80,\n    large: 160\n  },\n  containerStyles: {\n    default: {\n      backgroundColor: \"#FFFFFF\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    },\n    emphasis: {\n      backgroundColor: \"#08000000\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    },\n    accent: {\n      backgroundColor: \"#C7DEF9\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    },\n    good: {\n      backgroundColor: \"#CCFFCC\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    },\n    attention: {\n      backgroundColor: \"#FFC5B2\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    },\n    warning: {\n      backgroundColor: \"#FFE2B2\",\n      foregroundColors: {\n        default: {\n          default: \"#333333\",\n          subtle: \"#EE333333\"\n        },\n        dark: {\n          default: \"#000000\",\n          subtle: \"#66000000\"\n        },\n        light: {\n          default: \"#FFFFFF\",\n          subtle: \"#33000000\"\n        },\n        accent: {\n          default: \"#2E89FC\",\n          subtle: \"#882E89FC\"\n        },\n        attention: {\n          default: \"#cc3300\",\n          subtle: \"#DDcc3300\"\n        },\n        good: {\n          default: \"#54a254\",\n          subtle: \"#DD54a254\"\n        },\n        warning: {\n          default: \"#e69500\",\n          subtle: \"#DDe69500\"\n        }\n      }\n    }\n  },\n  actions: {\n    maxActions: 5,\n    spacing: Enums.Spacing.Default,\n    buttonSpacing: 10,\n    showCard: {\n      actionMode: Enums.ShowCardActionMode.Inline,\n      inlineTopMargin: 16\n    },\n    actionsOrientation: Enums.Orientation.Horizontal,\n    actionAlignment: Enums.ActionAlignment.Left\n  },\n  adaptiveCard: {\n    allowCustomStyle: false\n  },\n  imageSet: {\n    imageSize: Enums.Size.Medium,\n    maxImageHeight: 100\n  },\n  factSet: {\n    title: {\n      color: Enums.TextColor.Default,\n      size: Enums.TextSize.Default,\n      isSubtle: false,\n      weight: Enums.TextWeight.Bolder,\n      wrap: true,\n      maxWidth: 150\n    },\n    value: {\n      color: Enums.TextColor.Default,\n      size: Enums.TextSize.Default,\n      isSubtle: false,\n      weight: Enums.TextWeight.Default,\n      wrap: true\n    },\n    spacing: 10\n  }\n});","map":null,"metadata":{},"sourceType":"script"}