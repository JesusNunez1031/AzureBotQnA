{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-config\n */\n\n/**\n * Copyright(c) Microsoft Corporation.All rights reserved.\n * Licensed under the MIT License.\n */\n\nconst models_1 = require(\"./models\");\n\nconst schema_1 = require(\"./schema\");\n/**\n * This is class which allows you to manipulate in memory representations of bot configuration with\n * no nodejs dependencies.\n */\n\n\nclass BotConfigurationBase {\n  /**\n   * Creates a new BotConfigurationBase instance.\n   */\n  constructor() {\n    this.name = '';\n    this.description = '';\n    this.services = [];\n    this.padlock = '';\n    this.version = '2.0'; // noop\n  }\n  /**\n   * Returns a ConnectedService instance given a JSON based service configuration.\n   * @param service JSON based service configuration.\n   */\n\n\n  static serviceFromJSON(service) {\n    switch (service.type) {\n      case schema_1.ServiceTypes.File:\n        return new models_1.FileService(service);\n\n      case schema_1.ServiceTypes.QnA:\n        return new models_1.QnaMakerService(service);\n\n      case schema_1.ServiceTypes.Dispatch:\n        return new models_1.DispatchService(service);\n\n      case schema_1.ServiceTypes.Bot:\n        return new models_1.BotService(service);\n\n      case schema_1.ServiceTypes.Luis:\n        return new models_1.LuisService(service);\n\n      case schema_1.ServiceTypes.Endpoint:\n        return new models_1.EndpointService(service);\n\n      case schema_1.ServiceTypes.AppInsights:\n        return new models_1.AppInsightsService(service);\n\n      case schema_1.ServiceTypes.BlobStorage:\n        return new models_1.BlobStorageService(service);\n\n      case schema_1.ServiceTypes.CosmosDB:\n        return new models_1.CosmosDbService(service);\n\n      case schema_1.ServiceTypes.Generic:\n        return new models_1.GenericService(service);\n\n      default:\n        return new models_1.ConnectedService(service);\n    }\n  }\n  /**\n   * Returns a new BotConfigurationBase instance given a JSON based configuration.\n   * @param source JSON based configuration.\n   */\n\n\n  static fromJSON(source = {}) {\n    // tslint:disable-next-line:prefer-const\n    const services = source.services ? source.services.slice().map(BotConfigurationBase.serviceFromJSON) : [];\n    const botConfig = new BotConfigurationBase();\n    Object.assign(botConfig, source);\n    botConfig.services = services;\n    botConfig.migrateData();\n    return botConfig;\n  }\n  /**\n   * Returns a JSON based version of the current bot.\n   */\n\n\n  toJSON() {\n    const newConfig = {};\n    Object.assign(newConfig, this);\n    delete newConfig.internal;\n    newConfig.services = this.services.slice().map(service => service.toJSON());\n    return newConfig;\n  }\n  /**\n   * Connect a service to the bot file.\n   * @param newService Service to add.\n   * @returns Assigned ID for the service.\n   */\n\n\n  connectService(newService) {\n    const service = BotConfigurationBase.serviceFromJSON(newService);\n\n    if (!service.id) {\n      let maxValue = 0;\n      this.services.forEach(s => {\n        if (parseInt(s.id) > maxValue) {\n          maxValue = parseInt(s.id);\n        }\n      });\n      service.id = (++maxValue).toString();\n    } else if (this.services.filter(s => s.type === service.type && s.id === service.id).length) {\n      throw new Error(\"Service with \".concat(service.id, \" is already connected\"));\n    }\n\n    this.services.push(service);\n    return service.id;\n  }\n  /**\n   * Find service by id.\n   * @param id ID of the service to find.\n   */\n\n\n  findService(id) {\n    for (const service of this.services) {\n      if (service.id === id) {\n        return service;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Find service by name or id.\n   * @param nameOrId Name or ID of the service to find.\n   */\n\n\n  findServiceByNameOrId(nameOrId) {\n    for (const service of this.services) {\n      if (service.id === nameOrId) {\n        return service;\n      }\n    }\n\n    for (const service of this.services) {\n      if (service.name === nameOrId) {\n        return service;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove service by name or id.\n   * @param nameOrId Name or ID of the service to remove.\n   */\n\n\n  disconnectServiceByNameOrId(nameOrId) {\n    const _this$services = this.services,\n          services = _this$services === void 0 ? [] : _this$services;\n    let i = services.length;\n\n    while (i--) {\n      const service = services[i];\n\n      if (service.id === nameOrId || service.name === nameOrId) {\n        return services.splice(i, 1)[0];\n      }\n    }\n\n    throw new Error(\"a service with id or name of [\".concat(nameOrId, \"] was not found\"));\n  }\n  /**\n   * Remove service by id.\n   * @param nameOrId ID of the service to remove.\n   */\n\n\n  disconnectService(id) {\n    const _this$services2 = this.services,\n          services = _this$services2 === void 0 ? [] : _this$services2;\n    let i = services.length;\n\n    while (i--) {\n      const service = services[i];\n\n      if (service.id === id) {\n        services.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Migrate old formated data into new format.\n   */\n\n\n  migrateData() {\n    for (const service of this.services) {\n      switch (service.type) {\n        case schema_1.ServiceTypes.Bot:\n          {\n            const botService = service; // old bot service records may not have the appId on the bot, but we probably have it already on an endpoint\n\n            if (!botService.appId) {\n              for (const s of this.services) {\n                if (s.type === schema_1.ServiceTypes.Endpoint) {\n                  const endpoint = s;\n\n                  if (endpoint.appId) {\n                    botService.appId = endpoint.appId;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    } // this is now a 2.0 version of the schema\n\n\n    this.version = '2.0';\n  }\n\n}\n\nexports.BotConfigurationBase = BotConfigurationBase;","map":null,"metadata":{},"sourceType":"script"}